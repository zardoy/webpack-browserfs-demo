/*! For license information please see main.js.LICENSE.txt */
(()=>{var t={46:(t,e,r)=>{var n;t=r.nmd(t);var i=function(t){"use strict";var e=1e7,r=7,n=9007199254740992,o=h(n),a="0123456789abcdefghijklmnopqrstuvwxyz",s="function"==typeof BigInt;function u(t,e,r,n){return void 0===t?u[0]:void 0===e||10==+e&&!r?K(t):Z(t,e,r,n)}function c(t,e){this.value=t,this.sign=e,this.isSmall=!1}function f(t){this.value=t,this.sign=t<0,this.isSmall=!0}function p(t){this.value=t}function l(t){return-n<t&&t<n}function h(t){return t<1e7?[t]:t<1e14?[t%1e7,Math.floor(t/1e7)]:[t%1e7,Math.floor(t/1e7)%1e7,Math.floor(t/1e14)]}function y(t){d(t);var r=t.length;if(r<4&&T(t,o)<0)switch(r){case 0:return 0;case 1:return t[0];case 2:return t[0]+t[1]*e;default:return t[0]+(t[1]+t[2]*e)*e}return t}function d(t){for(var e=t.length;0===t[--e];);t.length=e+1}function g(t){for(var e=new Array(t),r=-1;++r<t;)e[r]=0;return e}function v(t){return t>0?Math.floor(t):Math.ceil(t)}function m(t,r){var n,i,o=t.length,a=r.length,s=new Array(o),u=0,c=e;for(i=0;i<a;i++)u=(n=t[i]+r[i]+u)>=c?1:0,s[i]=n-u*c;for(;i<o;)u=(n=t[i]+u)===c?1:0,s[i++]=n-u*c;return u>0&&s.push(u),s}function w(t,e){return t.length>=e.length?m(t,e):m(e,t)}function _(t,r){var n,i,o=t.length,a=new Array(o),s=e;for(i=0;i<o;i++)n=t[i]-s+r,r=Math.floor(n/s),a[i]=n-r*s,r+=1;for(;r>0;)a[i++]=r%s,r=Math.floor(r/s);return a}function b(t,r){var n,i,o=t.length,a=r.length,s=new Array(o),u=0,c=e;for(n=0;n<a;n++)(i=t[n]-u-r[n])<0?(i+=c,u=1):u=0,s[n]=i;for(n=a;n<o;n++){if(!((i=t[n]-u)<0)){s[n++]=i;break}i+=c,s[n]=i}for(;n<o;n++)s[n]=t[n];return d(s),s}function S(t,r,n){var i,o,a=t.length,s=new Array(a),u=-r,p=e;for(i=0;i<a;i++)o=t[i]+u,u=Math.floor(o/p),o%=p,s[i]=o<0?o+p:o;return"number"==typeof(s=y(s))?(n&&(s=-s),new f(s)):new c(s,n)}function E(t,r){var n,i,o,a,s=t.length,u=r.length,c=g(s+u),f=e;for(o=0;o<s;++o){a=t[o];for(var p=0;p<u;++p)n=a*r[p]+c[o+p],i=Math.floor(n/f),c[o+p]=n-i*f,c[o+p+1]+=i}return d(c),c}function O(t,r){var n,i,o=t.length,a=new Array(o),s=e,u=0;for(i=0;i<o;i++)n=t[i]*r+u,u=Math.floor(n/s),a[i]=n-u*s;for(;u>0;)a[i++]=u%s,u=Math.floor(u/s);return a}function I(t,e){for(var r=[];e-- >0;)r.push(0);return r.concat(t)}function k(t,e){var r=Math.max(t.length,e.length);if(r<=30)return E(t,e);r=Math.ceil(r/2);var n=t.slice(r),i=t.slice(0,r),o=e.slice(r),a=e.slice(0,r),s=k(i,a),u=k(n,o),c=k(w(i,n),w(a,o)),f=w(w(s,I(b(b(c,s),u),r)),I(u,2*r));return d(f),f}function F(t,r,n){return new c(t<e?O(r,t):E(r,h(t)),n)}function A(t){var r,n,i,o,a=t.length,s=g(a+a),u=e;for(i=0;i<a;i++){n=0-(o=t[i])*o;for(var c=i;c<a;c++)r=o*t[c]*2+s[i+c]+n,n=Math.floor(r/u),s[i+c]=r-n*u;s[i+a]=n}return d(s),s}function N(t,r){var n,i,o,a,s=t.length,u=g(s),c=e;for(o=0,n=s-1;n>=0;--n)o=(a=o*c+t[n])-(i=v(a/r))*r,u[n]=0|i;return[u,0|o]}function R(t,r){var n,i=K(r);if(s)return[new p(t.value/i.value),new p(t.value%i.value)];var o,a=t.value,l=i.value;if(0===l)throw new Error("Cannot divide by zero");if(t.isSmall)return i.isSmall?[new f(v(a/l)),new f(a%l)]:[u[0],t];if(i.isSmall){if(1===l)return[t,u[0]];if(-1==l)return[t.negate(),u[0]];var m=Math.abs(l);if(m<e){o=y((n=N(a,m))[0]);var w=n[1];return t.sign&&(w=-w),"number"==typeof o?(t.sign!==i.sign&&(o=-o),[new f(o),new f(w)]):[new c(o,t.sign!==i.sign),new f(w)]}l=h(m)}var _=T(a,l);if(-1===_)return[u[0],t];if(0===_)return[u[t.sign===i.sign?1:-1],u[0]];n=a.length+l.length<=200?function(t,r){var n,i,o,a,s,u,c,f=t.length,p=r.length,l=e,h=g(r.length),d=r[p-1],v=Math.ceil(l/(2*d)),m=O(t,v),w=O(r,v);for(m.length<=f&&m.push(0),w.push(0),d=w[p-1],i=f-p;i>=0;i--){for(n=l-1,m[i+p]!==d&&(n=Math.floor((m[i+p]*l+m[i+p-1])/d)),o=0,a=0,u=w.length,s=0;s<u;s++)o+=n*w[s],c=Math.floor(o/l),a+=m[i+s]-(o-c*l),o=c,a<0?(m[i+s]=a+l,a=-1):(m[i+s]=a,a=0);for(;0!==a;){for(n-=1,o=0,s=0;s<u;s++)(o+=m[i+s]-l+w[s])<0?(m[i+s]=o+l,o=0):(m[i+s]=o,o=1);a+=o}h[i]=n}return m=N(m,v)[0],[y(h),y(m)]}(a,l):function(t,r){for(var n,i,o,a,s,u=t.length,c=r.length,f=[],p=[],l=e;u;)if(p.unshift(t[--u]),d(p),T(p,r)<0)f.push(0);else{o=p[(i=p.length)-1]*l+p[i-2],a=r[c-1]*l+r[c-2],i>c&&(o=(o+1)*l),n=Math.ceil(o/a);do{if(T(s=O(r,n),p)<=0)break;n--}while(n);f.push(n),p=b(p,s)}return f.reverse(),[y(f),y(p)]}(a,l),o=n[0];var S=t.sign!==i.sign,E=n[1],I=t.sign;return"number"==typeof o?(S&&(o=-o),o=new f(o)):o=new c(o,S),"number"==typeof E?(I&&(E=-E),E=new f(E)):E=new c(E,I),[o,E]}function T(t,e){if(t.length!==e.length)return t.length>e.length?1:-1;for(var r=t.length-1;r>=0;r--)if(t[r]!==e[r])return t[r]>e[r]?1:-1;return 0}function x(t){var e=t.abs();return!e.isUnit()&&(!!(e.equals(2)||e.equals(3)||e.equals(5))||!(e.isEven()||e.isDivisibleBy(3)||e.isDivisibleBy(5))&&(!!e.lesser(49)||void 0))}function L(t,e){for(var r,n,o,a=t.prev(),s=a,u=0;s.isEven();)s=s.divide(2),u++;t:for(n=0;n<e.length;n++)if(!t.lesser(e[n])&&!(o=i(e[n]).modPow(s,t)).isUnit()&&!o.equals(a)){for(r=u-1;0!=r;r--){if((o=o.square().mod(t)).isUnit())return!1;if(o.equals(a))continue t}return!1}return!0}c.prototype=Object.create(u.prototype),f.prototype=Object.create(u.prototype),p.prototype=Object.create(u.prototype),c.prototype.add=function(t){var e=K(t);if(this.sign!==e.sign)return this.subtract(e.negate());var r=this.value,n=e.value;return e.isSmall?new c(_(r,Math.abs(n)),this.sign):new c(w(r,n),this.sign)},c.prototype.plus=c.prototype.add,f.prototype.add=function(t){var e=K(t),r=this.value;if(r<0!==e.sign)return this.subtract(e.negate());var n=e.value;if(e.isSmall){if(l(r+n))return new f(r+n);n=h(Math.abs(n))}return new c(_(n,Math.abs(r)),r<0)},f.prototype.plus=f.prototype.add,p.prototype.add=function(t){return new p(this.value+K(t).value)},p.prototype.plus=p.prototype.add,c.prototype.subtract=function(t){var e=K(t);if(this.sign!==e.sign)return this.add(e.negate());var r=this.value,n=e.value;return e.isSmall?S(r,Math.abs(n),this.sign):function(t,e,r){var n;return T(t,e)>=0?n=b(t,e):(n=b(e,t),r=!r),"number"==typeof(n=y(n))?(r&&(n=-n),new f(n)):new c(n,r)}(r,n,this.sign)},c.prototype.minus=c.prototype.subtract,f.prototype.subtract=function(t){var e=K(t),r=this.value;if(r<0!==e.sign)return this.add(e.negate());var n=e.value;return e.isSmall?new f(r-n):S(n,Math.abs(r),r>=0)},f.prototype.minus=f.prototype.subtract,p.prototype.subtract=function(t){return new p(this.value-K(t).value)},p.prototype.minus=p.prototype.subtract,c.prototype.negate=function(){return new c(this.value,!this.sign)},f.prototype.negate=function(){var t=this.sign,e=new f(-this.value);return e.sign=!t,e},p.prototype.negate=function(){return new p(-this.value)},c.prototype.abs=function(){return new c(this.value,!1)},f.prototype.abs=function(){return new f(Math.abs(this.value))},p.prototype.abs=function(){return new p(this.value>=0?this.value:-this.value)},c.prototype.multiply=function(t){var r,n,i,o=K(t),a=this.value,s=o.value,f=this.sign!==o.sign;if(o.isSmall){if(0===s)return u[0];if(1===s)return this;if(-1===s)return this.negate();if((r=Math.abs(s))<e)return new c(O(a,r),f);s=h(r)}return new c(-.012*(n=a.length)-.012*(i=s.length)+15e-6*n*i>0?k(a,s):E(a,s),f)},c.prototype.times=c.prototype.multiply,f.prototype._multiplyBySmall=function(t){return l(t.value*this.value)?new f(t.value*this.value):F(Math.abs(t.value),h(Math.abs(this.value)),this.sign!==t.sign)},c.prototype._multiplyBySmall=function(t){return 0===t.value?u[0]:1===t.value?this:-1===t.value?this.negate():F(Math.abs(t.value),this.value,this.sign!==t.sign)},f.prototype.multiply=function(t){return K(t)._multiplyBySmall(this)},f.prototype.times=f.prototype.multiply,p.prototype.multiply=function(t){return new p(this.value*K(t).value)},p.prototype.times=p.prototype.multiply,c.prototype.square=function(){return new c(A(this.value),!1)},f.prototype.square=function(){var t=this.value*this.value;return l(t)?new f(t):new c(A(h(Math.abs(this.value))),!1)},p.prototype.square=function(t){return new p(this.value*this.value)},c.prototype.divmod=function(t){var e=R(this,t);return{quotient:e[0],remainder:e[1]}},p.prototype.divmod=f.prototype.divmod=c.prototype.divmod,c.prototype.divide=function(t){return R(this,t)[0]},p.prototype.over=p.prototype.divide=function(t){return new p(this.value/K(t).value)},f.prototype.over=f.prototype.divide=c.prototype.over=c.prototype.divide,c.prototype.mod=function(t){return R(this,t)[1]},p.prototype.mod=p.prototype.remainder=function(t){return new p(this.value%K(t).value)},f.prototype.remainder=f.prototype.mod=c.prototype.remainder=c.prototype.mod,c.prototype.pow=function(t){var e,r,n,i=K(t),o=this.value,a=i.value;if(0===a)return u[1];if(0===o)return u[0];if(1===o)return u[1];if(-1===o)return i.isEven()?u[1]:u[-1];if(i.sign)return u[0];if(!i.isSmall)throw new Error("The exponent "+i.toString()+" is too large.");if(this.isSmall&&l(e=Math.pow(o,a)))return new f(v(e));for(r=this,n=u[1];!0&a&&(n=n.times(r),--a),0!==a;)a/=2,r=r.square();return n},f.prototype.pow=c.prototype.pow,p.prototype.pow=function(t){var e=K(t),r=this.value,n=e.value,i=BigInt(0),o=BigInt(1),a=BigInt(2);if(n===i)return u[1];if(r===i)return u[0];if(r===o)return u[1];if(r===BigInt(-1))return e.isEven()?u[1]:u[-1];if(e.isNegative())return new p(i);for(var s=this,c=u[1];(n&o)===o&&(c=c.times(s),--n),n!==i;)n/=a,s=s.square();return c},c.prototype.modPow=function(t,e){if(t=K(t),(e=K(e)).isZero())throw new Error("Cannot take modPow with modulus 0");var r=u[1],n=this.mod(e);for(t.isNegative()&&(t=t.multiply(u[-1]),n=n.modInv(e));t.isPositive();){if(n.isZero())return u[0];t.isOdd()&&(r=r.multiply(n).mod(e)),t=t.divide(2),n=n.square().mod(e)}return r},p.prototype.modPow=f.prototype.modPow=c.prototype.modPow,c.prototype.compareAbs=function(t){var e=K(t),r=this.value,n=e.value;return e.isSmall?1:T(r,n)},f.prototype.compareAbs=function(t){var e=K(t),r=Math.abs(this.value),n=e.value;return e.isSmall?r===(n=Math.abs(n))?0:r>n?1:-1:-1},p.prototype.compareAbs=function(t){var e=this.value,r=K(t).value;return(e=e>=0?e:-e)===(r=r>=0?r:-r)?0:e>r?1:-1},c.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=K(t),r=this.value,n=e.value;return this.sign!==e.sign?e.sign?1:-1:e.isSmall?this.sign?-1:1:T(r,n)*(this.sign?-1:1)},c.prototype.compareTo=c.prototype.compare,f.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=K(t),r=this.value,n=e.value;return e.isSmall?r==n?0:r>n?1:-1:r<0!==e.sign?r<0?-1:1:r<0?1:-1},f.prototype.compareTo=f.prototype.compare,p.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=this.value,r=K(t).value;return e===r?0:e>r?1:-1},p.prototype.compareTo=p.prototype.compare,c.prototype.equals=function(t){return 0===this.compare(t)},p.prototype.eq=p.prototype.equals=f.prototype.eq=f.prototype.equals=c.prototype.eq=c.prototype.equals,c.prototype.notEquals=function(t){return 0!==this.compare(t)},p.prototype.neq=p.prototype.notEquals=f.prototype.neq=f.prototype.notEquals=c.prototype.neq=c.prototype.notEquals,c.prototype.greater=function(t){return this.compare(t)>0},p.prototype.gt=p.prototype.greater=f.prototype.gt=f.prototype.greater=c.prototype.gt=c.prototype.greater,c.prototype.lesser=function(t){return this.compare(t)<0},p.prototype.lt=p.prototype.lesser=f.prototype.lt=f.prototype.lesser=c.prototype.lt=c.prototype.lesser,c.prototype.greaterOrEquals=function(t){return this.compare(t)>=0},p.prototype.geq=p.prototype.greaterOrEquals=f.prototype.geq=f.prototype.greaterOrEquals=c.prototype.geq=c.prototype.greaterOrEquals,c.prototype.lesserOrEquals=function(t){return this.compare(t)<=0},p.prototype.leq=p.prototype.lesserOrEquals=f.prototype.leq=f.prototype.lesserOrEquals=c.prototype.leq=c.prototype.lesserOrEquals,c.prototype.isEven=function(){return 0==(1&this.value[0])},f.prototype.isEven=function(){return 0==(1&this.value)},p.prototype.isEven=function(){return(this.value&BigInt(1))===BigInt(0)},c.prototype.isOdd=function(){return 1==(1&this.value[0])},f.prototype.isOdd=function(){return 1==(1&this.value)},p.prototype.isOdd=function(){return(this.value&BigInt(1))===BigInt(1)},c.prototype.isPositive=function(){return!this.sign},f.prototype.isPositive=function(){return this.value>0},p.prototype.isPositive=f.prototype.isPositive,c.prototype.isNegative=function(){return this.sign},f.prototype.isNegative=function(){return this.value<0},p.prototype.isNegative=f.prototype.isNegative,c.prototype.isUnit=function(){return!1},f.prototype.isUnit=function(){return 1===Math.abs(this.value)},p.prototype.isUnit=function(){return this.abs().value===BigInt(1)},c.prototype.isZero=function(){return!1},f.prototype.isZero=function(){return 0===this.value},p.prototype.isZero=function(){return this.value===BigInt(0)},c.prototype.isDivisibleBy=function(t){var e=K(t);return!e.isZero()&&(!!e.isUnit()||(0===e.compareAbs(2)?this.isEven():this.mod(e).isZero()))},p.prototype.isDivisibleBy=f.prototype.isDivisibleBy=c.prototype.isDivisibleBy,c.prototype.isPrime=function(e){var r=x(this);if(r!==t)return r;var n=this.abs(),o=n.bitLength();if(o<=64)return L(n,[2,3,5,7,11,13,17,19,23,29,31,37]);for(var a=Math.log(2)*o.toJSNumber(),s=Math.ceil(!0===e?2*Math.pow(a,2):a),u=[],c=0;c<s;c++)u.push(i(c+2));return L(n,u)},p.prototype.isPrime=f.prototype.isPrime=c.prototype.isPrime,c.prototype.isProbablePrime=function(e,r){var n=x(this);if(n!==t)return n;for(var o=this.abs(),a=e===t?5:e,s=[],u=0;u<a;u++)s.push(i.randBetween(2,o.minus(2),r));return L(o,s)},p.prototype.isProbablePrime=f.prototype.isProbablePrime=c.prototype.isProbablePrime,c.prototype.modInv=function(t){for(var e,r,n,o=i.zero,a=i.one,s=K(t),u=this.abs();!u.isZero();)e=s.divide(u),r=o,n=s,o=a,s=u,a=r.subtract(e.multiply(a)),u=n.subtract(e.multiply(u));if(!s.isUnit())throw new Error(this.toString()+" and "+t.toString()+" are not co-prime");return-1===o.compare(0)&&(o=o.add(t)),this.isNegative()?o.negate():o},p.prototype.modInv=f.prototype.modInv=c.prototype.modInv,c.prototype.next=function(){var t=this.value;return this.sign?S(t,1,this.sign):new c(_(t,1),this.sign)},f.prototype.next=function(){var t=this.value;return t+1<n?new f(t+1):new c(o,!1)},p.prototype.next=function(){return new p(this.value+BigInt(1))},c.prototype.prev=function(){var t=this.value;return this.sign?new c(_(t,1),!0):S(t,1,this.sign)},f.prototype.prev=function(){var t=this.value;return t-1>-n?new f(t-1):new c(o,!0)},p.prototype.prev=function(){return new p(this.value-BigInt(1))};for(var D=[1];2*D[D.length-1]<=e;)D.push(2*D[D.length-1]);var P=D.length,j=D[P-1];function U(t){return Math.abs(t)<=e}function M(t,e,r){e=K(e);for(var n=t.isNegative(),o=e.isNegative(),a=n?t.not():t,s=o?e.not():e,u=0,c=0,f=null,p=null,l=[];!a.isZero()||!s.isZero();)u=(f=R(a,j))[1].toJSNumber(),n&&(u=j-1-u),c=(p=R(s,j))[1].toJSNumber(),o&&(c=j-1-c),a=f[0],s=p[0],l.push(r(u,c));for(var h=0!==r(n?1:0,o?1:0)?i(-1):i(0),y=l.length-1;y>=0;y-=1)h=h.multiply(j).add(i(l[y]));return h}c.prototype.shiftLeft=function(t){var e=K(t).toJSNumber();if(!U(e))throw new Error(String(e)+" is too large for shifting.");if(e<0)return this.shiftRight(-e);var r=this;if(r.isZero())return r;for(;e>=P;)r=r.multiply(j),e-=P-1;return r.multiply(D[e])},p.prototype.shiftLeft=f.prototype.shiftLeft=c.prototype.shiftLeft,c.prototype.shiftRight=function(t){var e,r=K(t).toJSNumber();if(!U(r))throw new Error(String(r)+" is too large for shifting.");if(r<0)return this.shiftLeft(-r);for(var n=this;r>=P;){if(n.isZero()||n.isNegative()&&n.isUnit())return n;n=(e=R(n,j))[1].isNegative()?e[0].prev():e[0],r-=P-1}return(e=R(n,D[r]))[1].isNegative()?e[0].prev():e[0]},p.prototype.shiftRight=f.prototype.shiftRight=c.prototype.shiftRight,c.prototype.not=function(){return this.negate().prev()},p.prototype.not=f.prototype.not=c.prototype.not,c.prototype.and=function(t){return M(this,t,(function(t,e){return t&e}))},p.prototype.and=f.prototype.and=c.prototype.and,c.prototype.or=function(t){return M(this,t,(function(t,e){return t|e}))},p.prototype.or=f.prototype.or=c.prototype.or,c.prototype.xor=function(t){return M(this,t,(function(t,e){return t^e}))},p.prototype.xor=f.prototype.xor=c.prototype.xor;var C=1<<30,B=(e&-e)*(e&-e)|C;function z(t){var r=t.value,n="number"==typeof r?r|C:"bigint"==typeof r?r|BigInt(C):r[0]+r[1]*e|B;return n&-n}function q(t,e){if(e.compareTo(t)<=0){var r=q(t,e.square(e)),n=r.p,o=r.e,a=n.multiply(e);return a.compareTo(t)<=0?{p:a,e:2*o+1}:{p:n,e:2*o}}return{p:i(1),e:0}}function W(t,e){return t=K(t),e=K(e),t.greater(e)?t:e}function V(t,e){return t=K(t),e=K(e),t.lesser(e)?t:e}function H(t,e){if(t=K(t).abs(),e=K(e).abs(),t.equals(e))return t;if(t.isZero())return e;if(e.isZero())return t;for(var r,n,i=u[1];t.isEven()&&e.isEven();)r=V(z(t),z(e)),t=t.divide(r),e=e.divide(r),i=i.multiply(r);for(;t.isEven();)t=t.divide(z(t));do{for(;e.isEven();)e=e.divide(z(e));t.greater(e)&&(n=e,e=t,t=n),e=e.subtract(t)}while(!e.isZero());return i.isUnit()?t:t.multiply(i)}c.prototype.bitLength=function(){var t=this;return t.compareTo(i(0))<0&&(t=t.negate().subtract(i(1))),0===t.compareTo(i(0))?i(0):i(q(t,i(2)).e).add(i(1))},p.prototype.bitLength=f.prototype.bitLength=c.prototype.bitLength;var Z=function(t,e,r,n){r=r||a,t=String(t),n||(t=t.toLowerCase(),r=r.toLowerCase());var i,o=t.length,s=Math.abs(e),u={};for(i=0;i<r.length;i++)u[r[i]]=i;for(i=0;i<o;i++)if("-"!==(p=t[i])&&p in u&&u[p]>=s){if("1"===p&&1===s)continue;throw new Error(p+" is not a valid digit in base "+e+".")}e=K(e);var c=[],f="-"===t[0];for(i=f?1:0;i<t.length;i++){var p;if((p=t[i])in u)c.push(K(u[p]));else{if("<"!==p)throw new Error(p+" is not a valid character");var l=i;do{i++}while(">"!==t[i]&&i<t.length);c.push(K(t.slice(l+1,i)))}}return Y(c,e,f)};function Y(t,e,r){var n,i=u[0],o=u[1];for(n=t.length-1;n>=0;n--)i=i.add(t[n].times(o)),o=o.times(e);return r?i.negate():i}function X(t,e){if((e=i(e)).isZero()){if(t.isZero())return{value:[0],isNegative:!1};throw new Error("Cannot convert nonzero numbers to base 0.")}if(e.equals(-1)){if(t.isZero())return{value:[0],isNegative:!1};if(t.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-t.toJSNumber())).map(Array.prototype.valueOf,[1,0])),isNegative:!1};var r=Array.apply(null,Array(t.toJSNumber()-1)).map(Array.prototype.valueOf,[0,1]);return r.unshift([1]),{value:[].concat.apply([],r),isNegative:!1}}var n=!1;if(t.isNegative()&&e.isPositive()&&(n=!0,t=t.abs()),e.isUnit())return t.isZero()?{value:[0],isNegative:!1}:{value:Array.apply(null,Array(t.toJSNumber())).map(Number.prototype.valueOf,1),isNegative:n};for(var o,a=[],s=t;s.isNegative()||s.compareAbs(e)>=0;){o=s.divmod(e),s=o.quotient;var u=o.remainder;u.isNegative()&&(u=e.minus(u).abs(),s=s.next()),a.push(u.toJSNumber())}return a.push(s.toJSNumber()),{value:a.reverse(),isNegative:n}}function J(t,e,r){var n=X(t,e);return(n.isNegative?"-":"")+n.value.map((function(t){return function(t,e){return t<(e=e||a).length?e[t]:"<"+t+">"}(t,r)})).join("")}function G(t){if(l(+t)){var e=+t;if(e===v(e))return s?new p(BigInt(e)):new f(e);throw new Error("Invalid integer: "+t)}var n="-"===t[0];n&&(t=t.slice(1));var i=t.split(/e/i);if(i.length>2)throw new Error("Invalid integer: "+i.join("e"));if(2===i.length){var o=i[1];if("+"===o[0]&&(o=o.slice(1)),(o=+o)!==v(o)||!l(o))throw new Error("Invalid integer: "+o+" is not a valid exponent.");var a=i[0],u=a.indexOf(".");if(u>=0&&(o-=a.length-u-1,a=a.slice(0,u)+a.slice(u+1)),o<0)throw new Error("Cannot include negative exponent part for integers");t=a+=new Array(o+1).join("0")}if(!/^([0-9][0-9]*)$/.test(t))throw new Error("Invalid integer: "+t);if(s)return new p(BigInt(n?"-"+t:t));for(var h=[],y=t.length,g=r,m=y-g;y>0;)h.push(+t.slice(m,y)),(m-=g)<0&&(m=0),y-=g;return d(h),new c(h,n)}function K(t){return"number"==typeof t?function(t){if(s)return new p(BigInt(t));if(l(t)){if(t!==v(t))throw new Error(t+" is not an integer.");return new f(t)}return G(t.toString())}(t):"string"==typeof t?G(t):"bigint"==typeof t?new p(t):t}c.prototype.toArray=function(t){return X(this,t)},f.prototype.toArray=function(t){return X(this,t)},p.prototype.toArray=function(t){return X(this,t)},c.prototype.toString=function(e,r){if(e===t&&(e=10),10!==e)return J(this,e,r);for(var n,i=this.value,o=i.length,a=String(i[--o]);--o>=0;)n=String(i[o]),a+="0000000".slice(n.length)+n;return(this.sign?"-":"")+a},f.prototype.toString=function(e,r){return e===t&&(e=10),10!=e?J(this,e,r):String(this.value)},p.prototype.toString=f.prototype.toString,p.prototype.toJSON=c.prototype.toJSON=f.prototype.toJSON=function(){return this.toString()},c.prototype.valueOf=function(){return parseInt(this.toString(),10)},c.prototype.toJSNumber=c.prototype.valueOf,f.prototype.valueOf=function(){return this.value},f.prototype.toJSNumber=f.prototype.valueOf,p.prototype.valueOf=p.prototype.toJSNumber=function(){return parseInt(this.toString(),10)};for(var $=0;$<1e3;$++)u[$]=K($),$>0&&(u[-$]=K(-$));return u.one=u[1],u.zero=u[0],u.minusOne=u[-1],u.max=W,u.min=V,u.gcd=H,u.lcm=function(t,e){return t=K(t).abs(),e=K(e).abs(),t.divide(H(t,e)).multiply(e)},u.isInstance=function(t){return t instanceof c||t instanceof f||t instanceof p},u.randBetween=function(t,r,n){t=K(t),r=K(r);var i=n||Math.random,o=V(t,r),a=W(t,r).subtract(o).add(1);if(a.isSmall)return o.add(Math.floor(i()*a));for(var s=X(a,e).value,c=[],f=!0,p=0;p<s.length;p++){var l=f?s[p]+(p+1<s.length?s[p+1]/e:0):e,h=v(i()*l);c.push(h),h<s[p]&&(f=!1)}return o.add(u.fromArray(c,e,!1))},u.fromArray=function(t,e,r){return Y(t.map(K),K(e||10),r)},u}();t.hasOwnProperty("exports")&&(t.exports=i),void 0===(n=function(){return i}.call(e,r,e,t))||(t.exports=n)},811:(t,e,r)=>{"use strict";var n=r(665);const i=r(837),o=r(46);e.maxObjectSize=1e8,e.maxObjectCount=32768;const a=e.UID=function(t){this.UID=t};e.parseFile=function(t,e){return new Promise((function(r,o){function a(t){let n,i=null;try{n=s(t),r(n)}catch(t){i=t,o(i)}finally{e&&e(i,n)}}if(n.isBuffer(t))return a(t);i.readFile(t,(function(t,r){if(t)return o(t),e(t);a(r)}))}))},e.parseFileSync=function(t){return n.isBuffer(t)||(t=i.readFileSync(t)),s(t)};const s=e.parseBuffer=function(t){if("bplist"!==t.slice(0,6).toString("utf8"))throw new Error("Invalid binary plist. Expected 'bplist' at offset 0.");const r=t.slice(t.length-32,t.length),i=r.readUInt8(6),s=r.readUInt8(7),f=c(r,8),p=c(r,16),l=c(r,24);if(f>e.maxObjectCount)throw new Error("maxObjectCount exceeded");const h=[];for(let e=0;e<f;e++){const r=t.slice(l+e*i,l+(e+1)*i);h[e]=u(r,0)}return[function r(i){const c=h[i],f=t[c],p=(240&f)>>4,l=15&f;switch(p){case 0:return function(){switch(l){case 0:case 15:return null;case 8:return!1;case 9:return!0;default:throw new Error("Unhandled simple type 0x"+p.toString(16))}}();case 1:return function(){const r=Math.pow(2,l);if(r<e.maxObjectSize){const e=t.slice(c+1,c+1+r);if(16===r){const t=function(t){let e,r="";for(e=0;e<t.length&&0==t[e];e++);for(;e<t.length;e++){const n="00"+t[e].toString(16);r+=n.substr(n.length-2)}return r}(e);return o(t,16)}return e.reduce(((t,e)=>(t<<=8)|255&e))}throw new Error("Too little heap space available! Wanted to read "+r+" bytes, but only "+e.maxObjectSize+" are available.")}();case 8:return function(){const r=l+1;if(r<e.maxObjectSize)return new a(u(t.slice(c+1,c+1+r)));throw new Error("Too little heap space available! Wanted to read "+r+" bytes, but only "+e.maxObjectSize+" are available.")}();case 2:return function(){const r=Math.pow(2,l);if(!(r<e.maxObjectSize))throw new Error("Too little heap space available! Wanted to read "+r+" bytes, but only "+e.maxObjectSize+" are available.");{const e=t.slice(c+1,c+1+r);if(4===r)return e.readFloatBE(0);if(8===r)return e.readDoubleBE(0)}}();case 3:return function(){3!=l&&console.error("Unknown date type :"+l+". Parsing anyway...");const e=t.slice(c+1,c+9);return new Date(9783072e5+1e3*e.readDoubleBE(0))}();case 4:return function(){let r=1,n=l;if(15==l){const e=t[c+1],i=(240&e)/16;1!=i&&console.error("0x4: UNEXPECTED LENGTH-INT TYPE! "+i);const o=15&e,a=Math.pow(2,o);r=2+a,n=u(t.slice(c+2,c+2+a))}if(n<e.maxObjectSize)return t.slice(c+r,c+r+n);throw new Error("Too little heap space available! Wanted to read "+n+" bytes, but only "+e.maxObjectSize+" are available.")}();case 5:return y();case 6:return y(!0);case 10:return function(){let n=l,i=1;if(15==l){const e=t[c+1],r=(240&e)/16;1!=r&&console.error("0xa: UNEXPECTED LENGTH-INT TYPE! "+r);const o=15&e,a=Math.pow(2,o);i=2+a,n=u(t.slice(c+2,c+2+a))}if(n*s>e.maxObjectSize)throw new Error("Too little heap space available!");const o=[];for(let e=0;e<n;e++){const n=u(t.slice(c+i+e*s,c+i+(e+1)*s));o[e]=r(n)}return o}();case 13:return function(){let n=l,i=1;if(15==l){const e=t[c+1],r=(240&e)/16;1!=r&&console.error("0xD: UNEXPECTED LENGTH-INT TYPE! "+r);const o=15&e,a=Math.pow(2,o);i=2+a,n=u(t.slice(c+2,c+2+a))}if(2*n*s>e.maxObjectSize)throw new Error("Too little heap space available!");const o={};for(let e=0;e<n;e++){const a=u(t.slice(c+i+e*s,c+i+(e+1)*s)),f=u(t.slice(c+i+n*s+e*s,c+i+n*s+(e+1)*s)),p=r(a),l=r(f);o[p]=l}return o}();default:throw new Error("Unhandled type 0x"+p.toString(16))}function y(r){r=r||0;let i="utf8",o=l,a=1;if(15==l){const e=t[c+1],r=(240&e)/16;1!=r&&console.error("UNEXPECTED LENGTH-INT TYPE! "+r);const n=15&e,i=Math.pow(2,n);a=2+i,o=u(t.slice(c+2,c+2+i))}if(o*=r+1,o<e.maxObjectSize){let e=n.from(t.slice(c+a,c+a+o));return r&&(e=function(t){const e=t.length;for(let r=0;r<e;r+=2){const e=t[r];t[r]=t[r+1],t[r+1]=e}return t}(e),i="ucs2"),e.toString(i)}throw new Error("Too little heap space available! Wanted to read "+o+" bytes, but only "+e.maxObjectSize+" are available.")}}(p)]};function u(t,e){let r=0;for(let n=e=e||0;n<t.length;n++)r<<=8,r|=255&t[n];return r}function c(t,e){return t.slice(e,e+8).readUInt32BE(4,8)}},709:function(t){var e;e=function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={exports:{},id:n,loaded:!1};return t[n].call(i.exports,i,i.exports,r),i.loaded=!0,i.exports}return r.m=t,r.c=e,r.p="",r(0)}([function(t,e,r){(function(t,n,i,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a,s=r(2),u=r(9);!function(t){t[t.EPERM=1]="EPERM",t[t.ENOENT=2]="ENOENT",t[t.EIO=5]="EIO",t[t.EBADF=9]="EBADF",t[t.EACCES=13]="EACCES",t[t.EBUSY=16]="EBUSY",t[t.EEXIST=17]="EEXIST",t[t.ENOTDIR=20]="ENOTDIR",t[t.EISDIR=21]="EISDIR",t[t.EINVAL=22]="EINVAL",t[t.EFBIG=27]="EFBIG",t[t.ENOSPC=28]="ENOSPC",t[t.EROFS=30]="EROFS",t[t.ENOTEMPTY=39]="ENOTEMPTY",t[t.ENOTSUP=95]="ENOTSUP"}(a||(a={}));var c={};c[a.EPERM]="Operation not permitted.",c[a.ENOENT]="No such file or directory.",c[a.EIO]="Input/output error.",c[a.EBADF]="Bad file descriptor.",c[a.EACCES]="Permission denied.",c[a.EBUSY]="Resource busy or locked.",c[a.EEXIST]="File exists.",c[a.ENOTDIR]="File is not a directory.",c[a.EISDIR]="File is a directory.",c[a.EINVAL]="Invalid argument.",c[a.EFBIG]="File is too big.",c[a.ENOSPC]="No space left on disk.",c[a.EROFS]="Cannot modify a read-only file system.",c[a.ENOTEMPTY]="Directory is not empty.",c[a.ENOTSUP]="Operation is not supported.";var f,p=function(e){function r(t,r,n){void 0===r&&(r=c[t]),e.call(this,r),this.syscall="",this.errno=t,this.code=a[t],this.path=n,this.stack=(new e).stack,this.message="Error: "+this.code+": "+r+(this.path?", '"+this.path+"'":"")}return e&&(r.__proto__=e),r.prototype=Object.create(e&&e.prototype),r.prototype.constructor=r,r.fromJSON=function(t){var e=new r(0);return e.errno=t.errno,e.code=t.code,e.path=t.path,e.stack=t.stack,e.message=t.message,e},r.fromBuffer=function(t,e){return void 0===e&&(e=0),r.fromJSON(JSON.parse(t.toString("utf8",e+4,e+4+t.readUInt32LE(e))))},r.FileError=function(t,e){return new r(t,c[t],e)},r.ENOENT=function(t){return this.FileError(a.ENOENT,t)},r.EEXIST=function(t){return this.FileError(a.EEXIST,t)},r.EISDIR=function(t){return this.FileError(a.EISDIR,t)},r.ENOTDIR=function(t){return this.FileError(a.ENOTDIR,t)},r.EPERM=function(t){return this.FileError(a.EPERM,t)},r.ENOTEMPTY=function(t){return this.FileError(a.ENOTEMPTY,t)},r.prototype.toString=function(){return this.message},r.prototype.toJSON=function(){return{errno:this.errno,code:this.code,path:this.path,stack:this.stack,message:this.message}},r.prototype.writeToBuffer=function(e,r){void 0===e&&(e=t.alloc(this.bufferSize())),void 0===r&&(r=0);var n=e.write(JSON.stringify(this.toJSON()),r+4);return e.writeUInt32LE(n,r),e},r.prototype.bufferSize=function(){return 4+t.byteLength(JSON.stringify(this.toJSON()))},r}(Error),l=Object.freeze({get ErrorCode(){return a},ErrorStrings:c,ApiError:p});!function(t){t[t.NOP=0]="NOP",t[t.THROW_EXCEPTION=1]="THROW_EXCEPTION",t[t.TRUNCATE_FILE=2]="TRUNCATE_FILE",t[t.CREATE_FILE=3]="CREATE_FILE"}(f||(f={}));var h,y=function t(e){if(this.flagStr=e,t.validFlagStrs.indexOf(e)<0)throw new p(a.EINVAL,"Invalid flag: "+e)};y.getFileFlag=function(t){return y.flagCache.hasOwnProperty(t)?y.flagCache[t]:y.flagCache[t]=new y(t)},y.prototype.getFlagString=function(){return this.flagStr},y.prototype.isReadable=function(){return-1!==this.flagStr.indexOf("r")||-1!==this.flagStr.indexOf("+")},y.prototype.isWriteable=function(){return-1!==this.flagStr.indexOf("w")||-1!==this.flagStr.indexOf("a")||-1!==this.flagStr.indexOf("+")},y.prototype.isTruncating=function(){return-1!==this.flagStr.indexOf("w")},y.prototype.isAppendable=function(){return-1!==this.flagStr.indexOf("a")},y.prototype.isSynchronous=function(){return-1!==this.flagStr.indexOf("s")},y.prototype.isExclusive=function(){return-1!==this.flagStr.indexOf("x")},y.prototype.pathExistsAction=function(){return this.isExclusive()?f.THROW_EXCEPTION:this.isTruncating()?f.TRUNCATE_FILE:f.NOP},y.prototype.pathNotExistsAction=function(){return(this.isWriteable()||this.isAppendable())&&"r+"!==this.flagStr?f.CREATE_FILE:f.THROW_EXCEPTION},y.flagCache={},y.validFlagStrs=["r","r+","rs","rs+","w","wx","w+","wx+","a","ax","a+","ax+"],function(t){t[t.FILE=32768]="FILE",t[t.DIRECTORY=16384]="DIRECTORY",t[t.SYMLINK=40960]="SYMLINK"}(h||(h={}));var d=function(t,e,r,n,i,o){if(void 0===n&&(n=new Date),void 0===i&&(i=new Date),void 0===o&&(o=new Date),this.size=e,this.atime=n,this.mtime=i,this.ctime=o,this.dev=0,this.ino=0,this.rdev=0,this.nlink=1,this.blksize=4096,this.uid=0,this.gid=0,this.birthtime=new Date(0),this.fileData=null,r)this.mode=r;else switch(t){case h.FILE:this.mode=420;break;case h.DIRECTORY:default:this.mode=511}this.blocks=Math.ceil(e/512),this.mode<4096&&(this.mode|=t)};d.fromBuffer=function(t){var e=t.readUInt32LE(0),r=t.readUInt32LE(4),n=t.readDoubleLE(8),i=t.readDoubleLE(16),o=t.readDoubleLE(24);return new d(61440&r,e,4095&r,new Date(n),new Date(i),new Date(o))},d.prototype.toBuffer=function(){var e=t.alloc(32);return e.writeUInt32LE(this.size,0),e.writeUInt32LE(this.mode,4),e.writeDoubleLE(this.atime.getTime(),8),e.writeDoubleLE(this.mtime.getTime(),16),e.writeDoubleLE(this.ctime.getTime(),24),e},d.prototype.clone=function(){return new d(61440&this.mode,this.size,4095&this.mode,this.atime,this.mtime,this.ctime)},d.prototype.isFile=function(){return(61440&this.mode)===h.FILE},d.prototype.isDirectory=function(){return(61440&this.mode)===h.DIRECTORY},d.prototype.isSymbolicLink=function(){return(61440&this.mode)===h.SYMLINK},d.prototype.chmod=function(t){this.mode=61440&this.mode|t},d.prototype.isSocket=function(){return!1},d.prototype.isBlockDevice=function(){return!1},d.prototype.isCharacterDevice=function(){return!1},d.prototype.isFIFO=function(){return!1};var g=function(t,e){return t};function v(t){if(t)return t;throw new p(a.EIO,"Initialize BrowserFS with a file system using BrowserFS.initialize(filesystem)")}function m(t,e){switch(typeof t){case"number":return t;case"string":var r=parseInt(t,8);return isNaN(r)?e:r;default:return e}}function w(t){if(t instanceof Date)return t;if("number"==typeof t)return new Date(1e3*t);throw new p(a.EINVAL,"Invalid time.")}function _(t){if(t.indexOf("\0")>=0)throw new p(a.EINVAL,"Path must be a string without null bytes.");if(""===t)throw new p(a.EINVAL,"Path must not be empty.");return u.resolve(t)}function b(t,e,r,n){switch(typeof t){case"object":return{encoding:void 0!==t.encoding?t.encoding:e,flag:void 0!==t.flag?t.flag:r,mode:m(t.mode,n)};case"string":return{encoding:t,flag:r,mode:n};default:return{encoding:e,flag:r,mode:n}}}function S(){}var E=function(){this.F_OK=0,this.R_OK=4,this.W_OK=2,this.X_OK=1,this.root=null,this.fdMap={},this.nextFd=100};E.prototype.initialize=function(t){if(!t.constructor.isAvailable())throw new p(a.EINVAL,"Tried to instantiate BrowserFS with an unavailable file system.");return this.root=t},E.prototype._toUnixTimestamp=function(t){if("number"==typeof t)return t;if(t instanceof Date)return t.getTime()/1e3;throw new Error("Cannot parse time: "+t)},E.prototype.getRootFS=function(){return this.root?this.root:null},E.prototype.rename=function(t,e,r){void 0===r&&(r=S);var n=g(r,1);try{v(this.root).rename(_(t),_(e),n)}catch(t){n(t)}},E.prototype.renameSync=function(t,e){v(this.root).renameSync(_(t),_(e))},E.prototype.exists=function(t,e){void 0===e&&(e=S);var r=g(e,1);try{return v(this.root).exists(_(t),r)}catch(t){return r(!1)}},E.prototype.existsSync=function(t){try{return v(this.root).existsSync(_(t))}catch(t){return!1}},E.prototype.stat=function(t,e){void 0===e&&(e=S);var r=g(e,2);try{return v(this.root).stat(_(t),!1,r)}catch(t){return r(t)}},E.prototype.statSync=function(t){return v(this.root).statSync(_(t),!1)},E.prototype.lstat=function(t,e){void 0===e&&(e=S);var r=g(e,2);try{return v(this.root).stat(_(t),!0,r)}catch(t){return r(t)}},E.prototype.lstatSync=function(t){return v(this.root).statSync(_(t),!0)},E.prototype.truncate=function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=S);var n=0;"function"==typeof e?r=e:"number"==typeof e&&(n=e);var i=g(r,1);try{if(n<0)throw new p(a.EINVAL);return v(this.root).truncate(_(t),n,i)}catch(t){return i(t)}},E.prototype.truncateSync=function(t,e){if(void 0===e&&(e=0),e<0)throw new p(a.EINVAL);return v(this.root).truncateSync(_(t),e)},E.prototype.unlink=function(t,e){void 0===e&&(e=S);var r=g(e,1);try{return v(this.root).unlink(_(t),r)}catch(t){return r(t)}},E.prototype.unlinkSync=function(t){return v(this.root).unlinkSync(_(t))},E.prototype.open=function(t,e,r,n){var i=this;void 0===n&&(n=S);var o=m(r,420),a=g(n="function"==typeof r?r:n,2);try{v(this.root).open(_(t),y.getFileFlag(e),o,(function(t,e){e?a(t,i.getFdForFile(e)):a(t)}))}catch(t){a(t)}},E.prototype.openSync=function(t,e,r){return void 0===r&&(r=420),this.getFdForFile(v(this.root).openSync(_(t),y.getFileFlag(e),m(r,420)))},E.prototype.readFile=function(t,e,r){void 0===e&&(e={}),void 0===r&&(r=S);var n=b(e,null,"r",null),i=g(r="function"==typeof e?e:r,2);try{var o=y.getFileFlag(n.flag);return o.isReadable()?v(this.root).readFile(_(t),n.encoding,o,i):i(new p(a.EINVAL,"Flag passed to readFile must allow for reading."))}catch(t){return i(t)}},E.prototype.readFileSync=function(t,e){void 0===e&&(e={});var r=b(e,null,"r",null),n=y.getFileFlag(r.flag);if(!n.isReadable())throw new p(a.EINVAL,"Flag passed to readFile must allow for reading.");return v(this.root).readFileSync(_(t),r.encoding,n)},E.prototype.writeFile=function(t,e,r,n){void 0===r&&(r={}),void 0===n&&(n=S);var i=b(r,"utf8","w",420),o=g(n="function"==typeof r?r:n,1);try{var s=y.getFileFlag(i.flag);return s.isWriteable()?v(this.root).writeFile(_(t),e,i.encoding,s,i.mode,o):o(new p(a.EINVAL,"Flag passed to writeFile must allow for writing."))}catch(t){return o(t)}},E.prototype.writeFileSync=function(t,e,r){var n=b(r,"utf8","w",420),i=y.getFileFlag(n.flag);if(!i.isWriteable())throw new p(a.EINVAL,"Flag passed to writeFile must allow for writing.");return v(this.root).writeFileSync(_(t),e,n.encoding,i,n.mode)},E.prototype.appendFile=function(t,e,r,n){void 0===n&&(n=S);var i=b(r,"utf8","a",420),o=g(n="function"==typeof r?r:n,1);try{var s=y.getFileFlag(i.flag);if(!s.isAppendable())return o(new p(a.EINVAL,"Flag passed to appendFile must allow for appending."));v(this.root).appendFile(_(t),e,i.encoding,s,i.mode,o)}catch(t){o(t)}},E.prototype.appendFileSync=function(t,e,r){var n=b(r,"utf8","a",420),i=y.getFileFlag(n.flag);if(!i.isAppendable())throw new p(a.EINVAL,"Flag passed to appendFile must allow for appending.");return v(this.root).appendFileSync(_(t),e,n.encoding,i,n.mode)},E.prototype.fstat=function(t,e){void 0===e&&(e=S);var r=g(e,2);try{this.fd2file(t).stat(r)}catch(t){r(t)}},E.prototype.fstatSync=function(t){return this.fd2file(t).statSync()},E.prototype.close=function(t,e){var r=this;void 0===e&&(e=S);var n=g(e,1);try{this.fd2file(t).close((function(e){e||r.closeFd(t),n(e)}))}catch(t){n(t)}},E.prototype.closeSync=function(t){this.fd2file(t).closeSync(),this.closeFd(t)},E.prototype.ftruncate=function(t,e,r){void 0===r&&(r=S);var n="number"==typeof e?e:0,i=g(r="function"==typeof e?e:r,1);try{var o=this.fd2file(t);if(n<0)throw new p(a.EINVAL);o.truncate(n,i)}catch(t){i(t)}},E.prototype.ftruncateSync=function(t,e){void 0===e&&(e=0);var r=this.fd2file(t);if(e<0)throw new p(a.EINVAL);r.truncateSync(e)},E.prototype.fsync=function(t,e){void 0===e&&(e=S);var r=g(e,1);try{this.fd2file(t).sync(r)}catch(t){r(t)}},E.prototype.fsyncSync=function(t){this.fd2file(t).syncSync()},E.prototype.fdatasync=function(t,e){void 0===e&&(e=S);var r=g(e,1);try{this.fd2file(t).datasync(r)}catch(t){r(t)}},E.prototype.fdatasyncSync=function(t){this.fd2file(t).datasyncSync()},E.prototype.write=function(e,r,n,i,o,s){void 0===s&&(s=S);var u,c,f,l=null;if("string"==typeof r){var h="utf8";switch(typeof n){case"function":s=n;break;case"number":l=n,h="string"==typeof i?i:"utf8",s="function"==typeof o?o:s;break;default:return(s="function"==typeof i?i:"function"==typeof o?o:s)(new p(a.EINVAL,"Invalid arguments."))}c=0,f=(u=t.from(r,h)).length}else u=r,c=n,f=i,l="number"==typeof o?o:null,s="function"==typeof o?o:s;var y=g(s,3);try{var d=this.fd2file(e);null==l&&(l=d.getPos()),d.write(u,c,f,l,y)}catch(t){y(t)}},E.prototype.writeSync=function(e,r,n,i,o){var a,s,u,c=0;if("string"==typeof r){u="number"==typeof n?n:null;var f="string"==typeof i?i:"utf8";c=0,s=(a=t.from(r,f)).length}else a=r,c=n,s=i,u="number"==typeof o?o:null;var p=this.fd2file(e);return null==u&&(u=p.getPos()),p.writeSync(a,c,s,u)},E.prototype.read=function(e,r,n,i,o,a){var s,u,c,f,p;if(void 0===a&&(a=S),"number"==typeof r){c=r,s=n;var l=i;a="function"==typeof o?o:a,u=0,f=t.alloc(c),p=g((function(t,e,r){if(t)return a(t);a(t,r.toString(l),e)}),3)}else f=r,u=n,c=i,s=o,p=g(a,3);try{var h=this.fd2file(e);null==s&&(s=h.getPos()),h.read(f,u,c,s,p)}catch(t){p(t)}},E.prototype.readSync=function(e,r,n,i,o){var a,s,u,c,f=!1,p="utf8";"number"==typeof r?(u=r,c=n,p=i,s=0,a=t.alloc(u),f=!0):(a=r,s=n,u=i,c=o);var l=this.fd2file(e);null==c&&(c=l.getPos());var h=l.readSync(a,s,u,c);return f?[a.toString(p),h]:h},E.prototype.fchown=function(t,e,r,n){void 0===n&&(n=S);var i=g(n,1);try{this.fd2file(t).chown(e,r,i)}catch(t){i(t)}},E.prototype.fchownSync=function(t,e,r){this.fd2file(t).chownSync(e,r)},E.prototype.fchmod=function(t,e,r){var n=g(r,1);try{var i="string"==typeof e?parseInt(e,8):e;this.fd2file(t).chmod(i,n)}catch(t){n(t)}},E.prototype.fchmodSync=function(t,e){var r="string"==typeof e?parseInt(e,8):e;this.fd2file(t).chmodSync(r)},E.prototype.futimes=function(t,e,r,n){void 0===n&&(n=S);var i=g(n,1);try{var o=this.fd2file(t);"number"==typeof e&&(e=new Date(1e3*e)),"number"==typeof r&&(r=new Date(1e3*r)),o.utimes(e,r,i)}catch(t){i(t)}},E.prototype.futimesSync=function(t,e,r){this.fd2file(t).utimesSync(w(e),w(r))},E.prototype.rmdir=function(t,e){void 0===e&&(e=S);var r=g(e,1);try{t=_(t),v(this.root).rmdir(t,r)}catch(t){r(t)}},E.prototype.rmdirSync=function(t){return t=_(t),v(this.root).rmdirSync(t)},E.prototype.mkdir=function(t,e,r){void 0===r&&(r=S),"function"==typeof e&&(r=e,e=511);var n=g(r,1);try{t=_(t),v(this.root).mkdir(t,e,n)}catch(t){n(t)}},E.prototype.mkdirSync=function(t,e){v(this.root).mkdirSync(_(t),m(e,511))},E.prototype.readdir=function(t,e){void 0===e&&(e=S);var r=g(e,2);try{t=_(t),v(this.root).readdir(t,r)}catch(t){r(t)}},E.prototype.readdirSync=function(t){return t=_(t),v(this.root).readdirSync(t)},E.prototype.link=function(t,e,r){void 0===r&&(r=S);var n=g(r,1);try{t=_(t),e=_(e),v(this.root).link(t,e,n)}catch(t){n(t)}},E.prototype.linkSync=function(t,e){return t=_(t),e=_(e),v(this.root).linkSync(t,e)},E.prototype.symlink=function(t,e,r,n){void 0===n&&(n=S);var i="string"==typeof r?r:"file",o=g(n="function"==typeof r?r:n,1);try{if("file"!==i&&"dir"!==i)return o(new p(a.EINVAL,"Invalid type: "+i));t=_(t),e=_(e),v(this.root).symlink(t,e,i,o)}catch(t){o(t)}},E.prototype.symlinkSync=function(t,e,r){if(r){if("file"!==r&&"dir"!==r)throw new p(a.EINVAL,"Invalid type: "+r)}else r="file";return t=_(t),e=_(e),v(this.root).symlinkSync(t,e,r)},E.prototype.readlink=function(t,e){void 0===e&&(e=S);var r=g(e,2);try{t=_(t),v(this.root).readlink(t,r)}catch(t){r(t)}},E.prototype.readlinkSync=function(t){return t=_(t),v(this.root).readlinkSync(t)},E.prototype.chown=function(t,e,r,n){void 0===n&&(n=S);var i=g(n,1);try{t=_(t),v(this.root).chown(t,!1,e,r,i)}catch(t){i(t)}},E.prototype.chownSync=function(t,e,r){t=_(t),v(this.root).chownSync(t,!1,e,r)},E.prototype.lchown=function(t,e,r,n){void 0===n&&(n=S);var i=g(n,1);try{t=_(t),v(this.root).chown(t,!0,e,r,i)}catch(t){i(t)}},E.prototype.lchownSync=function(t,e,r){t=_(t),v(this.root).chownSync(t,!0,e,r)},E.prototype.chmod=function(t,e,r){void 0===r&&(r=S);var n=g(r,1);try{var i=m(e,-1);if(i<0)throw new p(a.EINVAL,"Invalid mode.");v(this.root).chmod(_(t),!1,i,n)}catch(t){n(t)}},E.prototype.chmodSync=function(t,e){var r=m(e,-1);if(r<0)throw new p(a.EINVAL,"Invalid mode.");t=_(t),v(this.root).chmodSync(t,!1,r)},E.prototype.lchmod=function(t,e,r){void 0===r&&(r=S);var n=g(r,1);try{var i=m(e,-1);if(i<0)throw new p(a.EINVAL,"Invalid mode.");v(this.root).chmod(_(t),!0,i,n)}catch(t){n(t)}},E.prototype.lchmodSync=function(t,e){var r=m(e,-1);if(r<1)throw new p(a.EINVAL,"Invalid mode.");v(this.root).chmodSync(_(t),!0,r)},E.prototype.utimes=function(t,e,r,n){void 0===n&&(n=S);var i=g(n,1);try{v(this.root).utimes(_(t),w(e),w(r),i)}catch(t){i(t)}},E.prototype.utimesSync=function(t,e,r){v(this.root).utimesSync(_(t),w(e),w(r))},E.prototype.realpath=function(t,e,r){void 0===r&&(r=S);var n="object"==typeof e?e:{},i=g(r="function"==typeof e?e:S,2);try{t=_(t),v(this.root).realpath(t,n,i)}catch(t){i(t)}},E.prototype.realpathSync=function(t,e){return void 0===e&&(e={}),t=_(t),v(this.root).realpathSync(t,e)},E.prototype.watchFile=function(t,e,r){throw void 0===r&&(r=S),new p(a.ENOTSUP)},E.prototype.unwatchFile=function(t,e){throw void 0===e&&(e=S),new p(a.ENOTSUP)},E.prototype.watch=function(t,e,r){throw void 0===r&&(r=S),new p(a.ENOTSUP)},E.prototype.access=function(t,e,r){throw void 0===r&&(r=S),new p(a.ENOTSUP)},E.prototype.accessSync=function(t,e){throw new p(a.ENOTSUP)},E.prototype.createReadStream=function(t,e){throw new p(a.ENOTSUP)},E.prototype.createWriteStream=function(t,e){throw new p(a.ENOTSUP)},E.prototype.wrapCallbacks=function(t){g=t},E.prototype.getFdForFile=function(t){var e=this.nextFd++;return this.fdMap[e]=t,e},E.prototype.fd2file=function(t){var e=this.fdMap[t];if(e)return e;throw new p(a.EBADF,"Invalid file descriptor.")},E.prototype.closeFd=function(t){delete this.fdMap[t]},E.Stats=d;var O=new E,I={},k=E.prototype;function F(t,e,r,n,i){return t<e||r<e?t>r?r+1:t+1:n===i?e:e+1}function A(t,e){if(t===e)return 0;if(t.length>e.length){var r=t;t=e,e=r}for(var n=t.length,i=e.length;n>0&&t.charCodeAt(n-1)===e.charCodeAt(i-1);)n--,i--;for(var o=0;o<n&&t.charCodeAt(o)===e.charCodeAt(o);)o++;if(i-=o,0==(n-=o)||1===i)return i;for(var a,s,u,c,f,p=new Array(n<<1),l=0;l<n;)p[n+l]=t.charCodeAt(o+l),p[l]=++l;for(a=0;a+3<i;)for(var h=e.charCodeAt(o+(s=a)),y=e.charCodeAt(o+(u=a+1)),d=e.charCodeAt(o+(c=a+2)),g=e.charCodeAt(o+(f=a+3)),v=a+=4,m=0;m<n;){var w=p[n+m],_=p[m];s=F(_,s,u,h,w),u=F(s,u,c,y,w),c=F(u,c,f,d,w),v=F(c,f,v,g,w),p[m++]=v,f=c,c=u,u=s,s=_}for(var b=0;a<i;){var S=e.charCodeAt(o+(s=a));b=++a;for(var E=0;E<n;E++){var O=p[E];p[E]=b=O<s||b<s?O>b?b+1:O+1:S===p[n+E]?s:s+1,s=O}}return b}function N(t,e,r){t&&console.warn("["+e+"] Direct file system constructor usage is deprecated for this file system, and will be removed in the next major version. Please use the '"+e+".Create("+JSON.stringify(r)+", callback)' method instead. See https://github.com/jvilk/BrowserFS/issues/176 for more details.")}Object.keys(k).forEach((function(t){"function"==typeof O[t]?I[t]=function(){return O[t].apply(O,arguments)}:I[t]=O[t]})),I.changeFSModule=function(t){O=t},I.getFSModule=function(){return O},I.FS=E;var R="undefined"!=typeof navigator&&!(!/(msie) ([\w.]+)/.exec(navigator.userAgent.toLowerCase())&&-1===navigator.userAgent.indexOf("Trident")),T="undefined"==typeof window;function x(){throw new Error("BFS has reached an impossible code path; please file a bug.")}function L(t,e,r){r.existsSync(t)||(L(u.dirname(t),e,r),r.mkdirSync(t,e))}function D(t){var e=P(t),r=e.byteOffset,n=e.byteLength;return 0===r&&n===e.buffer.byteLength?e.buffer:e.buffer.slice(r,r+n)}function P(t){return t instanceof Uint8Array?t:new Uint8Array(t)}function j(e){return e instanceof t?e:e instanceof Uint8Array?U(e):t.from(e)}function U(e){return e instanceof t?e:0===e.byteOffset&&e.byteLength===e.buffer.byteLength?M(e.buffer):t.from(e.buffer,e.byteOffset,e.byteLength)}function M(e){return t.from(e)}function C(t,e,r){if(void 0===e&&(e=0),void 0===r&&(r=t.length),e<0||r<0||r>t.length||e>r)throw new TypeError("Invalid slice bounds on buffer of length "+t.length+": ["+e+", "+r+"]");if(0===t.length)return z();var n=P(t),i=t[0],o=(i+1)%255;return t[0]=o,n[0]===o?(n[0]=i,U(n.slice(e,r))):(t[0]=i,U(n.subarray(e,r)))}var B=null;function z(){return B||(B=t.alloc(0))}function q(e,r){t.isBuffer(e)?r():r(new p(a.EINVAL,"option must be a Buffer."))}function W(t,e,r){var n=t.Options,i=t.Name,o=0,s=!1,u=!1;function c(t){s||(t&&(s=!0,r(t)),0==--o&&u&&r())}var f=function(t){if(n.hasOwnProperty(t)){var u=n[t],f=e[t];if(null==f){if(!u.optional){var l=Object.keys(e).filter((function(t){return!(t in n)})).map((function(e){return{str:e,distance:A(t,e)}})).filter((function(t){return t.distance<5})).sort((function(t,e){return t.distance-e.distance}));return s?{}:(s=!0,{v:r(new p(a.EINVAL,"["+i+"] Required option '"+t+"' not provided."+(l.length>0?" You provided unrecognized option '"+l[0].str+"'; perhaps you meant to type '"+t+"'.":"")+"\nOption description: "+u.description))})}}else{if(!(Array.isArray(u.type)?-1!==u.type.indexOf(typeof f):typeof f===u.type))return s?{}:(s=!0,{v:r(new p(a.EINVAL,"["+i+"] Value provided for option "+t+" is not the proper type. Expected "+(Array.isArray(u.type)?"one of {"+u.type.join(", ")+"}":u.type)+", but received "+typeof f+"\nOption description: "+u.description))});u.validator&&(o++,u.validator(f,c))}}};for(var l in n){var h=f(l);if(h)return h.v}u=!0,0!==o||s||r()}var V=Object.freeze({deprecationMessage:N,isIE:R,isWebWorker:T,fail:x,mkdirpSync:L,buffer2ArrayBuffer:D,buffer2Uint8array:P,arrayish2Buffer:j,uint8Array2Buffer:U,arrayBuffer2Buffer:M,copyingSlice:C,emptyBuffer:z,bufferValidator:q,checkOptions:W}),H=function(t){this.fs=t,this.nodefs=t.getNodeFS(),this.FS=t.getFS(),this.PATH=t.getPATH(),this.ERRNO_CODES=t.getERRNO_CODES()};H.prototype.open=function(t){var e=this.fs.realPath(t.node),r=this.FS;try{r.isFile(t.node.mode)&&(t.nfd=this.nodefs.openSync(e,this.fs.flagsToPermissionString(t.flags)))}catch(t){if(!t.code)throw t;throw new r.ErrnoError(this.ERRNO_CODES[t.code])}},H.prototype.close=function(t){var e=this.FS;try{e.isFile(t.node.mode)&&t.nfd&&this.nodefs.closeSync(t.nfd)}catch(t){if(!t.code)throw t;throw new e.ErrnoError(this.ERRNO_CODES[t.code])}},H.prototype.read=function(t,e,r,n,i){try{return this.nodefs.readSync(t.nfd,U(e),r,n,i)}catch(t){throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}},H.prototype.write=function(t,e,r,n,i){try{return this.nodefs.writeSync(t.nfd,U(e),r,n,i)}catch(t){throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}},H.prototype.llseek=function(t,e,r){var n=e;if(1===r)n+=t.position;else if(2===r&&this.FS.isFile(t.node.mode))try{n+=this.nodefs.fstatSync(t.nfd).size}catch(t){throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}if(n<0)throw new this.FS.ErrnoError(this.ERRNO_CODES.EINVAL);return t.position=n,n};var Z=function(t){this.fs=t,this.nodefs=t.getNodeFS(),this.FS=t.getFS(),this.PATH=t.getPATH(),this.ERRNO_CODES=t.getERRNO_CODES()};Z.prototype.getattr=function(t){var e,r=this.fs.realPath(t);try{e=this.nodefs.lstatSync(r)}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}return{dev:e.dev,ino:e.ino,mode:e.mode,nlink:e.nlink,uid:e.uid,gid:e.gid,rdev:e.rdev,size:e.size,atime:e.atime,mtime:e.mtime,ctime:e.ctime,blksize:e.blksize,blocks:e.blocks}},Z.prototype.setattr=function(t,e){var r=this.fs.realPath(t);try{if(void 0!==e.mode&&(this.nodefs.chmodSync(r,e.mode),t.mode=e.mode),void 0!==e.timestamp){var n=new Date(e.timestamp);this.nodefs.utimesSync(r,n,n)}}catch(t){if(!t.code)throw t;if("ENOTSUP"!==t.code)throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}if(void 0!==e.size)try{this.nodefs.truncateSync(r,e.size)}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}},Z.prototype.lookup=function(t,e){var r=this.PATH.join2(this.fs.realPath(t),e),n=this.fs.getMode(r);return this.fs.createNode(t,e,n)},Z.prototype.mknod=function(t,e,r,n){var i=this.fs.createNode(t,e,r,n),o=this.fs.realPath(i);try{this.FS.isDir(i.mode)?this.nodefs.mkdirSync(o,i.mode):this.nodefs.writeFileSync(o,"",{mode:i.mode})}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}return i},Z.prototype.rename=function(t,e,r){var n=this.fs.realPath(t),i=this.PATH.join2(this.fs.realPath(e),r);try{this.nodefs.renameSync(n,i),t.name=r,t.parent=e}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}},Z.prototype.unlink=function(t,e){var r=this.PATH.join2(this.fs.realPath(t),e);try{this.nodefs.unlinkSync(r)}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}},Z.prototype.rmdir=function(t,e){var r=this.PATH.join2(this.fs.realPath(t),e);try{this.nodefs.rmdirSync(r)}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}},Z.prototype.readdir=function(t){var e=this.fs.realPath(t);try{var r=this.nodefs.readdirSync(e);return r.push(".",".."),r}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}},Z.prototype.symlink=function(t,e,r){var n=this.PATH.join2(this.fs.realPath(t),e);try{this.nodefs.symlinkSync(r,n)}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}},Z.prototype.readlink=function(t){var e=this.fs.realPath(t);try{return this.nodefs.readlinkSync(e)}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}};var Y=function(t,e,r,n){void 0===t&&(t=self.FS),void 0===e&&(e=self.PATH),void 0===r&&(r=self.ERRNO_CODES),void 0===n&&(n=I),this.flagsToPermissionStringMap={0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},this.nodefs=n,this.FS=t,this.PATH=e,this.ERRNO_CODES=r,this.node_ops=new Z(this),this.stream_ops=new H(this)};Y.prototype.mount=function(t){return this.createNode(null,"/",this.getMode(t.opts.root),0)},Y.prototype.createNode=function(t,e,r,n){var i=this.FS;if(!i.isDir(r)&&!i.isFile(r)&&!i.isLink(r))throw new i.ErrnoError(this.ERRNO_CODES.EINVAL);var o=i.createNode(t,e,r);return o.node_ops=this.node_ops,o.stream_ops=this.stream_ops,o},Y.prototype.getMode=function(t){var e;try{e=this.nodefs.lstatSync(t)}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}return e.mode},Y.prototype.realPath=function(t){for(var e=[];t.parent!==t;)e.push(t.name),t=t.parent;return e.push(t.mount.opts.root),e.reverse(),this.PATH.join.apply(null,e)},Y.prototype.flagsToPermissionString=function(t){var e="string"==typeof t?parseInt(t,10):t;return(e&=8191)in this.flagsToPermissionStringMap?this.flagsToPermissionStringMap[e]:t},Y.prototype.getNodeFS=function(){return this.nodefs},Y.prototype.getFS=function(){return this.FS},Y.prototype.getPATH=function(){return this.PATH},Y.prototype.getERRNO_CODES=function(){return this.ERRNO_CODES};var X=function(){};X.prototype.supportsLinks=function(){return!1},X.prototype.diskSpace=function(t,e){e(0,0)},X.prototype.openFile=function(t,e,r){throw new p(a.ENOTSUP)},X.prototype.createFile=function(t,e,r,n){throw new p(a.ENOTSUP)},X.prototype.open=function(t,e,r,n){var i=this;this.stat(t,!1,(function(o,s){if(o)switch(e.pathNotExistsAction()){case f.CREATE_FILE:return i.stat(u.dirname(t),!1,(function(o,a){o?n(o):a&&!a.isDirectory()?n(p.ENOTDIR(u.dirname(t))):i.createFile(t,e,r,n)}));case f.THROW_EXCEPTION:return n(p.ENOENT(t));default:return n(new p(a.EINVAL,"Invalid FileFlag object."))}else{if(s&&s.isDirectory())return n(p.EISDIR(t));switch(e.pathExistsAction()){case f.THROW_EXCEPTION:return n(p.EEXIST(t));case f.TRUNCATE_FILE:return i.openFile(t,e,(function(t,e){t?n(t):e?e.truncate(0,(function(){e.sync((function(){n(null,e)}))})):x()}));case f.NOP:return i.openFile(t,e,n);default:return n(new p(a.EINVAL,"Invalid FileFlag object."))}}}))},X.prototype.rename=function(t,e,r){r(new p(a.ENOTSUP))},X.prototype.renameSync=function(t,e){throw new p(a.ENOTSUP)},X.prototype.stat=function(t,e,r){r(new p(a.ENOTSUP))},X.prototype.statSync=function(t,e){throw new p(a.ENOTSUP)},X.prototype.openFileSync=function(t,e,r){throw new p(a.ENOTSUP)},X.prototype.createFileSync=function(t,e,r){throw new p(a.ENOTSUP)},X.prototype.openSync=function(t,e,r){var n;try{n=this.statSync(t,!1)}catch(n){switch(e.pathNotExistsAction()){case f.CREATE_FILE:if(!this.statSync(u.dirname(t),!1).isDirectory())throw p.ENOTDIR(u.dirname(t));return this.createFileSync(t,e,r);case f.THROW_EXCEPTION:throw p.ENOENT(t);default:throw new p(a.EINVAL,"Invalid FileFlag object.")}}if(n.isDirectory())throw p.EISDIR(t);switch(e.pathExistsAction()){case f.THROW_EXCEPTION:throw p.EEXIST(t);case f.TRUNCATE_FILE:return this.unlinkSync(t),this.createFileSync(t,e,n.mode);case f.NOP:return this.openFileSync(t,e,r);default:throw new p(a.EINVAL,"Invalid FileFlag object.")}},X.prototype.unlink=function(t,e){e(new p(a.ENOTSUP))},X.prototype.unlinkSync=function(t){throw new p(a.ENOTSUP)},X.prototype.rmdir=function(t,e){e(new p(a.ENOTSUP))},X.prototype.rmdirSync=function(t){throw new p(a.ENOTSUP)},X.prototype.mkdir=function(t,e,r){r(new p(a.ENOTSUP))},X.prototype.mkdirSync=function(t,e){throw new p(a.ENOTSUP)},X.prototype.readdir=function(t,e){e(new p(a.ENOTSUP))},X.prototype.readdirSync=function(t){throw new p(a.ENOTSUP)},X.prototype.exists=function(t,e){this.stat(t,null,(function(t){e(!t)}))},X.prototype.existsSync=function(t){try{return this.statSync(t,!0),!0}catch(t){return!1}},X.prototype.realpath=function(t,e,r){if(this.supportsLinks())for(var n=t.split(u.sep),i=0;i<n.length;i++){var o=n.slice(0,i+1);n[i]=u.join.apply(null,o)}else this.exists(t,(function(e){e?r(null,t):r(p.ENOENT(t))}))},X.prototype.realpathSync=function(t,e){if(this.supportsLinks()){for(var r=t.split(u.sep),n=0;n<r.length;n++){var i=r.slice(0,n+1);r[n]=u.join.apply(u,i)}return r.join(u.sep)}if(this.existsSync(t))return t;throw p.ENOENT(t)},X.prototype.truncate=function(t,e,r){this.open(t,y.getFileFlag("r+"),420,(function(t,n){if(t)return r(t);n.truncate(e,(function(t){n.close((function(e){r(t||e)}))}))}))},X.prototype.truncateSync=function(t,e){var r=this.openSync(t,y.getFileFlag("r+"),420);try{r.truncateSync(e)}catch(t){throw t}finally{r.closeSync()}},X.prototype.readFile=function(e,r,n,i){var o=i;this.open(e,n,420,(function(e,n){if(e)return i(e);i=function(t,e){n.close((function(r){return t||(t=r),o(t,e)}))},n.stat((function(e,o){if(e)return i(e);var a=t.alloc(o.size);n.read(a,0,o.size,0,(function(t){if(t)return i(t);if(null===r)return i(t,a);try{i(null,a.toString(r))}catch(t){i(t)}}))}))}))},X.prototype.readFileSync=function(e,r,n){var i=this.openSync(e,n,420);try{var o=i.statSync(),a=t.alloc(o.size);return i.readSync(a,0,o.size,0),i.closeSync(),null===r?a:a.toString(r)}finally{i.closeSync()}},X.prototype.writeFile=function(e,r,n,i,o,a){var s=a;this.open(e,i,420,(function(e,i){if(e)return a(e);a=function(t){i.close((function(e){s(t||e)}))};try{"string"==typeof r&&(r=t.from(r,n))}catch(t){return a(t)}i.write(r,0,r.length,0,a)}))},X.prototype.writeFileSync=function(e,r,n,i,o){var a=this.openSync(e,i,o);try{"string"==typeof r&&(r=t.from(r,n)),a.writeSync(r,0,r.length,0)}finally{a.closeSync()}},X.prototype.appendFile=function(e,r,n,i,o,a){var s=a;this.open(e,i,o,(function(e,i){if(e)return a(e);a=function(t){i.close((function(e){s(t||e)}))},"string"==typeof r&&(r=t.from(r,n)),i.write(r,0,r.length,null,a)}))},X.prototype.appendFileSync=function(e,r,n,i,o){var a=this.openSync(e,i,o);try{"string"==typeof r&&(r=t.from(r,n)),a.writeSync(r,0,r.length,null)}finally{a.closeSync()}},X.prototype.chmod=function(t,e,r,n){n(new p(a.ENOTSUP))},X.prototype.chmodSync=function(t,e,r){throw new p(a.ENOTSUP)},X.prototype.chown=function(t,e,r,n,i){i(new p(a.ENOTSUP))},X.prototype.chownSync=function(t,e,r,n){throw new p(a.ENOTSUP)},X.prototype.utimes=function(t,e,r,n){n(new p(a.ENOTSUP))},X.prototype.utimesSync=function(t,e,r){throw new p(a.ENOTSUP)},X.prototype.link=function(t,e,r){r(new p(a.ENOTSUP))},X.prototype.linkSync=function(t,e){throw new p(a.ENOTSUP)},X.prototype.symlink=function(t,e,r,n){n(new p(a.ENOTSUP))},X.prototype.symlinkSync=function(t,e,r){throw new p(a.ENOTSUP)},X.prototype.readlink=function(t,e){e(new p(a.ENOTSUP))},X.prototype.readlinkSync=function(t){throw new p(a.ENOTSUP)};var J=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.supportsSynch=function(){return!0},e.prototype.rename=function(t,e,r){try{this.renameSync(t,e),r()}catch(t){r(t)}},e.prototype.stat=function(t,e,r){try{r(null,this.statSync(t,e))}catch(t){r(t)}},e.prototype.open=function(t,e,r,n){try{n(null,this.openSync(t,e,r))}catch(t){n(t)}},e.prototype.unlink=function(t,e){try{this.unlinkSync(t),e()}catch(t){e(t)}},e.prototype.rmdir=function(t,e){try{this.rmdirSync(t),e()}catch(t){e(t)}},e.prototype.mkdir=function(t,e,r){try{this.mkdirSync(t,e),r()}catch(t){r(t)}},e.prototype.readdir=function(t,e){try{e(null,this.readdirSync(t))}catch(t){e(t)}},e.prototype.chmod=function(t,e,r,n){try{this.chmodSync(t,e,r),n()}catch(t){n(t)}},e.prototype.chown=function(t,e,r,n,i){try{this.chownSync(t,e,r,n),i()}catch(t){i(t)}},e.prototype.utimes=function(t,e,r,n){try{this.utimesSync(t,e,r),n()}catch(t){n(t)}},e.prototype.link=function(t,e,r){try{this.linkSync(t,e),r()}catch(t){r(t)}},e.prototype.symlink=function(t,e,r,n){try{this.symlinkSync(t,e,r),n()}catch(t){n(t)}},e.prototype.readlink=function(t,e){try{e(null,this.readlinkSync(t))}catch(t){e(t)}},e}(X),G=function(){};G.prototype.sync=function(t){t(new p(a.ENOTSUP))},G.prototype.syncSync=function(){throw new p(a.ENOTSUP)},G.prototype.datasync=function(t){this.sync(t)},G.prototype.datasyncSync=function(){return this.syncSync()},G.prototype.chown=function(t,e,r){r(new p(a.ENOTSUP))},G.prototype.chownSync=function(t,e){throw new p(a.ENOTSUP)},G.prototype.chmod=function(t,e){e(new p(a.ENOTSUP))},G.prototype.chmodSync=function(t){throw new p(a.ENOTSUP)},G.prototype.utimes=function(t,e,r){r(new p(a.ENOTSUP))},G.prototype.utimesSync=function(t,e){throw new p(a.ENOTSUP)};var K=function(e){function r(t,r,n,i,o){if(e.call(this),this._pos=0,this._dirty=!1,this._fs=t,this._path=r,this._flag=n,this._stat=i,this._buffer=o||z(),this._stat.size!==this._buffer.length&&this._flag.isReadable())throw new Error("Invalid buffer: Buffer is "+this._buffer.length+" long, yet Stats object specifies that file is "+this._stat.size+" long.")}return e&&(r.__proto__=e),r.prototype=Object.create(e&&e.prototype),r.prototype.constructor=r,r.prototype.getBuffer=function(){return this._buffer},r.prototype.getStats=function(){return this._stat},r.prototype.getFlag=function(){return this._flag},r.prototype.getPath=function(){return this._path},r.prototype.getPos=function(){return this._flag.isAppendable()?this._stat.size:this._pos},r.prototype.advancePos=function(t){return this._pos+=t},r.prototype.setPos=function(t){return this._pos=t},r.prototype.sync=function(t){try{this.syncSync(),t()}catch(e){t(e)}},r.prototype.syncSync=function(){throw new p(a.ENOTSUP)},r.prototype.close=function(t){try{this.closeSync(),t()}catch(e){t(e)}},r.prototype.closeSync=function(){throw new p(a.ENOTSUP)},r.prototype.stat=function(t){try{t(null,this._stat.clone())}catch(e){t(e)}},r.prototype.statSync=function(){return this._stat.clone()},r.prototype.truncate=function(t,e){try{this.truncateSync(t),this._flag.isSynchronous()&&!I.getRootFS().supportsSynch()&&this.sync(e),e()}catch(t){return e(t)}},r.prototype.truncateSync=function(e){if(this._dirty=!0,!this._flag.isWriteable())throw new p(a.EPERM,"File not opened with a writeable mode.");if(this._stat.mtime=new Date,e>this._buffer.length){var r=t.alloc(e-this._buffer.length,0);return this.writeSync(r,0,r.length,this._buffer.length),void(this._flag.isSynchronous()&&I.getRootFS().supportsSynch()&&this.syncSync())}this._stat.size=e;var n=t.alloc(e);this._buffer.copy(n,0,0,e),this._buffer=n,this._flag.isSynchronous()&&I.getRootFS().supportsSynch()&&this.syncSync()},r.prototype.write=function(t,e,r,n,i){try{i(null,this.writeSync(t,e,r,n),t)}catch(t){i(t)}},r.prototype.writeSync=function(e,r,n,i){if(this._dirty=!0,null==i&&(i=this.getPos()),!this._flag.isWriteable())throw new p(a.EPERM,"File not opened with a writeable mode.");var o=i+n;if(o>this._stat.size&&(this._stat.size=o,o>this._buffer.length)){var s=t.alloc(o);this._buffer.copy(s),this._buffer=s}var u=e.copy(this._buffer,i,r,r+n);return this._stat.mtime=new Date,this._flag.isSynchronous()?(this.syncSync(),u):(this.setPos(i+u),u)},r.prototype.read=function(t,e,r,n,i){try{i(null,this.readSync(t,e,r,n),t)}catch(t){i(t)}},r.prototype.readSync=function(t,e,r,n){if(!this._flag.isReadable())throw new p(a.EPERM,"File not opened with a readable mode.");null==n&&(n=this.getPos()),n+r>this._stat.size&&(r=this._stat.size-n);var i=this._buffer.copy(t,e,n,n+r);return this._stat.atime=new Date,this._pos=n+r,i},r.prototype.chmod=function(t,e){try{this.chmodSync(t),e()}catch(t){e(t)}},r.prototype.chmodSync=function(t){if(!this._fs.supportsProps())throw new p(a.ENOTSUP);this._dirty=!0,this._stat.chmod(t),this.syncSync()},r.prototype.isDirty=function(){return this._dirty},r.prototype.resetDirty=function(){this._dirty=!1},r}(G),$=function(t){function e(e,r,n,i,o){t.call(this,e,r,n,i,o)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.sync=function(t){t()},e.prototype.syncSync=function(){},e.prototype.close=function(t){t()},e.prototype.closeSync=function(){},e}(K),Q=function(t){function e(e,r,n,i,o){t.call(this,e,r,n,i,o)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.syncSync=function(){this.isDirty()&&(this._fs._syncSync(this),this.resetDirty())},e.prototype.closeSync=function(){this.syncSync()},e}(K),tt=function(t){function e(r,n,i){if(void 0===i&&(i=!0),t.call(this),this._queue=[],this._queueRunning=!1,this._isInitialized=!1,this._initializeCallbacks=[],this._sync=r,this._async=n,!r.supportsSynch())throw new Error("The first argument to AsyncMirror needs to be a synchronous file system.");N(i,e.Name,{sync:"sync file system instance",async:"async file system instance"})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){try{var n=new e(t.sync,t.async,!1);n.initialize((function(t){t?r(t):r(null,n)}),!1)}catch(t){r(t)}},e.isAvailable=function(){return!0},e.prototype.getName=function(){return e.Name},e.prototype._syncSync=function(t){this._sync.writeFileSync(t.getPath(),t.getBuffer(),null,y.getFileFlag("w"),t.getStats().mode),this.enqueueOp({apiMethod:"writeFile",arguments:[t.getPath(),t.getBuffer(),null,t.getFlag(),t.getStats().mode]})},e.prototype.initialize=function(t,e){var r=this;void 0===e&&(e=!0),e&&console.warn("[AsyncMirror] AsyncMirror.initialize() is deprecated and will be removed in the next major version. Please use 'AsyncMirror.Create({ sync: (sync file system instance), async: (async file system instance)}, cb)' to create and initialize AsyncMirror instances.");var n=this._initializeCallbacks;if(this._isInitialized)t();else if(1===n.push(t)){var i=function(t,e,n){"/"!==t&&r._sync.mkdirSync(t,e),r._async.readdir(t,(function(e,r){var i=0;e?n(e):function e(a){a?n(a):i<r.length?(o(u.join(t,r[i]),e),i++):n()}()}))},o=function(t,e){r._async.stat(t,!1,(function(n,o){n?e(n):o.isDirectory()?i(t,o.mode,e):function(t,e,n){r._async.readFile(t,null,y.getFileFlag("r"),(function(i,o){if(i)n(i);else try{r._sync.writeFileSync(t,o,null,y.getFileFlag("w"),e)}catch(t){i=t}finally{n(i)}}))}(t,o.mode,e)}))};i("/",0,(function(t){r._isInitialized=!t,r._initializeCallbacks=[],n.forEach((function(e){return e(t)}))}))}},e.prototype.isReadOnly=function(){return!1},e.prototype.supportsSynch=function(){return!0},e.prototype.supportsLinks=function(){return!1},e.prototype.supportsProps=function(){return this._sync.supportsProps()&&this._async.supportsProps()},e.prototype.renameSync=function(t,e){this.checkInitialized(),this._sync.renameSync(t,e),this.enqueueOp({apiMethod:"rename",arguments:[t,e]})},e.prototype.statSync=function(t,e){return this.checkInitialized(),this._sync.statSync(t,e)},e.prototype.openSync=function(t,e,r){return this.checkInitialized(),this._sync.openSync(t,e,r).closeSync(),new Q(this,t,e,this._sync.statSync(t,!1),this._sync.readFileSync(t,null,y.getFileFlag("r")))},e.prototype.unlinkSync=function(t){this.checkInitialized(),this._sync.unlinkSync(t),this.enqueueOp({apiMethod:"unlink",arguments:[t]})},e.prototype.rmdirSync=function(t){this.checkInitialized(),this._sync.rmdirSync(t),this.enqueueOp({apiMethod:"rmdir",arguments:[t]})},e.prototype.mkdirSync=function(t,e){this.checkInitialized(),this._sync.mkdirSync(t,e),this.enqueueOp({apiMethod:"mkdir",arguments:[t,e]})},e.prototype.readdirSync=function(t){return this.checkInitialized(),this._sync.readdirSync(t)},e.prototype.existsSync=function(t){return this.checkInitialized(),this._sync.existsSync(t)},e.prototype.chmodSync=function(t,e,r){this.checkInitialized(),this._sync.chmodSync(t,e,r),this.enqueueOp({apiMethod:"chmod",arguments:[t,e,r]})},e.prototype.chownSync=function(t,e,r,n){this.checkInitialized(),this._sync.chownSync(t,e,r,n),this.enqueueOp({apiMethod:"chown",arguments:[t,e,r,n]})},e.prototype.utimesSync=function(t,e,r){this.checkInitialized(),this._sync.utimesSync(t,e,r),this.enqueueOp({apiMethod:"utimes",arguments:[t,e,r]})},e.prototype.checkInitialized=function(){if(!this._isInitialized)throw new p(a.EPERM,"AsyncMirrorFS is not initialized. Please initialize AsyncMirrorFS using its initialize() method before using it.")},e.prototype.enqueueOp=function(t){var e=this;if(this._queue.push(t),!this._queueRunning){this._queueRunning=!0;var r=function(t){if(t&&console.error("WARNING: File system has desynchronized. Received following error: "+t+"\n$"),e._queue.length>0){var n=e._queue.shift(),i=n.arguments;i.push(r),e._async[n.apiMethod].apply(e._async,i)}else e._queueRunning=!1};r()}},e}(J);tt.Name="AsyncMirror",tt.Options={sync:{type:"object",description:"The synchronous file system to mirror the asynchronous file system to."},async:{type:"object",description:"The asynchronous file system to mirror."}};var et=Math.max;function rt(t){return t}function nt(t,e){return function(t,e,r){return e=et(void 0===e?t.length-1:e,0),function(){for(var n=arguments,i=-1,o=et(n.length-e,0),a=Array(o);++i<o;)a[i]=n[e+i];i=-1;for(var s=Array(e+1);++i<e;)s[i]=n[i];return s[e]=r(a),function(t,e,r){switch(r.length){case 0:return t.call(e);case 1:return t.call(e,r[0]);case 2:return t.call(e,r[0],r[1]);case 3:return t.call(e,r[0],r[1],r[2])}return t.apply(e,r)}(t,this,s)}}(t,e,rt)}var it=function(t){return nt((function(e){var r=e.pop();t.call(this,e,r)}))};function ot(t){return nt((function(e,r){var n=it((function(r,n){var i=this;return t(e,(function(t,e){t.apply(i,r.concat(e))}),n)}));return r.length?n.apply(this,r):n}))}var at="object"==typeof n&&n&&n.Object===Object&&n,st="object"==typeof self&&self&&self.Object===Object&&self,ut=at||st||Function("return this")(),ct=ut.Symbol,ft=Object.prototype,pt=ft.hasOwnProperty,lt=ft.toString,ht=ct?ct.toStringTag:void 0,yt=Object.prototype.toString,dt="[object Null]",gt="[object Undefined]",vt=ct?ct.toStringTag:void 0;function mt(t){return null==t?void 0===t?gt:dt:vt&&vt in Object(t)?function(t){var e=pt.call(t,ht),r=t[ht];try{t[ht]=void 0;var n=!0}catch(t){}var i=lt.call(t);return n&&(e?t[ht]=r:delete t[ht]),i}(t):function(t){return yt.call(t)}(t)}var wt="[object AsyncFunction]",_t="[object Function]",bt="[object GeneratorFunction]",St="[object Proxy]",Et=9007199254740991;function Ot(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=Et}function It(t){return null!=t&&Ot(t.length)&&!function(t){if(!function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}(t))return!1;var e=mt(t);return e==_t||e==bt||e==wt||e==St}(t)}var kt={};function Ft(){}function At(t){return function(){if(null!==t){var e=t;t=null,e.apply(this,arguments)}}}var Nt="function"==typeof Symbol&&Symbol.iterator,Rt=function(t){return Nt&&t[Nt]&&t[Nt]()};function Tt(t){return null!=t&&"object"==typeof t}function xt(t){return Tt(t)&&"[object Arguments]"==mt(t)}var Lt=Object.prototype,Dt=Lt.hasOwnProperty,Pt=Lt.propertyIsEnumerable,jt=xt(function(){return arguments}())?xt:function(t){return Tt(t)&&Dt.call(t,"callee")&&!Pt.call(t,"callee")},Ut=Array.isArray,Mt="object"==typeof e&&e&&!e.nodeType&&e,Ct=Mt&&"object"==typeof i&&i&&!i.nodeType&&i,Bt=Ct&&Ct.exports===Mt?ut.Buffer:void 0,zt=(Bt?Bt.isBuffer:void 0)||function(){return!1},qt=9007199254740991,Wt=/^(?:0|[1-9]\d*)$/;function Vt(t,e){return!!(e=null==e?qt:e)&&("number"==typeof t||Wt.test(t))&&t>-1&&t%1==0&&t<e}var Ht={};Ht["[object Float32Array]"]=Ht["[object Float64Array]"]=Ht["[object Int8Array]"]=Ht["[object Int16Array]"]=Ht["[object Int32Array]"]=Ht["[object Uint8Array]"]=Ht["[object Uint8ClampedArray]"]=Ht["[object Uint16Array]"]=Ht["[object Uint32Array]"]=!0,Ht["[object Arguments]"]=Ht["[object Array]"]=Ht["[object ArrayBuffer]"]=Ht["[object Boolean]"]=Ht["[object DataView]"]=Ht["[object Date]"]=Ht["[object Error]"]=Ht["[object Function]"]=Ht["[object Map]"]=Ht["[object Number]"]=Ht["[object Object]"]=Ht["[object RegExp]"]=Ht["[object Set]"]=Ht["[object String]"]=Ht["[object WeakMap]"]=!1;var Zt,Yt="object"==typeof e&&e&&!e.nodeType&&e,Xt=Yt&&"object"==typeof i&&i&&!i.nodeType&&i,Jt=Xt&&Xt.exports===Yt&&at.process,Gt=function(){try{return Jt&&Jt.binding&&Jt.binding("util")}catch(t){}}(),Kt=Gt&&Gt.isTypedArray,$t=Kt?(Zt=Kt,function(t){return Zt(t)}):function(t){return Tt(t)&&Ot(t.length)&&!!Ht[mt(t)]},Qt=Object.prototype.hasOwnProperty;var te=Object.prototype,ee=function(t,e){return function(r){return t(e(r))}}(Object.keys,Object),re=Object.prototype.hasOwnProperty;function ne(t){return It(t)?function(t,e){var r=Ut(t),n=!r&&jt(t),i=!r&&!n&&zt(t),o=!r&&!n&&!i&&$t(t),a=r||n||i||o,s=a?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],u=s.length;for(var c in t)!e&&!Qt.call(t,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Vt(c,u))||s.push(c);return s}(t):function(t){if(r=(e=t)&&e.constructor,e!==("function"==typeof r&&r.prototype||te))return ee(t);var e,r,n=[];for(var i in Object(t))re.call(t,i)&&"constructor"!=i&&n.push(i);return n}(t)}function ie(t){return function(){if(null===t)throw new Error("Callback was already called.");var e=t;t=null,e.apply(this,arguments)}}function oe(t){return function(e,r,n){if(n=At(n||Ft),t<=0||!e)return n(null);var i=function(t){if(It(t))return function(t){var e=-1,r=t.length;return function(){return++e<r?{value:t[e],key:e}:null}}(t);var e=Rt(t);return e?function(t){var e=-1;return function(){var r=t.next();return r.done?null:(e++,{value:r.value,key:e})}}(e):function(t){var e=ne(t),r=-1,n=e.length;return function(){var i=e[++r];return r<n?{value:t[i],key:i}:null}}(t)}(e),o=!1,a=0;function s(t,e){if(a-=1,t)o=!0,n(t);else{if(e===kt||o&&a<=0)return o=!0,n(null);u()}}function u(){for(;a<t&&!o;){var e=i();if(null===e)return o=!0,void(a<=0&&n(null));a+=1,r(e.value,e.key,ie(s))}}u()}}function ae(t,e,r,n){oe(e)(t,r,n)}function se(t,e){return function(r,n,i){return t(r,e,n,i)}}function ue(t,e,r){r=At(r||Ft);var n=0,i=0,o=t.length;function a(t,e){t?r(t):++i!==o&&e!==kt||r(null)}for(0===o&&r(null);n<o;n++)e(t[n],n,ie(a))}var ce,fe=se(ae,1/0),pe=function(t,e,r){(It(t)?ue:fe)(t,e,r)};function le(t,e,r,n){n=n||Ft;var i=[],o=0;t(e=e||[],(function(t,e,n){var a=o++;r(t,(function(t,e){i[a]=e,n(t)}))}),(function(t){n(t,i)}))}ot((ce=le,function(t,e,r){return ce(pe,t,e,r)}));var he=function(t){return function(e,r,n,i){return t(oe(r),e,n,i)}}(le);ot(se(he,1)),nt((function(t,e){return nt((function(r){return t.apply(null,e.concat(r))}))}));var ye="\\ud800-\\udfff",de="["+ye+"]",ge="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",ve="[^"+ye+"]",me="(?:\\ud83c[\\udde6-\\uddff]){2}",we="[\\ud800-\\udbff][\\udc00-\\udfff]",_e=([ve,me,we].join("|"),[ve+ge+"?",ge,me,we,de].join("|"),"function"==typeof setImmediate&&setImmediate),be="object"==typeof o&&"function"==typeof o.nextTick;function Se(t){setTimeout(t,0)}function Ee(t){return nt((function(e,r){t((function(){e.apply(null,r)}))}))}Ee(_e?setImmediate:be?o.nextTick:Se);var Oe,Ie=se(ae,1),ke=nt((function(t){return nt((function(e){var r,n,i,o,a=this,s=e[e.length-1];"function"==typeof s?e.pop():s=Ft,r=t,n=e,i=function(t,e,r){e.apply(a,t.concat(nt((function(t,e){r(t,e)}))))},o=At((o=function(t,e){s.apply(a,[t].concat(e))})||Ft),Ie(r,(function(t,e,r){i(n,t,(function(t,e){n=e,r(t)}))}),(function(t){o(t,n)}))}))}));function Fe(t){return nt((function(e,r){e.apply(null,r.concat(nt((function(e,r){"object"==typeof console&&(e?console.error&&console.error(e):console[t]&&function(e,r){for(var n=-1,i=null==e?0:e.length;++n<i&&!1!==(o=e[n],void console[t](o)););var o}(r))}))))}))}function Ae(t,e,r){pe(t,function(t){return function(e,r,n){return t(e,n)}}(e),r)}nt((function(t){return ke.apply(null,t.reverse())})),nt((function(t){var e=[null].concat(t);return it((function(t,r){return r.apply(this,e)}))})),Fe("dir"),Fe("log"),Ee(be?o.nextTick:_e?setImmediate:Se),Math.ceil,Math.max;var Ne=function(t){this._cache={},this._client=t};Ne.prototype.readdir=function(t,e){var r=this,n=this.getCachedDirInfo(t);this._wrap((function(e){null!==n&&n.contents?r._client.readdir(t,{contentHash:n.stat.contentHash},e):r._client.readdir(t,e)}),(function(i,o,a,s){i?i.status===Dropbox.ApiError.NO_CONTENT&&null!==n?e(null,n.contents.slice(0)):e(i):(r.updateCachedDirInfo(t,a,o.slice(0)),s.forEach((function(e){r.updateCachedInfo(u.join(t,e.name),e)})),e(null,o))}))},Ne.prototype.remove=function(t,e){var r=this;this._wrap((function(e){r._client.remove(t,e)}),(function(n,i){n||r.updateCachedInfo(t,i),e(n)}))},Ne.prototype.move=function(t,e,r){var n=this;this._wrap((function(r){n._client.move(t,e,r)}),(function(i,o){i||(n.deleteCachedInfo(t),n.updateCachedInfo(e,o)),r(i)}))},Ne.prototype.stat=function(t,e){var r=this;this._wrap((function(e){r._client.stat(t,e)}),(function(n,i){n||r.updateCachedInfo(t,i),e(n,i)}))},Ne.prototype.readFile=function(t,e){var r=this,n=this.getCachedFileInfo(t);null!==n&&null!==n.contents?this.stat(t,(function(i,o){i?e(i):o.contentHash===n.stat.contentHash?e(i,n.contents.slice(0),n.stat):r.readFile(t,e)})):this._wrap((function(e){r._client.readFile(t,{arrayBuffer:!0},e)}),(function(n,i,o){n||r.updateCachedInfo(t,o,i.slice(0)),e(n,i,o)}))},Ne.prototype.writeFile=function(t,e,r){var n=this;this._wrap((function(r){n._client.writeFile(t,e,r)}),(function(i,o){i||n.updateCachedInfo(t,o,e.slice(0)),r(i,o)}))},Ne.prototype.mkdir=function(t,e){var r=this;this._wrap((function(e){r._client.mkdir(t,e)}),(function(n,i){n||r.updateCachedInfo(t,i,[]),e(n)}))},Ne.prototype._wrap=function(t,e){var r=0,n=function(i){if(i&&3>++r)switch(i.status){case Dropbox.ApiError.SERVER_ERROR:case Dropbox.ApiError.NETWORK_ERROR:case Dropbox.ApiError.RATE_LIMITED:setTimeout((function(){t(n)}),2e3);break;default:e.apply(null,arguments)}else e.apply(null,arguments)};t(n)},Ne.prototype.getCachedInfo=function(t){return this._cache[t.toLowerCase()]},Ne.prototype.putCachedInfo=function(t,e){this._cache[t.toLowerCase()]=e},Ne.prototype.deleteCachedInfo=function(t){delete this._cache[t.toLowerCase()]},Ne.prototype.getCachedDirInfo=function(t){var e,r=this.getCachedInfo(t);return(e=r)&&e.stat.isFolder?r:null},Ne.prototype.getCachedFileInfo=function(t){var e,r=this.getCachedInfo(t);return(e=r)&&e.stat.isFile?r:null},Ne.prototype.updateCachedDirInfo=function(t,e,r){void 0===r&&(r=null);var n=this.getCachedInfo(t);null===e.contentHash||void 0!==n&&n.stat.contentHash===e.contentHash||this.putCachedInfo(t,{stat:e,contents:r})},Ne.prototype.updateCachedFileInfo=function(t,e,r){void 0===r&&(r=null);var n=this.getCachedInfo(t);null===e.versionTag||void 0!==n&&n.stat.versionTag===e.versionTag||this.putCachedInfo(t,{stat:e,contents:r})},Ne.prototype.updateCachedInfo=function(t,e,r){var n;void 0===r&&(r=null),e.isFile&&(null==(n=r)||"object"==typeof n&&"number"==typeof n.byteLength)?this.updateCachedFileInfo(t,e,r):e.isFolder&&Array.isArray(r)&&this.updateCachedDirInfo(t,e,r)};var Re=function(t){function e(e,r,n,i,o){t.call(this,e,r,n,i,o)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.sync=function(t){var e=this;if(this.isDirty()){var r=D(this.getBuffer());this._fs._writeFileStrict(this.getPath(),r,(function(r){r||e.resetDirty(),t(r)}))}else t()},e.prototype.close=function(t){this.sync(t)},e}(K),Te=function(t){function e(r,n){void 0===n&&(n=!0),t.call(this),this._client=new Ne(r),N(n,e.Name,{client:"authenticated dropbox client instance"}),Oe||((Oe={})[Dropbox.ApiError.NETWORK_ERROR]=a.EIO,Oe[Dropbox.ApiError.INVALID_PARAM]=a.EINVAL,Oe[Dropbox.ApiError.INVALID_TOKEN]=a.EPERM,Oe[Dropbox.ApiError.OAUTH_ERROR]=a.EPERM,Oe[Dropbox.ApiError.NOT_FOUND]=a.ENOENT,Oe[Dropbox.ApiError.INVALID_METHOD]=a.EINVAL,Oe[Dropbox.ApiError.NOT_ACCEPTABLE]=a.EINVAL,Oe[Dropbox.ApiError.CONFLICT]=a.EINVAL,Oe[Dropbox.ApiError.RATE_LIMITED]=a.EBUSY,Oe[Dropbox.ApiError.SERVER_ERROR]=a.EBUSY,Oe[Dropbox.ApiError.OVER_QUOTA]=a.ENOSPC)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){r(null,new e(t.client,!1))},e.isAvailable=function(){return"undefined"!=typeof Dropbox},e.prototype.getName=function(){return e.Name},e.prototype.isReadOnly=function(){return!1},e.prototype.supportsSymlinks=function(){return!1},e.prototype.supportsProps=function(){return!1},e.prototype.supportsSynch=function(){return!1},e.prototype.empty=function(t){var e=this;this._client.readdir("/",(function(r,n){r?t(e.convert(r,"/")):Ae(n,(function(t,r){var n=u.join("/",t);e._client.remove(n,(function(t){r(t?e.convert(t,n):null)}))}),(function(e){e?t(e):t()}))}))},e.prototype.rename=function(t,e,r){var n=this;this._client.move(t,e,(function(i){i?n._client.stat(e,(function(o,a){if(o||a.isFolder){var s=i.response.error.indexOf(t)>-1?t:e;r(n.convert(i,s))}else n._client.remove(e,(function(i){i?r(n.convert(i,e)):n.rename(t,e,r)}))})):r()}))},e.prototype.stat=function(t,e,r){var n=this;this._client.stat(t,(function(e,i){if(e)r(n.convert(e,t));else{if(!i||!i.isRemoved){var o=new d(n._statType(i),i.size);return r(null,o)}r(p.FileError(a.ENOENT,t))}}))},e.prototype.open=function(t,e,r,n){var i=this;this._client.readFile(t,(function(r,o,a){if(!r){var s;s=null===o?z():M(o);var u=i._makeFile(t,e,a,s);return n(null,u)}if(!e.isReadable()){if(r.status===Dropbox.ApiError.NOT_FOUND){var c=new ArrayBuffer(0);return i._writeFileStrict(t,c,(function(r,o){if(r)n(r);else{var a=i._makeFile(t,e,o,M(c));n(null,a)}}))}return n(i.convert(r,t))}n(i.convert(r,t))}))},e.prototype._writeFileStrict=function(t,e,r){var n=this,i=u.dirname(t);this.stat(i,!1,(function(o,s){o?r(p.FileError(a.ENOENT,i)):n._client.writeFile(t,e,(function(e,i){e?r(n.convert(e,t)):r(null,i)}))}))},e.prototype._statType=function(t){return t.isFile?h.FILE:h.DIRECTORY},e.prototype._makeFile=function(t,e,r,n){var i=this._statType(r),o=new d(i,r.size);return new Re(this,t,e,o,n)},e.prototype._remove=function(t,e,r){var n=this;this._client.stat(t,(function(i,o){i?e(n.convert(i,t)):o.isFile&&!r?e(p.FileError(a.ENOTDIR,t)):!o.isFile&&r?e(p.FileError(a.EISDIR,t)):n._client.remove(t,(function(r){e(r?n.convert(r,t):null)}))}))},e.prototype.unlink=function(t,e){this._remove(t,e,!0)},e.prototype.rmdir=function(t,e){this._remove(t,e,!1)},e.prototype.mkdir=function(t,e,r){var n=this,i=u.dirname(t);this._client.stat(i,(function(e,o){e?r(n.convert(e,i)):n._client.mkdir(t,(function(e){r(e?p.FileError(a.EEXIST,t):null)}))}))},e.prototype.readdir=function(t,e){var r=this;this._client.readdir(t,(function(t,n){return t?e(r.convert(t)):e(null,n)}))},e.prototype.convert=function(t,e){void 0===e&&(e=null);var r=Oe[t.status];return void 0===r&&(r=a.EIO),e?p.FileError(r,e):new p(r)},e}(X);function xe(t,e){void 0===e&&(e="");for(var r=t.errno,n=t.node,i=[];n&&(i.unshift(n.name),n!==n.parent);)n=n.parent;return new p(r,c[r],i.length>0?"/"+i.join("/"):e)}Te.Name="Dropbox",Te.Options={client:{type:"object",description:"An *authenticated* Dropbox client. Must be from the 0.10 JS SDK.",validator:function(t,e){t.isAuthenticated&&t.isAuthenticated()?e():e(new p(a.EINVAL,"'client' option must be an authenticated Dropbox client from the v0.10 JS SDK."))}}};var Le=function(t){function e(e,r,n,i){t.call(this),this._fs=e,this._FS=r,this._path=n,this._stream=i}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getPos=function(){},e.prototype.close=function(t){var e=null;try{this.closeSync()}catch(t){e=t}finally{t(e)}},e.prototype.closeSync=function(){try{this._FS.close(this._stream)}catch(t){throw xe(t,this._path)}},e.prototype.stat=function(t){try{t(null,this.statSync())}catch(e){t(e)}},e.prototype.statSync=function(){try{return this._fs.statSync(this._path,!1)}catch(t){throw xe(t,this._path)}},e.prototype.truncate=function(t,e){var r=null;try{this.truncateSync(t)}catch(t){r=t}finally{e(r)}},e.prototype.truncateSync=function(t){try{this._FS.ftruncate(this._stream.fd,t)}catch(t){throw xe(t,this._path)}},e.prototype.write=function(t,e,r,n,i){try{i(null,this.writeSync(t,e,r,n),t)}catch(t){i(t)}},e.prototype.writeSync=function(t,e,r,n){try{var i=P(t),o=null===n?void 0:n;return this._FS.write(this._stream,i,e,r,o)}catch(t){throw xe(t,this._path)}},e.prototype.read=function(t,e,r,n,i){try{i(null,this.readSync(t,e,r,n),t)}catch(t){i(t)}},e.prototype.readSync=function(t,e,r,n){try{var i=P(t),o=null===n?void 0:n;return this._FS.read(this._stream,i,e,r,o)}catch(t){throw xe(t,this._path)}},e.prototype.sync=function(t){t()},e.prototype.syncSync=function(){},e.prototype.chown=function(t,e,r){var n=null;try{this.chownSync(t,e)}catch(t){n=t}finally{r(n)}},e.prototype.chownSync=function(t,e){try{this._FS.fchown(this._stream.fd,t,e)}catch(t){throw xe(t,this._path)}},e.prototype.chmod=function(t,e){var r=null;try{this.chmodSync(t)}catch(t){r=t}finally{e(r)}},e.prototype.chmodSync=function(t){try{this._FS.fchmod(this._stream.fd,t)}catch(t){throw xe(t,this._path)}},e.prototype.utimes=function(t,e,r){var n=null;try{this.utimesSync(t,e)}catch(t){n=t}finally{r(n)}},e.prototype.utimesSync=function(t,e){this._fs.utimesSync(this._path,t,e)},e}(G),De=function(e){function r(t){e.call(this),this._FS=t}return e&&(r.__proto__=e),r.prototype=Object.create(e&&e.prototype),r.prototype.constructor=r,r.Create=function(t,e){e(null,new r(t.FS))},r.isAvailable=function(){return!0},r.prototype.getName=function(){return this._FS.DB_NAME()},r.prototype.isReadOnly=function(){return!1},r.prototype.supportsLinks=function(){return!0},r.prototype.supportsProps=function(){return!0},r.prototype.supportsSynch=function(){return!0},r.prototype.renameSync=function(t,e){try{this._FS.rename(t,e)}catch(r){throw r.errno===a.ENOENT?xe(r,this.existsSync(t)?e:t):xe(r)}},r.prototype.statSync=function(t,e){try{var r=e?this._FS.lstat(t):this._FS.stat(t),n=this.modeToFileType(r.mode);return new d(n,r.size,r.mode,r.atime,r.mtime,r.ctime)}catch(e){throw xe(e,t)}},r.prototype.openSync=function(t,e,r){try{var n=this._FS.open(t,e.getFlagString(),r);if(this._FS.isDir(n.node.mode))throw this._FS.close(n),p.EISDIR(t);return new Le(this,this._FS,t,n)}catch(e){throw xe(e,t)}},r.prototype.unlinkSync=function(t){try{this._FS.unlink(t)}catch(e){throw xe(e,t)}},r.prototype.rmdirSync=function(t){try{this._FS.rmdir(t)}catch(e){throw xe(e,t)}},r.prototype.mkdirSync=function(t,e){try{this._FS.mkdir(t,e)}catch(e){throw xe(e,t)}},r.prototype.readdirSync=function(t){try{return this._FS.readdir(t).filter((function(t){return"."!==t&&".."!==t}))}catch(e){throw xe(e,t)}},r.prototype.truncateSync=function(t,e){try{this._FS.truncate(t,e)}catch(e){throw xe(e,t)}},r.prototype.readFileSync=function(t,e,r){try{var n=U(this._FS.readFile(t,{flags:r.getFlagString()}));return e?n.toString(e):n}catch(e){throw xe(e,t)}},r.prototype.writeFileSync=function(e,r,n,i,o){try{n&&(r=t.from(r,n));var a=P(r);this._FS.writeFile(e,a,{flags:i.getFlagString(),encoding:"binary"}),this._FS.chmod(e,o)}catch(t){throw xe(t,e)}},r.prototype.chmodSync=function(t,e,r){try{e?this._FS.lchmod(t,r):this._FS.chmod(t,r)}catch(e){throw xe(e,t)}},r.prototype.chownSync=function(t,e,r,n){try{e?this._FS.lchown(t,r,n):this._FS.chown(t,r,n)}catch(e){throw xe(e,t)}},r.prototype.symlinkSync=function(t,e,r){try{this._FS.symlink(t,e)}catch(t){throw xe(t)}},r.prototype.readlinkSync=function(t){try{return this._FS.readlink(t)}catch(e){throw xe(e,t)}},r.prototype.utimesSync=function(t,e,r){try{this._FS.utime(t,e.getTime(),r.getTime())}catch(e){throw xe(e,t)}},r.prototype.modeToFileType=function(t){if(this._FS.isDir(t))return h.DIRECTORY;if(this._FS.isFile(t))return h.FILE;if(this._FS.isLink(t))return h.SYMLINK;throw p.EPERM("Invalid mode: "+t)},r}(J);De.Name="EmscriptenFileSystem",De.Options={FS:{type:"object",description:"The Emscripten file system to use (the `FS` variable)"}};var Pe=function(t){function e(e,r){t.call(this),this._folder=e,this._wrapped=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){r(null,new e(t.folder,t.wrapped))},e.isAvailable=function(){return!0},e.prototype.initialize=function(t){var e=this;this._wrapped.exists(this._folder,(function(r){r?t():e._wrapped.isReadOnly()?t(p.ENOENT(e._folder)):e._wrapped.mkdir(e._folder,511,t)}))},e.prototype.getName=function(){return this._wrapped.getName()},e.prototype.isReadOnly=function(){return this._wrapped.isReadOnly()},e.prototype.supportsProps=function(){return this._wrapped.supportsProps()},e.prototype.supportsSynch=function(){return this._wrapped.supportsSynch()},e.prototype.supportsLinks=function(){return!1},e}(X);function je(t,e){if(null!==e&&"object"==typeof e){var r=e,n=r.path;n&&(n="/"+u.relative(t,n),r.message=r.message.replace(r.path,n),r.path=n)}return e}function Ue(t,e,r){return"Sync"!==t.slice(t.length-4)?function(){var n,i;return arguments.length>0&&(e&&(arguments[0]=u.join(this._folder,arguments[0])),r&&(arguments[1]=u.join(this._folder,arguments[1])),arguments[arguments.length-1]=(n=this._folder,"function"==typeof(i=arguments[arguments.length-1])?function(t){arguments.length>0&&(arguments[0]=je(n,t)),i.apply(null,arguments)}:i)),this._wrapped[t].apply(this._wrapped,arguments)}:function(){try{return e&&(arguments[0]=u.join(this._folder,arguments[0])),r&&(arguments[1]=u.join(this._folder,arguments[1])),this._wrapped[t].apply(this._wrapped,arguments)}catch(t){throw je(this._folder,t)}}}Pe.Name="FolderAdapter",Pe.Options={folder:{type:"string",description:"The folder to use as the root directory"},wrapped:{type:"object",description:"The file system to wrap"}},["diskSpace","stat","statSync","open","openSync","unlink","unlinkSync","rmdir","rmdirSync","mkdir","mkdirSync","readdir","readdirSync","exists","existsSync","realpath","realpathSync","truncate","truncateSync","readFile","readFileSync","writeFile","writeFileSync","appendFile","appendFileSync","chmod","chmodSync","chown","chownSync","utimes","utimesSync","readlink","readlinkSync"].forEach((function(t){Pe.prototype[t]=Ue(t,!0,!1)})),["rename","renameSync","link","linkSync","symlink","symlinkSync"].forEach((function(t){Pe.prototype[t]=Ue(t,!0,!0)}));var Me="undefined"!=typeof window?window:"undefined"!=typeof self?self:n,Ce=Me.webkitRequestFileSystem||Me.requestFileSystem||null;function Be(t,e,r){switch(t.name){case"PathExistsError":return p.EEXIST(e);case"QuotaExceededError":return p.FileError(a.ENOSPC,e);case"NotFoundError":return p.ENOENT(e);case"SecurityError":return p.FileError(a.EACCES,e);case"InvalidModificationError":return p.FileError(a.EPERM,e);case"TypeMismatchError":return p.FileError(r?a.ENOTDIR:a.EISDIR,e);default:return p.FileError(a.EINVAL,e)}}var ze=function(t){function e(e,r,n,i,o,a){t.call(this,e,n,i,o,a),this._entry=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.sync=function(t){var e=this;if(!this.isDirty())return t();this._entry.createWriter((function(r){var n=e.getBuffer(),i=new Blob([D(n)]),o=i.size;r.onwriteend=function(n){r.onwriteend=null,r.onerror=null,r.truncate(o),e.resetDirty(),t()},r.onerror=function(r){t(Be(r,e.getPath(),!1))},r.write(i)}))},e.prototype.close=function(t){this.sync(t)},e}(K),qe=function(t){function e(r,n,i){void 0===r&&(r=5),void 0===n&&(n=Me.PERSISTENT),void 0===i&&(i=!0),t.call(this),this.size=1048576*r,this.type=n,N(i,e.Name,{size:r,type:n})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){var n=new e(t.size,t.type,!1);n.allocate((function(t){return t?r(t):r(null,n)}),!1)},e.isAvailable=function(){return!!Ce},e.prototype.getName=function(){return e.Name},e.prototype.isReadOnly=function(){return!1},e.prototype.supportsSymlinks=function(){return!1},e.prototype.supportsProps=function(){return!1},e.prototype.supportsSynch=function(){return!1},e.prototype.allocate=function(t,e){var r=this;void 0===t&&(t=function(){}),void 0===e&&(e=!0),e&&console.warn("[HTML5FS] HTML5FS.allocate() is deprecated and will be removed in the next major release. Please use 'HTML5FS.Create({type: "+this.type+", size: "+this.size+"}, cb)' to create and allocate HTML5FS instances.");var n=function(e){r.fs=e,t()},i=function(e){t(Be(e,"/",!0))};this.type===Me.PERSISTENT?function(t,e,r,n){if(void 0!==navigator.webkitPersistentStorage)switch(t){case Me.PERSISTENT:navigator.webkitPersistentStorage.requestQuota(e,r,n);break;case Me.TEMPORARY:navigator.webkitTemporaryStorage.requestQuota(e,r,n);break;default:n(new TypeError("Invalid storage type: "+t))}else Me.webkitStorageInfo.requestQuota(t,e,r,n)}(this.type,this.size,(function(t){Ce(r.type,t,n,i)}),i):Ce(this.type,this.size,n,i)},e.prototype.empty=function(t){this._readdir("/",(function(e,r){e?(console.error("Failed to empty FS"),t(e)):Ae(r,(function(t,e){var r=function(){e()},n=function(r){e(Be(r,t.fullPath,!t.isDirectory))};!function(t){return t.isDirectory}(t)?t.remove(r,n):t.removeRecursively(r,n)}),(function(r){e?(console.error("Failed to empty FS"),t(e)):t()}))}))},e.prototype.rename=function(t,e,r){var n=this,i=2,o=0,s=this.fs.root,c=t,f=function(t){--i<=0&&r(Be(t,c,!1))},l=function(i){return 2==++o?r(new p(a.EINVAL,"Something was identified as both a file and a directory. This should never happen.")):t===e?r():(c=u.dirname(e),void s.getDirectory(c,{},(function(o){c=u.basename(e),i.moveTo(o,c,(function(t){r()}),(function(o){i.isDirectory?(c=e,n.unlink(e,(function(i){i?f(o):n.rename(t,e,r)}))):f(o)}))}),f))};s.getFile(t,{},l,f),s.getDirectory(t,{},l,f)},e.prototype.stat=function(t,e,r){var n=this,i={create:!1},o=function(t){var e=new d(h.DIRECTORY,4096);r(null,e)},a=function(e){r(Be(e,t,!1))};this.fs.root.getFile(t,i,(function(t){t.file((function(t){var e=new d(h.FILE,t.size);r(null,e)}),a)}),(function(){n.fs.root.getDirectory(t,i,o,a)}))},e.prototype.open=function(t,e,r,n){var i=this,o=function(r){"InvalidModificationError"===r.name&&e.isExclusive()?n(p.EEXIST(t)):n(Be(r,t,!1))};this.fs.root.getFile(t,{create:e.pathNotExistsAction()===f.CREATE_FILE,exclusive:e.isExclusive()},(function(r){r.file((function(a){var s=new FileReader;s.onloadend=function(o){var u=i._makeFile(t,r,e,a,s.result);n(null,u)},s.onerror=function(t){o(s.error)},s.readAsArrayBuffer(a)}),o)}),o)},e.prototype.unlink=function(t,e){this._remove(t,e,!0)},e.prototype.rmdir=function(t,e){var r=this;this.readdir(t,(function(n,i){n?e(n):i.length>0?e(p.ENOTEMPTY(t)):r._remove(t,e,!1)}))},e.prototype.mkdir=function(t,e,r){this.fs.root.getDirectory(t,{create:!0,exclusive:!0},(function(t){r()}),(function(e){r(Be(e,t,!0))}))},e.prototype.readdir=function(t,e){this._readdir(t,(function(t,r){if(!r)return e(t);for(var n=[],i=0,o=r;i<o.length;i+=1){var a=o[i];n.push(a.name)}e(null,n)}))},e.prototype._makeFile=function(t,e,r,n,i){void 0===i&&(i=new ArrayBuffer(0));var o=new d(h.FILE,n.size),a=M(i);return new ze(this,e,t,r,o,a)},e.prototype._readdir=function(t,e){var r=function(r){e(Be(r,t,!0))};this.fs.root.getDirectory(t,{create:!1},(function(t){var n=t.createReader(),i=[],o=function(){n.readEntries((function(t){t.length?(i=i.concat(function(t){return Array.prototype.slice.call(t||[],0)}(t)),o()):e(null,i)}),r)};o()}),r)},e.prototype._remove=function(t,e,r){var n=function(n){n.remove((function(){e()}),(function(n){e(Be(n,t,!r))}))},i=function(n){e(Be(n,t,!r))},o={create:!1};r?this.fs.root.getFile(t,o,n,i):this.fs.root.getDirectory(t,o,n,i)},e}(X);qe.Name="HTML5FS",qe.Options={size:{type:"number",optional:!0,description:"Storage quota to request, in megabytes. Allocated value may be less. Defaults to 5."},type:{type:"number",optional:!0,description:"window.PERSISTENT or window.TEMPORARY. Defaults to PERSISTENT."}};var We=function(t,e,r,n,i,o){this.id=t,this.size=e,this.mode=r,this.atime=n,this.mtime=i,this.ctime=o};We.fromBuffer=function(t){if(void 0===t)throw new Error("NO");return new We(t.toString("ascii",30),t.readUInt32LE(0),t.readUInt16LE(4),t.readDoubleLE(6),t.readDoubleLE(14),t.readDoubleLE(22))},We.prototype.toStats=function(){return new d((61440&this.mode)===h.DIRECTORY?h.DIRECTORY:h.FILE,this.size,this.mode,new Date(this.atime),new Date(this.mtime),new Date(this.ctime))},We.prototype.getSize=function(){return 30+this.id.length},We.prototype.toBuffer=function(e){return void 0===e&&(e=t.alloc(this.getSize())),e.writeUInt32LE(this.size,0),e.writeUInt16LE(this.mode,4),e.writeDoubleLE(this.atime,6),e.writeDoubleLE(this.mtime,14),e.writeDoubleLE(this.ctime,22),e.write(this.id,30,this.id.length,"ascii"),e},We.prototype.update=function(t){var e=!1;this.size!==t.size&&(this.size=t.size,e=!0),this.mode!==t.mode&&(this.mode=t.mode,e=!0);var r=t.atime.getTime();this.atime!==r&&(this.atime=r,e=!0);var n=t.mtime.getTime();this.mtime!==n&&(this.mtime=n,e=!0);var i=t.ctime.getTime();return this.ctime!==i&&(this.ctime=i,e=!0),e},We.prototype.isFile=function(){return(61440&this.mode)===h.FILE},We.prototype.isDirectory=function(){return(61440&this.mode)===h.DIRECTORY};var Ve="/",He=null;function Ze(){return He||(He=t.from("{}"))}function Ye(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)}))}function Xe(t,e){return!t||(e(t),!1)}function Je(t,e,r){return!t||(e.abort((function(){r(t)})),!1)}var Ge=function(t){this.store=t,this.originalData={},this.modifiedKeys=[]};Ge.prototype.get=function(t){var e=this.store.get(t);return this.stashOldValue(t,e),e},Ge.prototype.put=function(t,e,r){return this.markModified(t),this.store.put(t,e,r)},Ge.prototype.del=function(t){this.markModified(t),this.store.del(t)},Ge.prototype.commit=function(){},Ge.prototype.abort=function(){for(var t=this,e=0,r=t.modifiedKeys;e<r.length;e+=1){var n=r[e],i=t.originalData[n];i?t.store.put(n,i,!0):t.store.del(n)}},Ge.prototype.stashOldValue=function(t,e){this.originalData.hasOwnProperty(t)||(this.originalData[t]=e)},Ge.prototype.markModified=function(t){-1===this.modifiedKeys.indexOf(t)&&(this.modifiedKeys.push(t),this.originalData.hasOwnProperty(t)||(this.originalData[t]=this.store.get(t)))};var Ke=function(t){function e(e,r,n,i,o){t.call(this,e,r,n,i,o)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.syncSync=function(){this.isDirty()&&(this._fs._syncSync(this.getPath(),this.getBuffer(),this.getStats()),this.resetDirty())},e.prototype.closeSync=function(){this.syncSync()},e}(K),$e=function(e){function r(t){e.call(this),this.store=t.store,this.makeRootDirectory()}return e&&(r.__proto__=e),r.prototype=Object.create(e&&e.prototype),r.prototype.constructor=r,r.isAvailable=function(){return!0},r.prototype.getName=function(){return this.store.name()},r.prototype.isReadOnly=function(){return!1},r.prototype.supportsSymlinks=function(){return!1},r.prototype.supportsProps=function(){return!1},r.prototype.supportsSynch=function(){return!0},r.prototype.empty=function(){this.store.clear(),this.makeRootDirectory()},r.prototype.renameSync=function(e,r){var n=this.store.beginTransaction("readwrite"),i=u.dirname(e),o=u.basename(e),s=u.dirname(r),c=u.basename(r),f=this.findINode(n,i),l=this.getDirListing(n,i,f);if(!l[o])throw p.ENOENT(e);var h,y,d=l[o];if(delete l[o],0===(s+"/").indexOf(e+"/"))throw new p(a.EBUSY,i);if(s===i?(h=f,y=l):(h=this.findINode(n,s),y=this.getDirListing(n,s,h)),y[c]){var g=this.getINode(n,r,y[c]);if(!g.isFile())throw p.EPERM(r);try{n.del(g.id),n.del(y[c])}catch(t){throw n.abort(),t}}y[c]=d;try{n.put(f.id,t.from(JSON.stringify(l)),!0),n.put(h.id,t.from(JSON.stringify(y)),!0)}catch(t){throw n.abort(),t}n.commit()},r.prototype.statSync=function(t,e){return this.findINode(this.store.beginTransaction("readonly"),t).toStats()},r.prototype.createFileSync=function(t,e,r){var n=this.store.beginTransaction("readwrite"),i=z(),o=this.commitNewFile(n,t,h.FILE,r,i);return new Ke(this,t,e,o.toStats(),i)},r.prototype.openFileSync=function(t,e){var r=this.store.beginTransaction("readonly"),n=this.findINode(r,t),i=r.get(n.id);if(void 0===i)throw p.ENOENT(t);return new Ke(this,t,e,n.toStats(),i)},r.prototype.unlinkSync=function(t){this.removeEntry(t,!1)},r.prototype.rmdirSync=function(t){if(this.readdirSync(t).length>0)throw p.ENOTEMPTY(t);this.removeEntry(t,!0)},r.prototype.mkdirSync=function(e,r){var n=this.store.beginTransaction("readwrite"),i=t.from("{}");this.commitNewFile(n,e,h.DIRECTORY,r,i)},r.prototype.readdirSync=function(t){var e=this.store.beginTransaction("readonly");return Object.keys(this.getDirListing(e,t,this.findINode(e,t)))},r.prototype._syncSync=function(t,e,r){var n=this.store.beginTransaction("readwrite"),i=this._findINode(n,u.dirname(t),u.basename(t)),o=this.getINode(n,t,i),a=o.update(r);try{n.put(o.id,e,!0),a&&n.put(i,o.toBuffer(),!0)}catch(t){throw n.abort(),t}n.commit()},r.prototype.makeRootDirectory=function(){var t=this.store.beginTransaction("readwrite");if(void 0===t.get(Ve)){var e=(new Date).getTime(),r=new We(Ye(),4096,511|h.DIRECTORY,e,e,e);t.put(r.id,Ze(),!1),t.put(Ve,r.toBuffer(),!1),t.commit()}},r.prototype._findINode=function(t,e,r){var n=this,i=function(i){var o=n.getDirListing(t,e,i);if(o[r])return o[r];throw p.ENOENT(u.resolve(e,r))};return"/"===e?""===r?Ve:i(this.getINode(t,e,Ve)):i(this.getINode(t,e+u.sep+r,this._findINode(t,u.dirname(e),u.basename(e))))},r.prototype.findINode=function(t,e){return this.getINode(t,e,this._findINode(t,u.dirname(e),u.basename(e)))},r.prototype.getINode=function(t,e,r){var n=t.get(r);if(void 0===n)throw p.ENOENT(e);return We.fromBuffer(n)},r.prototype.getDirListing=function(t,e,r){if(!r.isDirectory())throw p.ENOTDIR(e);var n=t.get(r.id);if(void 0===n)throw p.ENOENT(e);return JSON.parse(n.toString())},r.prototype.addNewNode=function(t,e){for(var r;;)try{return r=Ye(),t.put(r,e,!1),r}catch(t){}throw new p(a.EIO,"Unable to commit data to key-value store.")},r.prototype.commitNewFile=function(e,r,n,i,o){var a,s=u.dirname(r),c=u.basename(r),f=this.findINode(e,s),l=this.getDirListing(e,s,f),h=(new Date).getTime();if("/"===r)throw p.EEXIST(r);if(l[c])throw p.EEXIST(r);try{var y=this.addNewNode(e,o);a=new We(y,o.length,i|n,h,h,h);var d=this.addNewNode(e,a.toBuffer());l[c]=d,e.put(f.id,t.from(JSON.stringify(l)),!0)}catch(t){throw e.abort(),t}return e.commit(),a},r.prototype.removeEntry=function(e,r){var n=this.store.beginTransaction("readwrite"),i=u.dirname(e),o=this.findINode(n,i),a=this.getDirListing(n,i,o),s=u.basename(e);if(!a[s])throw p.ENOENT(e);var c=a[s];delete a[s];var f=this.getINode(n,e,c);if(!r&&f.isDirectory())throw p.EISDIR(e);if(r&&!f.isDirectory())throw p.ENOTDIR(e);try{n.del(f.id),n.del(c),n.put(o.id,t.from(JSON.stringify(a)),!0)}catch(t){throw n.abort(),t}n.commit()},r}(J),Qe=function(t){function e(e,r,n,i,o){t.call(this,e,r,n,i,o)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.sync=function(t){var e=this;this.isDirty()?this._fs._sync(this.getPath(),this.getBuffer(),this.getStats(),(function(r){r||e.resetDirty(),t(r)})):t()},e.prototype.close=function(t){this.sync(t)},e}(K),tr=function(e){function r(){e.apply(this,arguments)}return e&&(r.__proto__=e),r.prototype=Object.create(e&&e.prototype),r.prototype.constructor=r,r.isAvailable=function(){return!0},r.prototype.init=function(t,e){this.store=t,this.makeRootDirectory(e)},r.prototype.getName=function(){return this.store.name()},r.prototype.isReadOnly=function(){return!1},r.prototype.supportsSymlinks=function(){return!1},r.prototype.supportsProps=function(){return!1},r.prototype.supportsSynch=function(){return!1},r.prototype.empty=function(t){var e=this;this.store.clear((function(r){Xe(r,t)&&e.makeRootDirectory(t)}))},r.prototype.rename=function(e,r,n){var i=this,o=this.store.beginTransaction("readwrite"),s=u.dirname(e),c=u.basename(e),f=u.dirname(r),l=u.basename(r),h={},y={},d=!1;if(0===(f+"/").indexOf(e+"/"))return n(new p(a.EBUSY,s));var g=function(a){i.findINodeAndDirListing(o,a,(function(u,g,v){u?d||(d=!0,o.abort((function(){n(u)}))):(h[a]=g,y[a]=v,function(){if(!d&&y.hasOwnProperty(s)&&y.hasOwnProperty(f)){var a=y[s],u=h[s],g=y[f],v=h[f];if(a[c]){var m=a[c];delete a[c];var w=function(){g[l]=m,o.put(u.id,t.from(JSON.stringify(a)),!0,(function(e){Je(e,o,n)&&(s===f?o.commit(n):o.put(v.id,t.from(JSON.stringify(g)),!0,(function(t){Je(t,o,n)&&o.commit(n)})))}))};g[l]?i.getINode(o,r,g[l],(function(t,e){Je(t,o,n)&&(e.isFile()?o.del(e.id,(function(t){Je(t,o,n)&&o.del(g[l],(function(t){Je(t,o,n)&&w()}))})):o.abort((function(t){n(p.EPERM(r))})))})):w()}else n(p.ENOENT(e))}}())}))};g(s),s!==f&&g(f)},r.prototype.stat=function(t,e,r){var n=this.store.beginTransaction("readonly");this.findINode(n,t,(function(t,e){Xe(t,r)&&r(null,e.toStats())}))},r.prototype.createFile=function(t,e,r,n){var i=this,o=this.store.beginTransaction("readwrite"),a=z();this.commitNewFile(o,t,h.FILE,r,a,(function(r,o){Xe(r,n)&&n(null,new Qe(i,t,e,o.toStats(),a))}))},r.prototype.openFile=function(t,e,r){var n=this,i=this.store.beginTransaction("readonly");this.findINode(i,t,(function(o,a){Xe(o,r)&&i.get(a.id,(function(i,o){Xe(i,r)&&(void 0===o?r(p.ENOENT(t)):r(null,new Qe(n,t,e,a.toStats(),o)))}))}))},r.prototype.unlink=function(t,e){this.removeEntry(t,!1,e)},r.prototype.rmdir=function(t,e){var r=this;this.readdir(t,(function(n,i){n?e(n):i.length>0?e(p.ENOTEMPTY(t)):r.removeEntry(t,!0,e)}))},r.prototype.mkdir=function(e,r,n){var i=this.store.beginTransaction("readwrite"),o=t.from("{}");this.commitNewFile(i,e,h.DIRECTORY,r,o,n)},r.prototype.readdir=function(t,e){var r=this,n=this.store.beginTransaction("readonly");this.findINode(n,t,(function(i,o){Xe(i,e)&&r.getDirListing(n,t,o,(function(t,r){Xe(t,e)&&e(null,Object.keys(r))}))}))},r.prototype._sync=function(t,e,r,n){var i=this,o=this.store.beginTransaction("readwrite");this._findINode(o,u.dirname(t),u.basename(t),(function(a,s){Je(a,o,n)&&i.getINode(o,t,s,(function(t,i){if(Je(t,o,n)){var a=i.update(r);o.put(i.id,e,!0,(function(t){Je(t,o,n)&&(a?o.put(s,i.toBuffer(),!0,(function(t){Je(t,o,n)&&o.commit(n)})):o.commit(n))}))}}))}))},r.prototype.makeRootDirectory=function(t){var e=this.store.beginTransaction("readwrite");e.get(Ve,(function(r,n){if(r||void 0===n){var i=(new Date).getTime(),o=new We(Ye(),4096,511|h.DIRECTORY,i,i,i);e.put(o.id,Ze(),!1,(function(r){Je(r,e,t)&&e.put(Ve,o.toBuffer(),!1,(function(r){r?e.abort((function(){t(r)})):e.commit(t)}))}))}else e.commit(t)}))},r.prototype._findINode=function(t,e,r,n){var i=this,o=function(t,i,o){t?n(t):o[r]?n(null,o[r]):n(p.ENOENT(u.resolve(e,r)))};"/"===e?""===r?n(null,Ve):this.getINode(t,e,Ve,(function(r,a){Xe(r,n)&&i.getDirListing(t,e,a,(function(t,e){o(t,0,e)}))})):this.findINodeAndDirListing(t,e,o)},r.prototype.findINode=function(t,e,r){var n=this;this._findINode(t,u.dirname(e),u.basename(e),(function(i,o){Xe(i,r)&&n.getINode(t,e,o,r)}))},r.prototype.getINode=function(t,e,r,n){t.get(r,(function(t,r){Xe(t,n)&&(void 0===r?n(p.ENOENT(e)):n(null,We.fromBuffer(r)))}))},r.prototype.getDirListing=function(t,e,r,n){r.isDirectory()?t.get(r.id,(function(t,r){if(Xe(t,n))try{n(null,JSON.parse(r.toString()))}catch(t){n(p.ENOENT(e))}})):n(p.ENOTDIR(e))},r.prototype.findINodeAndDirListing=function(t,e,r){var n=this;this.findINode(t,e,(function(i,o){Xe(i,r)&&n.getDirListing(t,e,o,(function(t,e){Xe(t,r)&&r(null,o,e)}))}))},r.prototype.addNewNode=function(t,e,r){var n,i=0,o=function(){5==++i?r(new p(a.EIO,"Unable to commit data to key-value store.")):(n=Ye(),t.put(n,e,!1,(function(t,e){t||!e?o():r(null,n)})))};o()},r.prototype.commitNewFile=function(e,r,n,i,o,a){var s=this,c=u.dirname(r),f=u.basename(r),l=(new Date).getTime();if("/"===r)return a(p.EEXIST(r));this.findINodeAndDirListing(e,c,(function(u,c,h){Je(u,e,a)&&(h[f]?e.abort((function(){a(p.EEXIST(r))})):s.addNewNode(e,o,(function(r,u){if(Je(r,e,a)){var p=new We(u,o.length,i|n,l,l,l);s.addNewNode(e,p.toBuffer(),(function(r,n){Je(r,e,a)&&(h[f]=n,e.put(c.id,t.from(JSON.stringify(h)),!0,(function(t){Je(t,e,a)&&e.commit((function(t){Je(t,e,a)&&a(null,p)}))})))}))}})))}))},r.prototype.removeEntry=function(e,r,n){var i=this,o=this.store.beginTransaction("readwrite"),a=u.dirname(e),s=u.basename(e);this.findINodeAndDirListing(o,a,(function(a,u,c){if(Je(a,o,n))if(c[s]){var f=c[s];delete c[s],i.getINode(o,e,f,(function(i,a){Je(i,o,n)&&(!r&&a.isDirectory()?o.abort((function(){n(p.EISDIR(e))})):r&&!a.isDirectory()?o.abort((function(){n(p.ENOTDIR(e))})):o.del(a.id,(function(e){Je(e,o,n)&&o.del(f,(function(e){Je(e,o,n)&&o.put(u.id,t.from(JSON.stringify(c)),!0,(function(t){Je(t,o,n)&&o.commit(n)}))}))})))}))}else o.abort((function(){n(p.ENOENT(e))}))}))},r}(X),er=function(){this.store={}};er.prototype.name=function(){return rr.Name},er.prototype.clear=function(){this.store={}},er.prototype.beginTransaction=function(t){return new Ge(this)},er.prototype.get=function(t){return this.store[t]},er.prototype.put=function(t,e,r){return!(!r&&this.store.hasOwnProperty(t)||(this.store[t]=e,0))},er.prototype.del=function(t){delete this.store[t]};var rr=function(t){function e(){t.call(this,{store:new er})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){r(null,new e)},e}($e);rr.Name="InMemory",rr.Options={};var nr=Me.indexedDB||Me.mozIndexedDB||Me.webkitIndexedDB||Me.msIndexedDB;function ir(t,e){switch(void 0===e&&(e=t.toString()),t.name){case"NotFoundError":return new p(a.ENOENT,e);case"QuotaExceededError":return new p(a.ENOSPC,e);default:return new p(a.EIO,e)}}function or(t,e,r){return void 0===e&&(e=a.EIO),void 0===r&&(r=null),function(n){n.preventDefault(),t(new p(e,null!==r?r:void 0))}}var ar=function(t,e){this.tx=t,this.store=e};ar.prototype.get=function(t,e){try{var r=this.store.get(t);r.onerror=or(e),r.onsuccess=function(t){var r=t.target.result;e(null,void 0===r?r:M(r))}}catch(t){e(ir(t))}};var sr=function(t){function e(e,r){t.call(this,e,r)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.put=function(t,e,r,n){try{var i,o=D(e);(i=r?this.store.put(o,t):this.store.add(o,t)).onerror=or(n),i.onsuccess=function(t){n(null,!0)}}catch(t){n(ir(t))}},e.prototype.del=function(t,e){try{var r=this.store.delete(t);r.onerror=or(e),r.onsuccess=function(t){e()}}catch(t){e(ir(t))}},e.prototype.commit=function(t){setTimeout(t,0)},e.prototype.abort=function(t){var e=null;try{this.tx.abort()}catch(t){e=ir(t)}finally{t(e)}},e}(ar),ur=function(t,e){var r=this;void 0===e&&(e="browserfs"),this.storeName=e;var n=nr.open(this.storeName,1);n.onupgradeneeded=function(t){var e=t.target.result;e.objectStoreNames.contains(r.storeName)&&e.deleteObjectStore(r.storeName),e.createObjectStore(r.storeName)},n.onsuccess=function(e){r.db=e.target.result,t(null,r)},n.onerror=or(t,a.EACCES)};ur.prototype.name=function(){return cr.Name+" - "+this.storeName},ur.prototype.clear=function(t){try{var e=this.db.transaction(this.storeName,"readwrite").objectStore(this.storeName).clear();e.onsuccess=function(e){setTimeout(t,0)},e.onerror=or(t)}catch(e){t(ir(e))}},ur.prototype.beginTransaction=function(t){void 0===t&&(t="readonly");var e=this.db.transaction(this.storeName,t),r=e.objectStore(this.storeName);if("readwrite"===t)return new sr(e,r);if("readonly"===t)return new ar(e,r);throw new p(a.EINVAL,"Invalid transaction type.")};var cr=function(t){function e(r,n,i){var o=this;void 0===i&&(i=!0),t.call(this),this.store=new ur((function(t){t?r(t):o.init(o.store,(function(t){r(t,o)}))}),n),N(i,e.Name,{storeName:n})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){new e(r,t.storeName,!1)},e.isAvailable=function(){try{return void 0!==nr&&null!==nr.open("__browserfs_test__")}catch(t){return!1}},e}(tr);cr.Name="IndexedDB",cr.Options={storeName:{type:"string",optional:!0,description:"The name of this file system. You can have multiple IndexedDB file systems operating at once, but each must have a different name."}};var fr,pr=!1;try{Me.localStorage.setItem("__test__",String.fromCharCode(55296)),pr=Me.localStorage.getItem("__test__")===String.fromCharCode(55296)}catch(t){pr=!1}fr=pr?"binary_string":"binary_string_ie",t.isEncoding(fr)||(fr="base64");var lr=function(){};lr.prototype.name=function(){return hr.Name},lr.prototype.clear=function(){Me.localStorage.clear()},lr.prototype.beginTransaction=function(t){return new Ge(this)},lr.prototype.get=function(e){try{var r=Me.localStorage.getItem(e);if(null!==r)return t.from(r,fr)}catch(t){}},lr.prototype.put=function(t,e,r){try{return!(!r&&null!==Me.localStorage.getItem(t)||(Me.localStorage.setItem(t,e.toString(fr)),0))}catch(t){throw new p(a.ENOSPC,"LocalStorage is full.")}},lr.prototype.del=function(t){try{Me.localStorage.removeItem(t)}catch(e){throw new p(a.EIO,"Unable to delete key "+t+": "+e)}};var hr=function(t){function e(){t.call(this,{store:new lr})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){r(null,new e)},e.isAvailable=function(){return void 0!==Me.localStorage},e}($e);hr.Name="LocalStorage",hr.Options={};var yr=function(t){function e(){t.call(this),this.mountList=[],this.mntMap={},this.rootFs=new rr}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){var n=new e;Object.keys(t).forEach((function(e){n.mount(e,t[e])})),r(null,n)},e.isAvailable=function(){return!0},e.prototype.mount=function(t,e){if("/"!==t[0]&&(t="/"+t),t=u.resolve(t),this.mntMap[t])throw new p(a.EINVAL,"Mount point "+t+" is already taken.");L(t,511,this.rootFs),this.mntMap[t]=e,this.mountList.push(t),this.mountList=this.mountList.sort((function(t,e){return e.length-t.length}))},e.prototype.umount=function(t){if("/"!==t[0]&&(t="/"+t),t=u.resolve(t),!this.mntMap[t])throw new p(a.EINVAL,"Mount point "+t+" is already unmounted.");for(delete this.mntMap[t],this.mountList.splice(this.mountList.indexOf(t),1);"/"!==t&&0===this.rootFs.readdirSync(t).length;)this.rootFs.rmdirSync(t),t=u.dirname(t)},e.prototype._getFs=function(t){for(var e=this.mountList,r=e.length,n=0;n<r;n++){var i=e[n];if(i.length<=t.length&&0===t.indexOf(i))return""===(t=t.substr(i.length>1?i.length:0))&&(t="/"),{fs:this.mntMap[i],path:t}}return{fs:this.rootFs,path:t}},e.prototype.getName=function(){return e.Name},e.prototype.diskSpace=function(t,e){e(0,0)},e.prototype.isReadOnly=function(){return!1},e.prototype.supportsLinks=function(){return!1},e.prototype.supportsProps=function(){return!1},e.prototype.supportsSynch=function(){return!0},e.prototype.standardizeError=function(t,e,r){var n=t.message.indexOf(e);return-1!==n&&(t.message=t.message.substr(0,n)+r+t.message.substr(n+e.length),t.path=r),t},e.prototype.rename=function(t,e,r){var n=this,i=this._getFs(t),o=this._getFs(e);return i.fs===o.fs?i.fs.rename(i.path,o.path,(function(a){a&&n.standardizeError(n.standardizeError(a,i.path,t),o.path,e),r(a)})):I.readFile(t,(function(n,i){if(n)return r(n);I.writeFile(e,i,(function(e){if(e)return r(e);I.unlink(t,r)}))}))},e.prototype.renameSync=function(t,e){var r=this._getFs(t),n=this._getFs(e);if(r.fs===n.fs)try{return r.fs.renameSync(r.path,n.path)}catch(i){throw this.standardizeError(this.standardizeError(i,r.path,t),n.path,e),i}var i=I.readFileSync(t);return I.writeFileSync(e,i),I.unlinkSync(t)},e.prototype.readdirSync=function(t){var e=this._getFs(t),r=null;if(e.fs!==this.rootFs)try{r=this.rootFs.readdirSync(t)}catch(t){}try{var n=e.fs.readdirSync(e.path);return null===r?n:n.concat(r.filter((function(t){return-1===n.indexOf(t)})))}catch(n){if(null===r)throw this.standardizeError(n,e.path,t);return r}},e.prototype.readdir=function(t,e){var r=this,n=this._getFs(t);n.fs.readdir(n.path,(function(i,o){if(n.fs!==r.rootFs)try{var a=r.rootFs.readdirSync(t);o=o?o.concat(a.filter((function(t){return-1===o.indexOf(t)}))):a}catch(o){if(i)return e(r.standardizeError(i,n.path,t))}else if(i)return e(r.standardizeError(i,n.path,t));e(null,o)}))},e.prototype.rmdirSync=function(t){var e=this._getFs(t);if(this._containsMountPt(t))throw p.ENOTEMPTY(t);try{e.fs.rmdirSync(e.path)}catch(r){throw this.standardizeError(r,e.path,t)}},e.prototype.rmdir=function(t,e){var r=this,n=this._getFs(t);this._containsMountPt(t)?e(p.ENOTEMPTY(t)):n.fs.rmdir(n.path,(function(i){e(i?r.standardizeError(i,n.path,t):null)}))},e.prototype._containsMountPt=function(t){for(var e=this.mountList,r=e.length,n=0;n<r;n++){var i=e[n];if(i.length>=t.length&&i.slice(0,t.length)===t)return!0}return!1},e}(X);function dr(t,e,r){return e?function(){for(var e=[],r=arguments.length;r--;)e[r]=arguments[r];var n=e[0],i=this._getFs(n);e[0]=i.path;try{return i.fs[t].apply(i.fs,e)}catch(t){throw this.standardizeError(t,i.path,n),t}}:function(){for(var e=this,r=[],n=arguments.length;n--;)r[n]=arguments[n];var i=r[0],o=this._getFs(i);if(r[0]=o.path,"function"==typeof r[r.length-1]){var a=r[r.length-1];r[r.length-1]=function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];t.length>0&&t[0]instanceof p&&e.standardizeError(t[0],o.path,i),a.apply(null,t)}}return o.fs[t].apply(o.fs,r)}}yr.Name="MountableFileSystem",yr.Options={};for(var gr,vr=[["exists","unlink","readlink"],["stat","mkdir","realpath","truncate"],["open","readFile","chmod","utimes"],["chown"],["writeFile","appendFile"]],mr=0;mr<vr.length;mr++)for(var wr=0,_r=vr[mr];wr<_r.length;wr+=1){var br=_r[wr];yr.prototype[br]=dr(br,!1),yr.prototype[br+"Sync"]=dr(br+"Sync",!0)}if("undefined"!=typeof setImmediate)gr=setImmediate;else{var Sr=Me,Er=[],Or="zero-timeout-message";if(function(){if(void 0!==Sr.importScripts||!Sr.postMessage)return!1;var t=!0,e=Sr.onmessage;return Sr.onmessage=function(){t=!1},Sr.postMessage("","*"),Sr.onmessage=e,t}()){gr=function(t){Er.push(t),Sr.postMessage(Or,"*")};var Ir=function(t){if(t.source===self&&t.data===Or&&(t.stopPropagation?t.stopPropagation():t.cancelBubble=!0,Er.length>0))return Er.shift()()};Sr.addEventListener?Sr.addEventListener("message",Ir,!0):Sr.attachEvent("onmessage",Ir)}else if(Sr.MessageChannel){var kr=new Sr.MessageChannel;kr.port1.onmessage=function(t){if(Er.length>0)return Er.shift()()},gr=function(t){Er.push(t),kr.port2.postMessage("")}}else gr=function(t){return setTimeout(t,0)}}var Fr=gr,Ar=function(){this._locked=!1,this._waiters=[]};Ar.prototype.lock=function(t){this._locked?this._waiters.push(t):(this._locked=!0,t())},Ar.prototype.unlock=function(){if(!this._locked)throw new Error("unlock of a non-locked mutex");var t=this._waiters.shift();t?Fr(t):this._locked=!1},Ar.prototype.tryLock=function(){return!this._locked&&(this._locked=!0,!0)},Ar.prototype.isLocked=function(){return this._locked};var Nr=function(t){this._fs=t,this._mu=new Ar};Nr.prototype.getName=function(){return"LockedFS<"+this._fs.getName()+">"},Nr.prototype.getFSUnlocked=function(){return this._fs},Nr.prototype.initialize=function(t){this._fs.initialize(t)},Nr.prototype.diskSpace=function(t,e){this._fs.diskSpace(t,e)},Nr.prototype.isReadOnly=function(){return this._fs.isReadOnly()},Nr.prototype.supportsLinks=function(){return this._fs.supportsLinks()},Nr.prototype.supportsProps=function(){return this._fs.supportsProps()},Nr.prototype.supportsSynch=function(){return this._fs.supportsSynch()},Nr.prototype.rename=function(t,e,r){var n=this;this._mu.lock((function(){n._fs.rename(t,e,(function(t){n._mu.unlock(),r(t)}))}))},Nr.prototype.renameSync=function(t,e){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.renameSync(t,e)},Nr.prototype.stat=function(t,e,r){var n=this;this._mu.lock((function(){n._fs.stat(t,e,(function(t,e){n._mu.unlock(),r(t,e)}))}))},Nr.prototype.statSync=function(t,e){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.statSync(t,e)},Nr.prototype.open=function(t,e,r,n){var i=this;this._mu.lock((function(){i._fs.open(t,e,r,(function(t,e){i._mu.unlock(),n(t,e)}))}))},Nr.prototype.openSync=function(t,e,r){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.openSync(t,e,r)},Nr.prototype.unlink=function(t,e){var r=this;this._mu.lock((function(){r._fs.unlink(t,(function(t){r._mu.unlock(),e(t)}))}))},Nr.prototype.unlinkSync=function(t){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.unlinkSync(t)},Nr.prototype.rmdir=function(t,e){var r=this;this._mu.lock((function(){r._fs.rmdir(t,(function(t){r._mu.unlock(),e(t)}))}))},Nr.prototype.rmdirSync=function(t){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.rmdirSync(t)},Nr.prototype.mkdir=function(t,e,r){var n=this;this._mu.lock((function(){n._fs.mkdir(t,e,(function(t){n._mu.unlock(),r(t)}))}))},Nr.prototype.mkdirSync=function(t,e){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.mkdirSync(t,e)},Nr.prototype.readdir=function(t,e){var r=this;this._mu.lock((function(){r._fs.readdir(t,(function(t,n){r._mu.unlock(),e(t,n)}))}))},Nr.prototype.readdirSync=function(t){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.readdirSync(t)},Nr.prototype.exists=function(t,e){var r=this;this._mu.lock((function(){r._fs.exists(t,(function(t){r._mu.unlock(),e(t)}))}))},Nr.prototype.existsSync=function(t){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.existsSync(t)},Nr.prototype.realpath=function(t,e,r){var n=this;this._mu.lock((function(){n._fs.realpath(t,e,(function(t,e){n._mu.unlock(),r(t,e)}))}))},Nr.prototype.realpathSync=function(t,e){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.realpathSync(t,e)},Nr.prototype.truncate=function(t,e,r){var n=this;this._mu.lock((function(){n._fs.truncate(t,e,(function(t){n._mu.unlock(),r(t)}))}))},Nr.prototype.truncateSync=function(t,e){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.truncateSync(t,e)},Nr.prototype.readFile=function(t,e,r,n){var i=this;this._mu.lock((function(){i._fs.readFile(t,e,r,(function(t,e){i._mu.unlock(),n(t,e)}))}))},Nr.prototype.readFileSync=function(t,e,r){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.readFileSync(t,e,r)},Nr.prototype.writeFile=function(t,e,r,n,i,o){var a=this;this._mu.lock((function(){a._fs.writeFile(t,e,r,n,i,(function(t){a._mu.unlock(),o(t)}))}))},Nr.prototype.writeFileSync=function(t,e,r,n,i){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.writeFileSync(t,e,r,n,i)},Nr.prototype.appendFile=function(t,e,r,n,i,o){var a=this;this._mu.lock((function(){a._fs.appendFile(t,e,r,n,i,(function(t){a._mu.unlock(),o(t)}))}))},Nr.prototype.appendFileSync=function(t,e,r,n,i){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.appendFileSync(t,e,r,n,i)},Nr.prototype.chmod=function(t,e,r,n){var i=this;this._mu.lock((function(){i._fs.chmod(t,e,r,(function(t){i._mu.unlock(),n(t)}))}))},Nr.prototype.chmodSync=function(t,e,r){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.chmodSync(t,e,r)},Nr.prototype.chown=function(t,e,r,n,i){var o=this;this._mu.lock((function(){o._fs.chown(t,e,r,n,(function(t){o._mu.unlock(),i(t)}))}))},Nr.prototype.chownSync=function(t,e,r,n){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.chownSync(t,e,r,n)},Nr.prototype.utimes=function(t,e,r,n){var i=this;this._mu.lock((function(){i._fs.utimes(t,e,r,(function(t){i._mu.unlock(),n(t)}))}))},Nr.prototype.utimesSync=function(t,e,r){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.utimesSync(t,e,r)},Nr.prototype.link=function(t,e,r){var n=this;this._mu.lock((function(){n._fs.link(t,e,(function(t){n._mu.unlock(),r(t)}))}))},Nr.prototype.linkSync=function(t,e){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.linkSync(t,e)},Nr.prototype.symlink=function(t,e,r,n){var i=this;this._mu.lock((function(){i._fs.symlink(t,e,r,(function(t){i._mu.unlock(),n(t)}))}))},Nr.prototype.symlinkSync=function(t,e,r){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.symlinkSync(t,e,r)},Nr.prototype.readlink=function(t,e){var r=this;this._mu.lock((function(){r._fs.readlink(t,(function(t,n){r._mu.unlock(),e(t,n)}))}))},Nr.prototype.readlinkSync=function(t){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.readlinkSync(t)};var Rr="/.deletedFiles.log";function Tr(t){return 146|t}function xr(t){return y.getFileFlag(t)}var Lr,Dr=function(t){function e(e,r,n,i,o){t.call(this,e,r,n,i,o)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.sync=function(t){var e=this;this.isDirty()?this._fs._syncAsync(this,(function(r){e.resetDirty(),t(r)})):t(null)},e.prototype.syncSync=function(){this.isDirty()&&(this._fs._syncSync(this),this.resetDirty())},e.prototype.close=function(t){this.sync(t)},e.prototype.closeSync=function(){this.syncSync()},e}(K),Pr=function(t){function e(e,r){if(t.call(this),this._isInitialized=!1,this._initializeCallbacks=[],this._deletedFiles={},this._deleteLog="",this._deleteLogUpdatePending=!1,this._deleteLogUpdateNeeded=!1,this._deleteLogError=null,this._writable=e,this._readable=r,this._writable.isReadOnly())throw new p(a.EINVAL,"Writable file system must be writable.")}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.isAvailable=function(){return!0},e.prototype.getOverlayedFileSystems=function(){return{readable:this._readable,writable:this._writable}},e.prototype._syncAsync=function(t,e){var r=this;this.createParentDirectoriesAsync(t.getPath(),(function(n){if(n)return e(n);r._writable.writeFile(t.getPath(),t.getBuffer(),null,xr("w"),t.getStats().mode,e)}))},e.prototype._syncSync=function(t){this.createParentDirectories(t.getPath()),this._writable.writeFileSync(t.getPath(),t.getBuffer(),null,xr("w"),t.getStats().mode)},e.prototype.getName=function(){return jr.Name},e.prototype.initialize=function(t){var e=this,r=this._initializeCallbacks,n=function(t){e._isInitialized=!t,e._initializeCallbacks=[],r.forEach((function(e){return e(t)}))};if(this._isInitialized)return t();r.push(t),1===r.length&&this._writable.readFile(Rr,"utf8",xr("r"),(function(t,r){if(t){if(t.errno!==a.ENOENT)return n(t)}else e._deleteLog=r;e._reparseDeletionLog(),n()}))},e.prototype.isReadOnly=function(){return!1},e.prototype.supportsSynch=function(){return this._readable.supportsSynch()&&this._writable.supportsSynch()},e.prototype.supportsLinks=function(){return!1},e.prototype.supportsProps=function(){return this._readable.supportsProps()&&this._writable.supportsProps()},e.prototype.getDeletionLog=function(){return this._deleteLog},e.prototype.restoreDeletionLog=function(t){this._deleteLog=t,this._reparseDeletionLog(),this.updateLog("")},e.prototype.rename=function(t,e,r){var n=this;if(this.checkInitAsync(r)&&!this.checkPathAsync(t,r)&&!this.checkPathAsync(e,r))return t===Rr||e===Rr?r(p.EPERM("Cannot rename deletion log.")):t===e?r():void this.stat(t,!1,(function(i,o){return i?r(i):n.stat(e,!1,(function(i,s){var c=n;function f(n){var i=n.shift();if(!i)return r();var o=u.resolve(t,i),a=u.resolve(e,i);c.rename(o,a,(function(t){if(t)return r(t);f(n)}))}var l=511;if(o.isDirectory()){if(i)return i.errno!==a.ENOENT?r(i):n._writable.exists(t,(function(i){if(i)return n._writable.rename(t,e,r);n._writable.mkdir(e,l,(function(e){if(e)return r(e);n._readable.readdir(t,(function(t,e){if(t)return r();f(e)}))}))}));if(l=s.mode,!s.isDirectory())return r(p.ENOTDIR(e));n.readdir(e,(function(i,o){if(o&&o.length)return r(p.ENOTEMPTY(e));n._readable.readdir(t,(function(t,e){if(t)return r();f(e)}))}))}if(s&&s.isDirectory())return r(p.EISDIR(e));n.readFile(t,null,xr("r"),(function(i,a){return i?r(i):n.writeFile(e,a,null,xr("w"),o.mode,(function(e){return e?r(e):n.unlink(t,r)}))}))}))}))},e.prototype.renameSync=function(t,e){var r=this;if(this.checkInitialized(),this.checkPath(t),this.checkPath(e),t===Rr||e===Rr)throw p.EPERM("Cannot rename deletion log.");var n=this.statSync(t,!1);if(n.isDirectory()){if(t===e)return;var i=511;if(this.existsSync(e)){var o=this.statSync(e,!1);if(i=o.mode,!o.isDirectory())throw p.ENOTDIR(e);if(this.readdirSync(e).length>0)throw p.ENOTEMPTY(e)}this._writable.existsSync(t)?this._writable.renameSync(t,e):this._writable.existsSync(e)||this._writable.mkdirSync(e,i),this._readable.existsSync(t)&&this._readable.readdirSync(t).forEach((function(n){r.renameSync(u.resolve(t,n),u.resolve(e,n))}))}else{if(this.existsSync(e)&&this.statSync(e,!1).isDirectory())throw p.EISDIR(e);this.writeFileSync(e,this.readFileSync(t,null,xr("r")),null,xr("w"),n.mode)}t!==e&&this.existsSync(t)&&this.unlinkSync(t)},e.prototype.stat=function(t,e,r){var n=this;this.checkInitAsync(r)&&this._writable.stat(t,e,(function(i,o){i&&i.errno===a.ENOENT?(n._deletedFiles[t]&&r(p.ENOENT(t)),n._readable.stat(t,e,(function(t,e){e&&((e=e.clone()).mode=Tr(e.mode)),r(t,e)}))):r(i,o)}))},e.prototype.statSync=function(t,e){this.checkInitialized();try{return this._writable.statSync(t,e)}catch(n){if(this._deletedFiles[t])throw p.ENOENT(t);var r=this._readable.statSync(t,e).clone();return r.mode=Tr(r.mode),r}},e.prototype.open=function(t,e,r,n){var i=this;this.checkInitAsync(n)&&!this.checkPathAsync(t,n)&&this.stat(t,!1,(function(o,a){if(!a)return e.pathNotExistsAction()===f.CREATE_FILE?i.createParentDirectoriesAsync(t,(function(o){return o?n(o):i._writable.open(t,e,r,n)})):n(p.ENOENT(t));switch(e.pathExistsAction()){case f.TRUNCATE_FILE:return i.createParentDirectoriesAsync(t,(function(o){if(o)return n(o);i._writable.open(t,e,r,n)}));case f.NOP:return i._writable.exists(t,(function(o){o?i._writable.open(t,e,r,n):((a=a.clone()).mode=r,i._readable.readFile(t,null,xr("r"),(function(r,o){if(r)return n(r);-1===a.size&&(a.size=o.length);var s=new Dr(i,t,e,a,o);n(null,s)})))}));default:return n(p.EEXIST(t))}}))},e.prototype.openSync=function(t,e,r){if(this.checkInitialized(),this.checkPath(t),t===Rr)throw p.EPERM("Cannot open deletion log.");if(!this.existsSync(t)){if(e.pathNotExistsAction()===f.CREATE_FILE)return this.createParentDirectories(t),this._writable.openSync(t,e,r);throw p.ENOENT(t)}switch(e.pathExistsAction()){case f.TRUNCATE_FILE:return this.createParentDirectories(t),this._writable.openSync(t,e,r);case f.NOP:if(this._writable.existsSync(t))return this._writable.openSync(t,e,r);var n=this._readable.readFileSync(t,null,xr("r")),i=this._readable.statSync(t,!1).clone();return i.mode=r,new Dr(this,t,e,i,n);default:throw p.EEXIST(t)}},e.prototype.unlink=function(t,e){var r=this;this.checkInitAsync(e)&&!this.checkPathAsync(t,e)&&this.exists(t,(function(n){if(!n)return e(p.ENOENT(t));r._writable.exists(t,(function(n){if(n)return r._writable.unlink(t,(function(n){if(n)return e(n);r.exists(t,(function(n){n&&r.deletePath(t),e(null)}))}));r.deletePath(t),e(null)}))}))},e.prototype.unlinkSync=function(t){if(this.checkInitialized(),this.checkPath(t),!this.existsSync(t))throw p.ENOENT(t);this._writable.existsSync(t)&&this._writable.unlinkSync(t),this.existsSync(t)&&this.deletePath(t)},e.prototype.rmdir=function(t,e){var r=this;if(this.checkInitAsync(e)){var n=function(){r.readdir(t,(function(n,i){return n?e(n):i.length?e(p.ENOTEMPTY(t)):(r.deletePath(t),void e(null))}))};this.exists(t,(function(i){if(!i)return e(p.ENOENT(t));r._writable.exists(t,(function(i){i?r._writable.rmdir(t,(function(i){if(i)return e(i);r._readable.exists(t,(function(t){t?n():e()}))})):n()}))}))}},e.prototype.rmdirSync=function(t){if(this.checkInitialized(),!this.existsSync(t))throw p.ENOENT(t);if(this._writable.existsSync(t)&&this._writable.rmdirSync(t),this.existsSync(t)){if(this.readdirSync(t).length>0)throw p.ENOTEMPTY(t);this.deletePath(t)}},e.prototype.mkdir=function(t,e,r){var n=this;this.checkInitAsync(r)&&this.exists(t,(function(i){if(i)return r(p.EEXIST(t));n.createParentDirectoriesAsync(t,(function(i){if(i)return r(i);n._writable.mkdir(t,e,r)}))}))},e.prototype.mkdirSync=function(t,e){if(this.checkInitialized(),this.existsSync(t))throw p.EEXIST(t);this.createParentDirectories(t),this._writable.mkdirSync(t,e)},e.prototype.readdir=function(t,e){var r=this;this.checkInitAsync(e)&&this.stat(t,!1,(function(n,i){return n?e(n):i.isDirectory()?void r._writable.readdir(t,(function(n,i){if(n&&"ENOENT"!==n.code)return e(n);!n&&i||(i=[]),r._readable.readdir(t,(function(n,o){!n&&o||(o=[]);var a={},s=i.concat(o.filter((function(e){return!r._deletedFiles[t+"/"+e]}))).filter((function(t){var e=!a[t];return a[t]=!0,e}));e(null,s)}))})):e(p.ENOTDIR(t))}))},e.prototype.readdirSync=function(t){var e=this;if(this.checkInitialized(),!this.statSync(t,!1).isDirectory())throw p.ENOTDIR(t);var r=[];try{r=r.concat(this._writable.readdirSync(t))}catch(t){}try{r=r.concat(this._readable.readdirSync(t).filter((function(r){return!e._deletedFiles[t+"/"+r]})))}catch(t){}var n={};return r.filter((function(t){var e=!n[t];return n[t]=!0,e}))},e.prototype.exists=function(t,e){var r=this;this.checkInitialized(),this._writable.exists(t,(function(n){if(n)return e(!0);r._readable.exists(t,(function(n){e(n&&!0!==r._deletedFiles[t])}))}))},e.prototype.existsSync=function(t){return this.checkInitialized(),this._writable.existsSync(t)||this._readable.existsSync(t)&&!0!==this._deletedFiles[t]},e.prototype.chmod=function(t,e,r,n){var i=this;this.checkInitAsync(n)&&this.operateOnWritableAsync(t,(function(o){if(o)return n(o);i._writable.chmod(t,e,r,n)}))},e.prototype.chmodSync=function(t,e,r){var n=this;this.checkInitialized(),this.operateOnWritable(t,(function(){n._writable.chmodSync(t,e,r)}))},e.prototype.chown=function(t,e,r,n,i){var o=this;this.checkInitAsync(i)&&this.operateOnWritableAsync(t,(function(a){if(a)return i(a);o._writable.chown(t,e,r,n,i)}))},e.prototype.chownSync=function(t,e,r,n){var i=this;this.checkInitialized(),this.operateOnWritable(t,(function(){i._writable.chownSync(t,e,r,n)}))},e.prototype.utimes=function(t,e,r,n){var i=this;this.checkInitAsync(n)&&this.operateOnWritableAsync(t,(function(o){if(o)return n(o);i._writable.utimes(t,e,r,n)}))},e.prototype.utimesSync=function(t,e,r){var n=this;this.checkInitialized(),this.operateOnWritable(t,(function(){n._writable.utimesSync(t,e,r)}))},e.prototype.deletePath=function(t){this._deletedFiles[t]=!0,this.updateLog("d"+t+"\n")},e.prototype.updateLog=function(t){var e=this;this._deleteLog+=t,this._deleteLogUpdatePending?this._deleteLogUpdateNeeded=!0:(this._deleteLogUpdatePending=!0,this._writable.writeFile(Rr,this._deleteLog,"utf8",y.getFileFlag("w"),420,(function(t){e._deleteLogUpdatePending=!1,t?e._deleteLogError=t:e._deleteLogUpdateNeeded&&(e._deleteLogUpdateNeeded=!1,e.updateLog(""))})))},e.prototype._reparseDeletionLog=function(){var t=this;this._deletedFiles={},this._deleteLog.split("\n").forEach((function(e){t._deletedFiles[e.slice(1)]="d"===e.slice(0,1)}))},e.prototype.checkInitialized=function(){if(!this._isInitialized)throw new p(a.EPERM,"OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it.");if(null!==this._deleteLogError){var t=this._deleteLogError;throw this._deleteLogError=null,t}},e.prototype.checkInitAsync=function(t){if(!this._isInitialized)return t(new p(a.EPERM,"OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it.")),!1;if(null!==this._deleteLogError){var e=this._deleteLogError;return this._deleteLogError=null,t(e),!1}return!0},e.prototype.checkPath=function(t){if(t===Rr)throw p.EPERM(t)},e.prototype.checkPathAsync=function(t,e){return t===Rr&&(e(p.EPERM(t)),!0)},e.prototype.createParentDirectoriesAsync=function(t,e){var r=u.dirname(t),n=[],i=this;function o(){if(!n.length)return e();var t=n.pop();i._readable.stat(t,!1,(function(r,n){if(!n)return e();i._writable.mkdir(t,n.mode,(function(t){if(t)return e(t);o()}))}))}this._writable.stat(r,!1,(function t(e,a){e?(n.push(r),r=u.dirname(r),i._writable.stat(r,!1,t)):o()}))},e.prototype.createParentDirectories=function(t){for(var e=this,r=u.dirname(t),n=[];!this._writable.existsSync(r);)n.push(r),r=u.dirname(r);(n=n.reverse()).forEach((function(t){e._writable.mkdirSync(t,e.statSync(t,!1).mode)}))},e.prototype.operateOnWritable=function(t,e){if(!this.existsSync(t))throw p.ENOENT(t);this._writable.existsSync(t)||this.copyToWritable(t),e()},e.prototype.operateOnWritableAsync=function(t,e){var r=this;this.exists(t,(function(n){if(!n)return e(p.ENOENT(t));r._writable.exists(t,(function(n){if(!n)return r.copyToWritableAsync(t,e);e()}))}))},e.prototype.copyToWritable=function(t){var e=this.statSync(t,!1);e.isDirectory()?this._writable.mkdirSync(t,e.mode):this.writeFileSync(t,this._readable.readFileSync(t,null,xr("r")),null,xr("w"),this.statSync(t,!1).mode)},e.prototype.copyToWritableAsync=function(t,e){var r=this;this.stat(t,!1,(function(n,i){return n?e(n):i.isDirectory()?r._writable.mkdir(t,i.mode,e):void r._readable.readFile(t,null,xr("r"),(function(n,o){if(n)return e(n);r.writeFile(t,o,null,xr("w"),i.mode,e)}))}))},e}(X),jr=function(t){function e(r,n,i){void 0===i&&(i=!0),t.call(this,new Pr(r,n)),N(i,e.Name,{readable:"readable file system",writable:"writable file system"})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){try{var n=new e(t.writable,t.readable,!1);n.initialize((function(t){r(t,n)}),!1)}catch(t){r(t)}},e.isAvailable=function(){return Pr.isAvailable()},e.prototype.initialize=function(e,r){void 0===r&&(r=!0),r&&console.warn("[OverlayFS] OverlayFS.initialize() is deprecated and will be removed in the next major release. Please use 'OverlayFS.Create({readable: readable file system instance, writable: writable file system instance}, cb)' to create and initialize OverlayFS instances."),t.prototype.initialize.call(this,e)},e.prototype.getOverlayedFileSystems=function(){return t.prototype.getFSUnlocked.call(this).getOverlayedFileSystems()},e.prototype.unwrap=function(){return t.prototype.getFSUnlocked.call(this)},e}(Nr);jr.Name="OverlayFS",jr.Options={writable:{type:"object",description:"The file system to write modified files to."},readable:{type:"object",description:"The file system that initially populates this file system."}},function(t){t[t.CB=0]="CB",t[t.FD=1]="FD",t[t.API_ERROR=2]="API_ERROR",t[t.STATS=3]="STATS",t[t.PROBE=4]="PROBE",t[t.FILEFLAG=5]="FILEFLAG",t[t.BUFFER=6]="BUFFER",t[t.ERROR=7]="ERROR"}(Lr||(Lr={}));var Ur=function(){this._callbacks={},this._nextId=0};Ur.prototype.toRemoteArg=function(t){var e=this._nextId++;return this._callbacks[e]=t,{type:Lr.CB,id:e}},Ur.prototype.toLocalArg=function(t){var e=this._callbacks[t];return delete this._callbacks[t],e};var Mr=function(){this._fileDescriptors={},this._nextId=0};function Cr(t){return{type:Lr.API_ERROR,errorData:Yr(t.writeToBuffer())}}function Br(t){return p.fromBuffer(Xr(t.errorData))}function zr(t){return{type:Lr.ERROR,name:t.name,message:t.message,stack:t.stack}}function qr(t){var e=Me[t.name];"function"!=typeof e&&(e=Error);var r=new e(t.message);return r.stack=t.stack,r}function Wr(t){return{type:Lr.STATS,statsData:Yr(t.toBuffer())}}function Vr(t){return d.fromBuffer(Xr(t.statsData))}function Hr(t){return{type:Lr.FILEFLAG,flagStr:t.getFlagString()}}function Zr(t){return y.getFileFlag(t.flagStr)}function Yr(t){return D(t)}function Xr(t){return M(t)}function Jr(t){return{type:Lr.BUFFER,data:Yr(t)}}function Gr(t){return Xr(t.data)}Mr.prototype.toRemoteArg=function(e,r,n,i){var o,a,s=this._nextId++;this._fileDescriptors[s]=e,e.stat((function(u,c){u?i(u):(a=Yr(c.toBuffer()),n.isReadable()?e.read(t.alloc(c.size),0,c.size,0,(function(t,e,u){t?i(t):(o=Yr(u),i(null,{type:Lr.FD,id:s,data:o,stat:a,path:r,flag:n.getFlagString()}))})):i(null,{type:Lr.FD,id:s,data:new ArrayBuffer(0),stat:a,path:r,flag:n.getFlagString()}))}))},Mr.prototype.applyFdAPIRequest=function(t,e){var r=this,n=t.args[0];this._applyFdChanges(n,(function(i,o){i?e(i):o[t.method]((function(i){"close"===t.method&&delete r._fileDescriptors[n.id],e(i)}))}))},Mr.prototype._applyFdChanges=function(t,e){var r=this._fileDescriptors[t.id],n=Xr(t.data),i=d.fromBuffer(Xr(t.stat)),o=y.getFileFlag(t.flag);o.isWriteable()?r.write(n,0,n.length,o.isAppendable()?r.getPos():0,(function(t){function a(){r.stat((function(t,n){t?e(t):n.mode!==i.mode?r.chmod(i.mode,(function(t){e(t,r)})):e(t,r)}))}t?e(t):o.isAppendable()?a():r.truncate(n.length,(function(){a()}))})):e(null,r)};var Kr=function(t){function e(e,r,n,i,o,a){t.call(this,e,r,n,i,a),this._remoteFdId=o}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getRemoteFdId=function(){return this._remoteFdId},e.prototype.toRemoteArg=function(){return{type:Lr.FD,id:this._remoteFdId,data:Yr(this.getBuffer()),stat:Yr(this.getStats().toBuffer()),path:this.getPath(),flag:this.getFlag().getFlagString()}},e.prototype.sync=function(t){this._syncClose("sync",t)},e.prototype.close=function(t){this._syncClose("close",t)},e.prototype._syncClose=function(t,e){var r=this;this.isDirty()?this._fs.syncClose(t,this,(function(t){t||r.resetDirty(),e(t)})):e()},e}(K),$r=function(e){function r(t,n){var i=this;void 0===n&&(n=!0),e.call(this),this._callbackConverter=new Ur,this._isInitialized=!1,this._isReadOnly=!1,this._supportLinks=!1,this._supportProps=!1,this._worker=t,N(n,r.Name,{worker:"Web Worker instance"}),this._worker.addEventListener("message",(function(t){var e,r=t.data;if((e=r)&&"object"==typeof e&&e.hasOwnProperty("browserfsMessage")&&e.browserfsMessage){var n,o=r.args,a=new Array(o.length);for(n=0;n<a.length;n++)a[n]=i._argRemote2Local(o[n]);i._callbackConverter.toLocalArg(r.cbId).apply(null,a)}}))}return e&&(r.__proto__=e),r.prototype=Object.create(e&&e.prototype),r.prototype.constructor=r,r.Create=function(t,e){var n=new r(t.worker,!1);n.initialize((function(){e(null,n)}))},r.isAvailable=function(){return"undefined"!=typeof importScripts||"undefined"!=typeof Worker},r.attachRemoteListener=function(e){var r=new Mr;function n(e,n,i){"object"==typeof e?e instanceof d?i(null,Wr(e)):e instanceof p?i(null,Cr(e)):e instanceof G?i(null,r.toRemoteArg(e,n[0],n[1],i)):e instanceof y?i(null,Hr(e)):e instanceof t?i(null,Jr(e)):e instanceof Error?i(null,zr(e)):i(null,e):i(null,e)}function i(t,r){if(!t)return t;if("object"==typeof t){if("number"!=typeof t.type)return t;var i=t;switch(i.type){case Lr.CB:var o=t.id;return function(){var t,i,a=arguments,s=new Array(arguments.length),u=arguments.length;function c(t){u>0&&(u=-1,i={browserfsMessage:!0,cbId:o,args:[Cr(t)]},e.postMessage(i))}for(t=0;t<arguments.length;t++)!function(t,a){n(a,r,(function(r,n){s[t]=n,r?c(r):0==--u&&(i={browserfsMessage:!0,cbId:o,args:s},e.postMessage(i))}))}(t,a[t]);0===arguments.length&&(i={browserfsMessage:!0,cbId:o,args:s},e.postMessage(i))};case Lr.API_ERROR:return Br(i);case Lr.STATS:return Vr(i);case Lr.FILEFLAG:return Zr(i);case Lr.BUFFER:return Gr(i);case Lr.ERROR:return qr(i);default:return t}}return t}e.addEventListener("message",(function(t){var n,o,a=t.data;if((o=a)&&"object"==typeof o&&o.hasOwnProperty("browserfsMessage")&&o.browserfsMessage){var s=a.args,u=new Array(s.length);switch(a.method){case"close":case"sync":n=s[1],r.applyFdAPIRequest(a,(function(t){var r={browserfsMessage:!0,cbId:n.id,args:t?[Cr(t)]:[]};e.postMessage(r)}));break;case"probe":!function(){var t=I.getRootFS(),r=s[1],n={type:Lr.PROBE,isReadOnly:t.isReadOnly(),supportsLinks:t.supportsLinks(),supportsProps:t.supportsProps()},i={browserfsMessage:!0,cbId:r.id,args:[n]};e.postMessage(i)}();break;default:for(var c=0;c<s.length;c++)u[c]=i(s[c],u);var f=I.getRootFS();f[a.method].apply(f,u)}}}))},r.prototype.getName=function(){return r.Name},r.prototype.initialize=function(t){var e=this;if(this._isInitialized)t();else{var r={browserfsMessage:!0,method:"probe",args:[this._argLocal2Remote(z()),this._callbackConverter.toRemoteArg((function(r){e._isInitialized=!0,e._isReadOnly=r.isReadOnly,e._supportLinks=r.supportsLinks,e._supportProps=r.supportsProps,t()}))]};this._worker.postMessage(r)}},r.prototype.isReadOnly=function(){return this._isReadOnly},r.prototype.supportsSynch=function(){return!1},r.prototype.supportsLinks=function(){return this._supportLinks},r.prototype.supportsProps=function(){return this._supportProps},r.prototype.rename=function(t,e,r){this._rpc("rename",arguments)},r.prototype.stat=function(t,e,r){this._rpc("stat",arguments)},r.prototype.open=function(t,e,r,n){this._rpc("open",arguments)},r.prototype.unlink=function(t,e){this._rpc("unlink",arguments)},r.prototype.rmdir=function(t,e){this._rpc("rmdir",arguments)},r.prototype.mkdir=function(t,e,r){this._rpc("mkdir",arguments)},r.prototype.readdir=function(t,e){this._rpc("readdir",arguments)},r.prototype.exists=function(t,e){this._rpc("exists",arguments)},r.prototype.realpath=function(t,e,r){this._rpc("realpath",arguments)},r.prototype.truncate=function(t,e,r){this._rpc("truncate",arguments)},r.prototype.readFile=function(t,e,r,n){this._rpc("readFile",arguments)},r.prototype.writeFile=function(t,e,r,n,i,o){this._rpc("writeFile",arguments)},r.prototype.appendFile=function(t,e,r,n,i,o){this._rpc("appendFile",arguments)},r.prototype.chmod=function(t,e,r,n){this._rpc("chmod",arguments)},r.prototype.chown=function(t,e,r,n,i){this._rpc("chown",arguments)},r.prototype.utimes=function(t,e,r,n){this._rpc("utimes",arguments)},r.prototype.link=function(t,e,r){this._rpc("link",arguments)},r.prototype.symlink=function(t,e,r,n){this._rpc("symlink",arguments)},r.prototype.readlink=function(t,e){this._rpc("readlink",arguments)},r.prototype.syncClose=function(t,e,r){this._worker.postMessage({browserfsMessage:!0,method:t,args:[e.toRemoteArg(),this._callbackConverter.toRemoteArg(r)]})},r.prototype._argRemote2Local=function(t){if(!t)return t;if("object"==typeof t){if("number"!=typeof t.type)return t;var e=t;switch(e.type){case Lr.API_ERROR:return Br(e);case Lr.FD:var r=e;return new Kr(this,r.path,y.getFileFlag(r.flag),d.fromBuffer(Xr(r.stat)),r.id,Xr(r.data));case Lr.STATS:return Vr(e);case Lr.FILEFLAG:return Zr(e);case Lr.BUFFER:return Gr(e);case Lr.ERROR:return qr(e);default:return t}}return t},r.prototype._rpc=function(t,e){for(var r=new Array(e.length),n=0;n<e.length;n++)r[n]=this._argLocal2Remote(e[n]);var i={browserfsMessage:!0,method:t,args:r};this._worker.postMessage(i)},r.prototype._argLocal2Remote=function(e){if(!e)return e;switch(typeof e){case"object":return e instanceof d?Wr(e):e instanceof p?Cr(e):e instanceof Kr?e.toRemoteArg():e instanceof y?Hr(e):e instanceof t?Jr(e):e instanceof Error?zr(e):"Unknown argument";case"function":return this._callbackConverter.toRemoteArg(e);default:return e}},r}(X);function Qr(t,e,r){var n=new XMLHttpRequest;n.open("HEAD",e,t),n.onreadystatechange=function(t){if(4===n.readyState){if(200!==n.status)return r(new p(n.status,"XHR HEAD error."));try{return r(null,parseInt(n.getResponseHeader("Content-Length")||"-1",10))}catch(t){return r(new p(a.EIO,"XHR HEAD error: Could not read content-length."))}}},n.send()}$r.Name="WorkerFS",$r.Options={worker:{type:"object",description:"The target worker that you want to connect to, or the current worker if in a worker context.",validator:function(t,e){t.postMessage?e():e(new p(a.EINVAL,"option must be a Web Worker instance."))}}};var tn=function(e,r,n){var i=new XMLHttpRequest;i.open("GET",e,!0);var o=!0;switch(r){case"buffer":i.responseType="arraybuffer";break;case"json":try{i.responseType="json",o="json"===i.responseType}catch(t){o=!1}break;default:return n(new p(a.EINVAL,"Invalid download type: "+r))}i.onreadystatechange=function(e){if(4===i.readyState){if(200!==i.status)return n(new p(i.status,"XHR error."));switch(r){case"buffer":return n(null,i.response?t.from(i.response):z());case"json":return n(null,o?i.response:JSON.parse(i.responseText))}}},i.send()},en=R&&"undefined"!=typeof Blob?function(e,r){var n,i,o=new XMLHttpRequest;switch(o.open("GET",e,!1),r){case"buffer":o.responseType="arraybuffer";break;case"json":break;default:throw new p(a.EINVAL,"Invalid download type: "+r)}if(o.onreadystatechange=function(e){if(4===o.readyState)if(200===o.status)switch(r){case"buffer":n=t.from(o.response);break;case"json":n=JSON.parse(o.response)}else i=new p(o.status,"XHR error.")},o.send(),i)throw i;return n}:function(e,r){var n=new XMLHttpRequest;n.open("GET",e,!1);var i=null,o=null;if(n.overrideMimeType("text/plain; charset=x-user-defined"),n.onreadystatechange=function(e){if(4===n.readyState){if(200!==n.status)return void(o=new p(n.status,"XHR error."));switch(r){case"buffer":var a=n.responseText;i=t.alloc(a.length);for(var s=0;s<a.length;s++)i[s]=a.charCodeAt(s);return;case"json":return void(i=JSON.parse(n.responseText))}}},n.send(),o)throw o;return i},rn=function(){this._index={},this.addPath("/",new on)};rn.fromListing=function(t){var e=new rn,r=new on;e._index["/"]=r;for(var n=[["",t,r]];n.length>0;){var i=void 0,o=n.pop(),a=o[0],s=o[1],u=o[2];for(var c in s)if(s.hasOwnProperty(c)){var f=s[c],p=a+"/"+c;f?(e._index[p]=i=new on,n.push([p,f,i])):i=new nn(new d(h.FILE,-1,365)),u&&(u._ls[c]=i)}}return e},rn.prototype.fileIterator=function(t){var e=this;for(var r in e._index)if(e._index.hasOwnProperty(r))for(var n=e._index[r],i=0,o=n.getListing();i<o.length;i+=1){var a=o[i],s=n.getItem(a);an(s)&&t(s.getData())}},rn.prototype.addPath=function(t,e){if(!e)throw new Error("Inode must be specified");if("/"!==t[0])throw new Error("Path must be absolute, got: "+t);if(this._index.hasOwnProperty(t))return this._index[t]===e;var r=this._split_path(t),n=r[0],i=r[1],o=this._index[n];return!(void 0===o&&"/"!==t&&(o=new on,!this.addPath(n,o))||"/"!==t&&!o.addItem(i,e)||(sn(e)&&(this._index[t]=e),0))},rn.prototype.addPathFast=function(t,e){var r=t.lastIndexOf("/"),n=0===r?"/":t.substring(0,r),i=t.substring(r+1),o=this._index[n];return void 0===o&&(o=new on,this.addPathFast(n,o)),!!o.addItem(i,e)&&(e.isDir()&&(this._index[t]=e),!0)},rn.prototype.removePath=function(t){var e=this._split_path(t),r=e[0],n=e[1],i=this._index[r];if(void 0===i)return null;var o=i.remItem(n);if(null===o)return null;if(sn(o)){for(var a=0,s=o.getListing();a<s.length;a+=1){var u=s[a];this.removePath(t+"/"+u)}"/"!==t&&delete this._index[t]}return o},rn.prototype.ls=function(t){var e=this._index[t];return void 0===e?null:e.getListing()},rn.prototype.getInode=function(t){var e=this._split_path(t),r=e[0],n=e[1],i=this._index[r];return void 0===i?null:r===t?i:i.getItem(n)},rn.prototype._split_path=function(t){var e=u.dirname(t);return[e,t.substr(e.length+("/"===e?0:1))]};var nn=function(t){this.data=t};nn.prototype.isFile=function(){return!0},nn.prototype.isDir=function(){return!1},nn.prototype.getData=function(){return this.data},nn.prototype.setData=function(t){this.data=t};var on=function(t){void 0===t&&(t=null),this.data=t,this._ls={}};function an(t){return!!t&&t.isFile()}function sn(t){return!!t&&t.isDir()}on.prototype.isFile=function(){return!1},on.prototype.isDir=function(){return!0},on.prototype.getData=function(){return this.data},on.prototype.getStats=function(){return new d(h.DIRECTORY,4096,365)},on.prototype.getListing=function(){return Object.keys(this._ls)},on.prototype.getItem=function(t){return this._ls[t]||null},on.prototype.addItem=function(t,e){return!(t in this._ls)&&(this._ls[t]=e,!0)},on.prototype.remItem=function(t){var e=this._ls[t];return void 0===e?null:(delete this._ls[t],e)};var un=function(t){function e(r,n,i){void 0===n&&(n=""),void 0===i&&(i=!0),t.call(this),r||(r="index.json"),n.length>0&&"/"!==n.charAt(n.length-1)&&(n+="/"),this.prefixUrl=n;var o=null;if("string"==typeof r){if(!(o=this._requestFileSync(r,"json")))throw new Error("Unable to find listing at URL: ${listingUrlOrObj}")}else o=r;N(i,e.Name,{index:"string"==typeof r?r:"file index as an object",baseUrl:n}),this._index=rn.fromListing(o)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){void 0===t.index&&(t.index="index.json"),"string"==typeof t.index?e.FromURL(t.index,r,t.baseUrl,!1):r(null,new e(t.index,t.baseUrl,!1))},e.isAvailable=function(){return"undefined"!=typeof XMLHttpRequest&&null!==XMLHttpRequest},e.FromURL=function(t,r,n,i){void 0===n&&(n=t.slice(0,t.lastIndexOf("/")+1)),void 0===i&&(i=!0),i&&console.warn("[XmlHttpRequest] XmlHttpRequest.FromURL() is deprecated and will be removed in the next major release. Please use 'XmlHttpRequest.Create({ index: \""+t+'", baseUrl: "'+n+"\" }, cb)' instead."),tn(t,"json",(function(t,i){t?r(t):r(null,new e(i,n,!1))}))},e.prototype.empty=function(){this._index.fileIterator((function(t){t.fileData=null}))},e.prototype.getName=function(){return e.Name},e.prototype.diskSpace=function(t,e){e(0,0)},e.prototype.isReadOnly=function(){return!0},e.prototype.supportsLinks=function(){return!1},e.prototype.supportsProps=function(){return!1},e.prototype.supportsSynch=function(){return!0},e.prototype.preloadFile=function(t,e){var r=this._index.getInode(t);if(!an(r))throw p.EISDIR(t);if(null===r)throw p.ENOENT(t);var n=r.getData();n.size=e.length,n.fileData=e},e.prototype.stat=function(t,e,r){var n,i=this._index.getInode(t);if(null===i)return r(p.ENOENT(t));an(i)?(n=i.getData()).size<0?this._requestFileSizeAsync(t,(function(t,e){if(t)return r(t);n.size=e,r(null,n.clone())})):r(null,n.clone()):sn(i)?(n=i.getStats(),r(null,n)):r(p.FileError(a.EINVAL,t))},e.prototype.statSync=function(t,e){var r,n=this._index.getInode(t);if(null===n)throw p.ENOENT(t);if(an(n))(r=n.getData()).size<0&&(r.size=this._requestFileSizeSync(t));else{if(!sn(n))throw p.FileError(a.EINVAL,t);r=n.getStats()}return r},e.prototype.open=function(t,e,r,n){if(e.isWriteable())return n(new p(a.EPERM,t));var i=this,o=this._index.getInode(t);if(null===o)return n(p.ENOENT(t));if(!an(o))return n(p.EISDIR(t));var s=o.getData();switch(e.pathExistsAction()){case f.THROW_EXCEPTION:case f.TRUNCATE_FILE:return n(p.EEXIST(t));case f.NOP:if(s.fileData)return n(null,new $(i,t,e,s.clone(),s.fileData));this._requestFileAsync(t,"buffer",(function(r,o){return r?n(r):(s.size=o.length,s.fileData=o,n(null,new $(i,t,e,s.clone(),o)))}));break;default:return n(new p(a.EINVAL,"Invalid FileMode object."))}},e.prototype.openSync=function(t,e,r){if(e.isWriteable())throw new p(a.EPERM,t);var n=this._index.getInode(t);if(null===n)throw p.ENOENT(t);if(!an(n))throw p.EISDIR(t);var i=n.getData();switch(e.pathExistsAction()){case f.THROW_EXCEPTION:case f.TRUNCATE_FILE:throw p.EEXIST(t);case f.NOP:if(i.fileData)return new $(this,t,e,i.clone(),i.fileData);var o=this._requestFileSync(t,"buffer");return i.size=o.length,i.fileData=o,new $(this,t,e,i.clone(),o);default:throw new p(a.EINVAL,"Invalid FileMode object.")}},e.prototype.readdir=function(t,e){try{e(null,this.readdirSync(t))}catch(t){e(t)}},e.prototype.readdirSync=function(t){var e=this._index.getInode(t);if(null===e)throw p.ENOENT(t);if(sn(e))return e.getListing();throw p.ENOTDIR(t)},e.prototype.readFile=function(t,e,r,n){var i=n;this.open(t,r,420,(function(t,r){if(t)return n(t);n=function(t,e){r.close((function(r){return t||(t=r),i(t,e)}))};var o=r.getBuffer();null===e?n(t,C(o)):function(t,e,r){try{r(null,t.toString(e))}catch(t){r(t)}}(o,e,n)}))},e.prototype.readFileSync=function(t,e,r){var n=this.openSync(t,r,420);try{var i=n.getBuffer();return null===e?C(i):i.toString(e)}finally{n.closeSync()}},e.prototype.getXhrPath=function(t){return"/"===t.charAt(0)&&(t=t.slice(1)),this.prefixUrl+t},e.prototype._requestFileAsync=function(t,e,r){tn(this.getXhrPath(t),e,r)},e.prototype._requestFileSync=function(t,e){return en(this.getXhrPath(t),e)},e.prototype._requestFileSizeAsync=function(t,e){!function(t,e){Qr(!0,t,e)}(this.getXhrPath(t),e)},e.prototype._requestFileSizeSync=function(t){return e=this.getXhrPath(t),r=-1,Qr(!1,e,(function(t,e){if(t)throw t;r=e})),r;var e,r},e}(X);un.Name="XmlHttpRequest",un.Options={index:{type:["string","object"],optional:!0,description:"URL to a file index as a JSON file or the file index object itself, generated with the make_xhrfs_index script. Defaults to `index.json`."},baseUrl:{type:"string",optional:!0,description:"Used as the URL prefix for fetched files. Default: Fetch files relative to the index."}};var cn=function(){};cn.str2byte=function(t,e){for(var r=t.length>e.length?e.length:t.length,n=0;n<r;n++){var i=t.charCodeAt(n);if(i>127){var o=cn.extendedChars.indexOf(t.charAt(n));o>-1&&(i=o+128)}e[i]=n}return r},cn.byte2str=function(t){for(var e=new Array(t.length),r=0;r<t.length;r++){var n=t[r];e[r]=n>127?cn.extendedChars[n-128]:String.fromCharCode(n)}return e.join("")},cn.byteLength=function(t){return t.length},cn.extendedChars=["Ç","ü","é","â","ä","à","å","ç","ê","ë","è","ï","î","ì","Ä","Å","É","æ","Æ","ô","ö","ò","û","ù","ÿ","Ö","Ü","ø","£","Ø","×","ƒ","á","í","ó","ú","ñ","Ñ","ª","º","¿","®","¬","½","¼","¡","«","»","_","_","_","¦","¦","Á","Â","À","©","¦","¦","+","+","¢","¥","+","+","-","-","+","-","+","ã","Ã","+","+","-","-","¦","-","+","¤","ð","Ð","Ê","Ë","È","i","Í","Î","Ï","+","+","_","_","¦","Ì","_","Ó","ß","Ô","Ò","õ","Õ","µ","þ","Þ","Ú","Û","Ù","ý","Ý","¯","´","­","±","_","¾","¶","§","÷","¸","°","¨","·","¹","³","²","_"," "];var fn,pn,ln=r(31).inflateRaw,hn={};function yn(t,e){return new Date(1980+(e>>9),(e>>5&15)-1,31&e,t>>11,t>>5&63,31&t)}function dn(t,e,r,n){return 0===n?"":e?t.toString("utf8",r,r+n):cn.byte2str(t.slice(r,r+n))}!function(t){t[t.MSDOS=0]="MSDOS",t[t.AMIGA=1]="AMIGA",t[t.OPENVMS=2]="OPENVMS",t[t.UNIX=3]="UNIX",t[t.VM_CMS=4]="VM_CMS",t[t.ATARI_ST=5]="ATARI_ST",t[t.OS2_HPFS=6]="OS2_HPFS",t[t.MAC=7]="MAC",t[t.Z_SYSTEM=8]="Z_SYSTEM",t[t.CP_M=9]="CP_M",t[t.NTFS=10]="NTFS",t[t.MVS=11]="MVS",t[t.VSE=12]="VSE",t[t.ACORN_RISC=13]="ACORN_RISC",t[t.VFAT=14]="VFAT",t[t.ALT_MVS=15]="ALT_MVS",t[t.BEOS=16]="BEOS",t[t.TANDEM=17]="TANDEM",t[t.OS_400=18]="OS_400",t[t.OSX=19]="OSX"}(fn||(fn={})),function(t){t[t.STORED=0]="STORED",t[t.SHRUNK=1]="SHRUNK",t[t.REDUCED_1=2]="REDUCED_1",t[t.REDUCED_2=3]="REDUCED_2",t[t.REDUCED_3=4]="REDUCED_3",t[t.REDUCED_4=5]="REDUCED_4",t[t.IMPLODE=6]="IMPLODE",t[t.DEFLATE=8]="DEFLATE",t[t.DEFLATE64=9]="DEFLATE64",t[t.TERSE_OLD=10]="TERSE_OLD",t[t.BZIP2=12]="BZIP2",t[t.LZMA=14]="LZMA",t[t.TERSE_NEW=18]="TERSE_NEW",t[t.LZ77=19]="LZ77",t[t.WAVPACK=97]="WAVPACK",t[t.PPMD=98]="PPMD"}(pn||(pn={}));var gn=function(t){if(this.data=t,67324752!==t.readUInt32LE(0))throw new p(a.EINVAL,"Invalid Zip file: Local file header has invalid signature: "+this.data.readUInt32LE(0))};gn.prototype.versionNeeded=function(){return this.data.readUInt16LE(4)},gn.prototype.flags=function(){return this.data.readUInt16LE(6)},gn.prototype.compressionMethod=function(){return this.data.readUInt16LE(8)},gn.prototype.lastModFileTime=function(){return yn(this.data.readUInt16LE(10),this.data.readUInt16LE(12))},gn.prototype.rawLastModFileTime=function(){return this.data.readUInt32LE(10)},gn.prototype.crc32=function(){return this.data.readUInt32LE(14)},gn.prototype.fileNameLength=function(){return this.data.readUInt16LE(26)},gn.prototype.extraFieldLength=function(){return this.data.readUInt16LE(28)},gn.prototype.fileName=function(){return dn(this.data,this.useUTF8(),30,this.fileNameLength())},gn.prototype.extraField=function(){var t=30+this.fileNameLength();return this.data.slice(t,t+this.extraFieldLength())},gn.prototype.totalSize=function(){return 30+this.fileNameLength()+this.extraFieldLength()},gn.prototype.useUTF8=function(){return 2048==(2048&this.flags())};var vn=function(t,e,r){this.header=t,this.record=e,this.data=r};vn.prototype.decompress=function(){var t=this.header.compressionMethod(),e=hn[t];if(e)return e(this.data,this.record.compressedSize(),this.record.uncompressedSize(),this.record.flag());var r=pn[t];throw r||(r="Unknown: "+t),new p(a.EINVAL,"Invalid compression method on file '"+this.header.fileName()+"': "+r)},vn.prototype.getHeader=function(){return this.header},vn.prototype.getRecord=function(){return this.record},vn.prototype.getRawData=function(){return this.data};var mn=function(t){this.data=t};mn.prototype.crc32=function(){return this.data.readUInt32LE(0)},mn.prototype.compressedSize=function(){return this.data.readUInt32LE(4)},mn.prototype.uncompressedSize=function(){return this.data.readUInt32LE(8)};var wn=function(t){if(this.data=t,134630224!==this.data.readUInt32LE(0))throw new p(a.EINVAL,"Invalid archive extra data record signature: "+this.data.readUInt32LE(0))};wn.prototype.length=function(){return this.data.readUInt32LE(4)},wn.prototype.extraFieldData=function(){return this.data.slice(8,8+this.length())};var _n=function(t){if(this.data=t,84233040!==this.data.readUInt32LE(0))throw new p(a.EINVAL,"Invalid digital signature signature: "+this.data.readUInt32LE(0))};_n.prototype.size=function(){return this.data.readUInt16LE(4)},_n.prototype.signatureData=function(){return this.data.slice(6,6+this.size())};var bn=function(t,e){if(this.zipData=t,this.data=e,33639248!==this.data.readUInt32LE(0))throw new p(a.EINVAL,"Invalid Zip file: Central directory record has invalid signature: "+this.data.readUInt32LE(0));this._filename=this.produceFilename()};bn.prototype.versionMadeBy=function(){return this.data.readUInt16LE(4)},bn.prototype.versionNeeded=function(){return this.data.readUInt16LE(6)},bn.prototype.flag=function(){return this.data.readUInt16LE(8)},bn.prototype.compressionMethod=function(){return this.data.readUInt16LE(10)},bn.prototype.lastModFileTime=function(){return yn(this.data.readUInt16LE(12),this.data.readUInt16LE(14))},bn.prototype.rawLastModFileTime=function(){return this.data.readUInt32LE(12)},bn.prototype.crc32=function(){return this.data.readUInt32LE(16)},bn.prototype.compressedSize=function(){return this.data.readUInt32LE(20)},bn.prototype.uncompressedSize=function(){return this.data.readUInt32LE(24)},bn.prototype.fileNameLength=function(){return this.data.readUInt16LE(28)},bn.prototype.extraFieldLength=function(){return this.data.readUInt16LE(30)},bn.prototype.fileCommentLength=function(){return this.data.readUInt16LE(32)},bn.prototype.diskNumberStart=function(){return this.data.readUInt16LE(34)},bn.prototype.internalAttributes=function(){return this.data.readUInt16LE(36)},bn.prototype.externalAttributes=function(){return this.data.readUInt32LE(38)},bn.prototype.headerRelativeOffset=function(){return this.data.readUInt32LE(42)},bn.prototype.produceFilename=function(){return dn(this.data,this.useUTF8(),46,this.fileNameLength()).replace(/\\/g,"/")},bn.prototype.fileName=function(){return this._filename},bn.prototype.rawFileName=function(){return this.data.slice(46,46+this.fileNameLength())},bn.prototype.extraField=function(){var t=44+this.fileNameLength();return this.data.slice(t,t+this.extraFieldLength())},bn.prototype.fileComment=function(){var t=46+this.fileNameLength()+this.extraFieldLength();return dn(this.data,this.useUTF8(),t,this.fileCommentLength())},bn.prototype.rawFileComment=function(){var t=46+this.fileNameLength()+this.extraFieldLength();return this.data.slice(t,t+this.fileCommentLength())},bn.prototype.totalSize=function(){return 46+this.fileNameLength()+this.extraFieldLength()+this.fileCommentLength()},bn.prototype.isDirectory=function(){var t=this.fileName();return!!(16&this.externalAttributes())||"/"===t.charAt(t.length-1)},bn.prototype.isFile=function(){return!this.isDirectory()},bn.prototype.useUTF8=function(){return 2048==(2048&this.flag())},bn.prototype.isEncrypted=function(){return 1==(1&this.flag())},bn.prototype.getFileData=function(){var t=this.headerRelativeOffset(),e=new gn(this.zipData.slice(t));return new vn(e,this,this.zipData.slice(t+e.totalSize()))},bn.prototype.getData=function(){return this.getFileData().decompress()},bn.prototype.getRawData=function(){return this.getFileData().getRawData()},bn.prototype.getStats=function(){return new d(h.FILE,this.uncompressedSize(),365,new Date,this.lastModFileTime())};var Sn=function(t){if(this.data=t,101010256!==this.data.readUInt32LE(0))throw new p(a.EINVAL,"Invalid Zip file: End of central directory record has invalid signature: "+this.data.readUInt32LE(0))};Sn.prototype.diskNumber=function(){return this.data.readUInt16LE(4)},Sn.prototype.cdDiskNumber=function(){return this.data.readUInt16LE(6)},Sn.prototype.cdDiskEntryCount=function(){return this.data.readUInt16LE(8)},Sn.prototype.cdTotalEntryCount=function(){return this.data.readUInt16LE(10)},Sn.prototype.cdSize=function(){return this.data.readUInt32LE(12)},Sn.prototype.cdOffset=function(){return this.data.readUInt32LE(16)},Sn.prototype.cdZipCommentLength=function(){return this.data.readUInt16LE(20)},Sn.prototype.cdZipComment=function(){return dn(this.data,!0,22,this.cdZipCommentLength())},Sn.prototype.rawCdZipComment=function(){return this.data.slice(22,22+this.cdZipCommentLength())};var En=function(t,e,r,n){this.index=t,this.directoryEntries=e,this.eocd=r,this.data=n},On=function(t){function e(r,n,i){void 0===n&&(n=""),void 0===i&&(i=!0),t.call(this),this.name=n,this._index=new rn,this._directoryEntries=[],this._eocd=null,N(i,e.Name,{zipData:"zip data as a Buffer",name:n}),r instanceof En?(this._index=r.index,this._directoryEntries=r.directoryEntries,this._eocd=r.eocd,this.data=r.data):(this.data=r,this.populateIndex())}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){try{e.computeIndex(t.zipData,(function(n){var i=new e(n,t.name,!1);r(null,i)}),!1)}catch(t){r(t)}},e.isAvailable=function(){return!0},e.RegisterDecompressionMethod=function(t,e){hn[t]=e},e.computeIndex=function(t,r,n){void 0===n&&(n=!0),n&&console.warn("[ZipFS] ZipFS.computeIndex is now deprecated, and will be removed in the next major release. Please update your code to use 'ZipFS.Create({ zipData: zip file as a Buffer}, cb)' instead.");var i=new rn,o=e.getEOCD(t);if(o.diskNumber()!==o.cdDiskNumber())throw new p(a.EINVAL,"ZipFS does not support spanned zip files.");var s=o.cdOffset();if(4294967295===s)throw new p(a.EINVAL,"ZipFS does not support Zip64.");var u=s+o.cdSize();e.computeIndexResponsive(t,i,s,u,r,[],o)},e.getEOCD=function(t){for(var e=Math.min(65557,t.length-1),r=22;r<e;r++)if(101010256===t.readUInt32LE(t.length-r))return new Sn(t.slice(t.length-r));throw new p(a.EINVAL,"Invalid ZIP file: Could not locate End of Central Directory signature.")},e.addToIndex=function(t,e){var r=t.fileName();if("/"===r.charAt(0))throw new Error("WHY IS THIS ABSOLUTE");"/"===r.charAt(r.length-1)&&(r=r.substr(0,r.length-1)),t.isDirectory()?e.addPathFast("/"+r,new on(t)):e.addPathFast("/"+r,new nn(t))},e.computeIndexResponsive=function(t,r,n,i,o,a,s){if(n<i){for(var u=0;u++<200&&n<i;){var c=new bn(t,t.slice(n));e.addToIndex(c,r),n+=c.totalSize(),a.push(c)}Fr((function(){e.computeIndexResponsive(t,r,n,i,o,a,s)}))}else o(new En(r,a,s,t))},e.prototype.getName=function(){return e.Name+(""!==this.name?" "+this.name:"")},e.prototype.getCentralDirectoryEntry=function(t){var e=this._index.getInode(t);if(null===e)throw p.ENOENT(t);if(an(e))return e.getData();if(sn(e))return e.getData();throw p.EPERM("Invalid inode: "+e)},e.prototype.getCentralDirectoryEntryAt=function(t){var e=this._directoryEntries[t];if(!e)throw new RangeError("Invalid directory index: "+t+".");return e},e.prototype.getNumberOfCentralDirectoryEntries=function(){return this._directoryEntries.length},e.prototype.getEndOfCentralDirectory=function(){return this._eocd},e.prototype.diskSpace=function(t,e){e(this.data.length,0)},e.prototype.isReadOnly=function(){return!0},e.prototype.supportsLinks=function(){return!1},e.prototype.supportsProps=function(){return!1},e.prototype.supportsSynch=function(){return!0},e.prototype.statSync=function(t,e){var r,n=this._index.getInode(t);if(null===n)throw p.ENOENT(t);if(an(n))r=n.getData().getStats();else{if(!sn(n))throw new p(a.EINVAL,"Invalid inode.");r=n.getStats()}return r},e.prototype.openSync=function(t,e,r){if(e.isWriteable())throw new p(a.EPERM,t);var n=this._index.getInode(t);if(!n)throw p.ENOENT(t);if(!an(n))throw p.EISDIR(t);var i=n.getData(),o=i.getStats();switch(e.pathExistsAction()){case f.THROW_EXCEPTION:case f.TRUNCATE_FILE:throw p.EEXIST(t);case f.NOP:return new $(this,t,e,o,i.getData());default:throw new p(a.EINVAL,"Invalid FileMode object.")}},e.prototype.readdirSync=function(t){var e=this._index.getInode(t);if(e){if(sn(e))return e.getListing();throw p.ENOTDIR(t)}throw p.ENOENT(t)},e.prototype.readFileSync=function(t,e,r){var n=this.openSync(t,r,420);try{var i=n.getBuffer();return null===e?C(i):i.toString(e)}finally{n.closeSync()}},e.prototype.populateIndex=function(){var t=this,r=this._eocd=e.getEOCD(this.data);if(r.diskNumber()!==r.cdDiskNumber())throw new p(a.EINVAL,"ZipFS does not support spanned zip files.");var n=r.cdOffset();if(4294967295===n)throw new p(a.EINVAL,"ZipFS does not support Zip64.");for(var i=n+r.cdSize();n<i;){var o=new bn(t.data,t.data.slice(n));n+=o.totalSize(),e.addToIndex(o,t._index),t._directoryEntries.push(o)}},e}(J);function In(t,e,r){return t.toString("ascii",e,e+r).trim()}function kn(t,e,r){if(1===r)return String.fromCharCode(t[e]);for(var n=Math.floor(r/2),i=new Array(n),o=0;o<n;o++){var a=e+(o<<1);i[o]=String.fromCharCode(t[a+1]|t[a]<<8)}return i.join("")}function Fn(t,e){var r=parseInt(In(t,e,4),10),n=parseInt(In(t,e+4,2),10),i=parseInt(In(t,e+6,2),10),o=parseInt(In(t,e+8,2),10),a=parseInt(In(t,e+10,2),10),s=parseInt(In(t,e+12,2),10),u=parseInt(In(t,e+14,2),10);return new Date(r,n,i,o,a,s,100*u)}function An(t,e){var r=t[e],n=t[e+1],i=t[e+2],o=t[e+3],a=t[e+4],s=t[e+5];return new Date(r,n-1,i,o,a,s)}function Nn(t,e){var r=t.slice(e),n=new Mn(r);switch(n.signatureWord()){case 17221:return new Cn(r);case 20548:return new Bn(r);case 21328:return new zn(r);case 21332:return new qn(r);case 17746:return new Wn(r);case 17747:return new Vn(r);case 20568:return new Zn(r);case 20558:return new Yn(r);case 21324:return new Xn(r);case 20045:return new Gn(r);case 17228:return new Kn(r);case 20556:return new $n(r);case 21061:return new Qn(r);case 21574:return new ti(r);case 21318:return new ei(r);case 21074:return new Hn(r);default:return n}}function Rn(t,e,r,n){r-=4;for(var i=new Array;e<r;){var o=Nn(t,e),a=o.length();if(0===a)return i;if(e+=a,o instanceof qn)break;o instanceof Cn?i=i.concat(o.getEntries(n)):i.push(o)}return i}On.Name="ZipFS",On.Options={zipData:{type:"object",description:"The zip file as a Buffer object.",validator:q},name:{type:"string",optional:!0,description:"The name of the zip file (optional)."}},On.CompressionMethod=pn,On.RegisterDecompressionMethod(pn.DEFLATE,(function(t,e,r){return j(ln(t.slice(0,e),{chunkSize:r}))})),On.RegisterDecompressionMethod(pn.STORED,(function(t,e,r){return C(t,0,r)}));var Tn=function(t){this._data=t};Tn.prototype.type=function(){return this._data[0]},Tn.prototype.standardIdentifier=function(){return In(this._data,1,5)},Tn.prototype.version=function(){return this._data[6]},Tn.prototype.data=function(){return this._data.slice(7,2048)};var xn=function(t){function e(e){t.call(this,e),this._root=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.systemIdentifier=function(){return this._getString32(8)},e.prototype.volumeIdentifier=function(){return this._getString32(40)},e.prototype.volumeSpaceSize=function(){return this._data.readUInt32LE(80)},e.prototype.volumeSetSize=function(){return this._data.readUInt16LE(120)},e.prototype.volumeSequenceNumber=function(){return this._data.readUInt16LE(124)},e.prototype.logicalBlockSize=function(){return this._data.readUInt16LE(128)},e.prototype.pathTableSize=function(){return this._data.readUInt32LE(132)},e.prototype.locationOfTypeLPathTable=function(){return this._data.readUInt32LE(140)},e.prototype.locationOfOptionalTypeLPathTable=function(){return this._data.readUInt32LE(144)},e.prototype.locationOfTypeMPathTable=function(){return this._data.readUInt32BE(148)},e.prototype.locationOfOptionalTypeMPathTable=function(){return this._data.readUInt32BE(152)},e.prototype.rootDirectoryEntry=function(t){return null===this._root&&(this._root=this._constructRootDirectoryRecord(this._data.slice(156)),this._root.rootCheckForRockRidge(t)),this._root},e.prototype.volumeSetIdentifier=function(){return this._getString(190,128)},e.prototype.publisherIdentifier=function(){return this._getString(318,128)},e.prototype.dataPreparerIdentifier=function(){return this._getString(446,128)},e.prototype.applicationIdentifier=function(){return this._getString(574,128)},e.prototype.copyrightFileIdentifier=function(){return this._getString(702,38)},e.prototype.abstractFileIdentifier=function(){return this._getString(740,36)},e.prototype.bibliographicFileIdentifier=function(){return this._getString(776,37)},e.prototype.volumeCreationDate=function(){return Fn(this._data,813)},e.prototype.volumeModificationDate=function(){return Fn(this._data,830)},e.prototype.volumeExpirationDate=function(){return Fn(this._data,847)},e.prototype.volumeEffectiveDate=function(){return Fn(this._data,864)},e.prototype.fileStructureVersion=function(){return this._data[881]},e.prototype.applicationUsed=function(){return this._data.slice(883,1395)},e.prototype.reserved=function(){return this._data.slice(1395,2048)},e.prototype._getString32=function(t){return this._getString(t,32)},e}(Tn),Ln=function(t){function e(e){if(t.call(this,e),1!==this.type())throw new p(a.EIO,"Invalid primary volume descriptor.")}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.name=function(){return"ISO9660"},e.prototype._constructRootDirectoryRecord=function(t){return new jn(t,-1)},e.prototype._getString=function(t,e){return this._getString(t,e)},e}(xn),Dn=function(t){function e(e){if(t.call(this,e),2!==this.type())throw new p(a.EIO,"Invalid supplementary volume descriptor.");var r=this.escapeSequence(),n=r[2];if(37!==r[0]||47!==r[1]||64!==n&&67!==n&&69!==n)throw new p(a.EIO,"Unrecognized escape sequence for SupplementaryVolumeDescriptor: "+r.toString())}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.name=function(){return"Joliet"},e.prototype.escapeSequence=function(){return this._data.slice(88,120)},e.prototype._constructRootDirectoryRecord=function(t){return new Un(t,-1)},e.prototype._getString=function(t,e){return kn(this._data,t,e)},e}(xn),Pn=function(t,e){this._suEntries=null,this._fileOrDir=null,this._data=t,this._rockRidgeOffset=e};Pn.prototype.hasRockRidge=function(){return this._rockRidgeOffset>-1},Pn.prototype.getRockRidgeOffset=function(){return this._rockRidgeOffset},Pn.prototype.rootCheckForRockRidge=function(t){var e=this.getDirectory(t);this._rockRidgeOffset=e.getDotEntry(t)._getRockRidgeOffset(t),this._rockRidgeOffset>-1&&(this._fileOrDir=null)},Pn.prototype.length=function(){return this._data[0]},Pn.prototype.extendedAttributeRecordLength=function(){return this._data[1]},Pn.prototype.lba=function(){return 2048*this._data.readUInt32LE(2)},Pn.prototype.dataLength=function(){return this._data.readUInt32LE(10)},Pn.prototype.recordingDate=function(){return An(this._data,18)},Pn.prototype.fileFlags=function(){return this._data[25]},Pn.prototype.fileUnitSize=function(){return this._data[26]},Pn.prototype.interleaveGapSize=function(){return this._data[27]},Pn.prototype.volumeSequenceNumber=function(){return this._data.readUInt16LE(28)},Pn.prototype.identifier=function(){return this._getString(33,this._data[32])},Pn.prototype.fileName=function(t){if(this.hasRockRidge()){var e=this._rockRidgeFilename(t);if(null!==e)return e}var r=this.identifier();if(this.isDirectory(t))return r;var n=r.indexOf(";");return-1===n?r:"."===r[n-1]?r.slice(0,n-1):r.slice(0,n)},Pn.prototype.isDirectory=function(t){var e=!!(2&this.fileFlags());return!e&&this.hasRockRidge()&&(e=this.getSUEntries(t).filter((function(t){return t instanceof Kn})).length>0),e},Pn.prototype.isSymlink=function(t){return this.hasRockRidge()&&this.getSUEntries(t).filter((function(t){return t instanceof Xn})).length>0},Pn.prototype.getSymlinkPath=function(t){for(var e="",r=this.getSUEntries(t),n=this._getGetString(),i=0,o=r;i<o.length;i+=1){var a=o[i];if(a instanceof Xn){for(var s=0,u=a.componentRecords();s<u.length;s+=1){var c=u[s],f=c.flags();2&f?e+="./":4&f?e+="../":8&f?e+="/":(e+=c.content(n),1&f||(e+="/"))}if(!a.continueFlag())break}}return e.length>1&&"/"===e[e.length-1]?e.slice(0,e.length-1):e},Pn.prototype.getFile=function(t){if(this.isDirectory(t))throw new Error("Tried to get a File from a directory.");return null===this._fileOrDir&&(this._fileOrDir=t.slice(this.lba(),this.lba()+this.dataLength())),this._fileOrDir},Pn.prototype.getDirectory=function(t){if(!this.isDirectory(t))throw new Error("Tried to get a Directory from a file.");return null===this._fileOrDir&&(this._fileOrDir=this._constructDirectory(t)),this._fileOrDir},Pn.prototype.getSUEntries=function(t){return this._suEntries||this._constructSUEntries(t),this._suEntries},Pn.prototype._rockRidgeFilename=function(t){var e=this.getSUEntries(t).filter((function(t){return t instanceof Gn}));if(0===e.length||6&e[0].flags())return null;for(var r="",n=this._getGetString(),i=0,o=e;i<o.length;i+=1){var a=o[i];if(r+=a.name(n),!(1&a.flags()))break}return r},Pn.prototype._constructSUEntries=function(t){var e=33+this._data[32];e%2==1&&e++,e+=this._rockRidgeOffset,this._suEntries=Rn(this._data,e,this.length(),t)},Pn.prototype._getRockRidgeOffset=function(t){this._rockRidgeOffset=0;var e=this.getSUEntries(t);if(e.length>0){var r=e[0];if(r instanceof zn&&r.checkBytesPass())for(var n=1;n<e.length;n++){var i=e[n];if(i instanceof Hn||i instanceof Wn&&"IEEE_P1282"===i.extensionIdentifier())return r.bytesSkipped()}}return this._rockRidgeOffset=-1,-1};var jn=function(t){function e(e,r){t.call(this,e,r)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype._getString=function(t,e){return In(this._data,t,e)},e.prototype._constructDirectory=function(t){return new ni(this,t)},e.prototype._getGetString=function(){return In},e}(Pn),Un=function(t){function e(e,r){t.call(this,e,r)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype._getString=function(t,e){return kn(this._data,t,e)},e.prototype._constructDirectory=function(t){return new ii(this,t)},e.prototype._getGetString=function(){return kn},e}(Pn),Mn=function(t){this._data=t};Mn.prototype.signatureWord=function(){return this._data.readUInt16BE(0)},Mn.prototype.signatureWordString=function(){return In(this._data,0,2)},Mn.prototype.length=function(){return this._data[2]},Mn.prototype.suVersion=function(){return this._data[3]};var Cn=function(t){function e(e){t.call(this,e),this._entries=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.continuationLba=function(){return this._data.readUInt32LE(4)},e.prototype.continuationLbaOffset=function(){return this._data.readUInt32LE(12)},e.prototype.continuationLength=function(){return this._data.readUInt32LE(20)},e.prototype.getEntries=function(t){if(!this._entries){var e=2048*this.continuationLba()+this.continuationLbaOffset();this._entries=Rn(t,e,this.continuationLength(),t)}return this._entries},e}(Mn),Bn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Mn),zn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.checkBytesPass=function(){return 190===this._data[4]&&239===this._data[5]},e.prototype.bytesSkipped=function(){return this._data[6]},e}(Mn),qn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Mn),Wn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.identifierLength=function(){return this._data[4]},e.prototype.descriptorLength=function(){return this._data[5]},e.prototype.sourceLength=function(){return this._data[6]},e.prototype.extensionVersion=function(){return this._data[7]},e.prototype.extensionIdentifier=function(){return In(this._data,8,this.identifierLength())},e.prototype.extensionDescriptor=function(){return In(this._data,8+this.identifierLength(),this.descriptorLength())},e.prototype.extensionSource=function(){return In(this._data,8+this.identifierLength()+this.descriptorLength(),this.sourceLength())},e}(Mn),Vn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.extensionSequence=function(){return this._data[4]},e}(Mn),Hn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Mn),Zn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.mode=function(){return this._data.readUInt32LE(4)},e.prototype.fileLinks=function(){return this._data.readUInt32LE(12)},e.prototype.uid=function(){return this._data.readUInt32LE(20)},e.prototype.gid=function(){return this._data.readUInt32LE(28)},e.prototype.inode=function(){return this._data.readUInt32LE(36)},e}(Mn),Yn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.devTHigh=function(){return this._data.readUInt32LE(4)},e.prototype.devTLow=function(){return this._data.readUInt32LE(12)},e}(Mn),Xn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.flags=function(){return this._data[4]},e.prototype.continueFlag=function(){return 1&this.flags()},e.prototype.componentRecords=function(){for(var t=new Array,e=5;e<this.length();){var r=new Jn(this._data.slice(e));t.push(r),e+=r.length()}return t},e}(Mn),Jn=function(t){this._data=t};Jn.prototype.flags=function(){return this._data[0]},Jn.prototype.length=function(){return 2+this.componentLength()},Jn.prototype.componentLength=function(){return this._data[1]},Jn.prototype.content=function(t){return t(this._data,2,this.componentLength())};var Gn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.flags=function(){return this._data[4]},e.prototype.name=function(t){return t(this._data,5,this.length()-5)},e}(Mn),Kn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.childDirectoryLba=function(){return this._data.readUInt32LE(4)},e}(Mn),$n=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.parentDirectoryLba=function(){return this._data.readUInt32LE(4)},e}(Mn),Qn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Mn),ti=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.flags=function(){return this._data[4]},e.prototype.creation=function(){return 1&this.flags()?this._longFormDates()?Fn(this._data,5):An(this._data,5):null},e.prototype.modify=function(){if(2&this.flags()){var t=1&this.flags()?1:0;return this._longFormDates?Fn(this._data,5+17*t):An(this._data,5+7*t)}return null},e.prototype.access=function(){if(4&this.flags()){var t=1&this.flags()?1:0;return t+=2&this.flags()?1:0,this._longFormDates?Fn(this._data,5+17*t):An(this._data,5+7*t)}return null},e.prototype.backup=function(){if(16&this.flags()){var t=1&this.flags()?1:0;return t+=2&this.flags()?1:0,t+=4&this.flags()?1:0,this._longFormDates?Fn(this._data,5+17*t):An(this._data,5+7*t)}return null},e.prototype.expiration=function(){if(32&this.flags()){var t=1&this.flags()?1:0;return t+=2&this.flags()?1:0,t+=4&this.flags()?1:0,t+=16&this.flags()?1:0,this._longFormDates?Fn(this._data,5+17*t):An(this._data,5+7*t)}return null},e.prototype.effective=function(){if(64&this.flags()){var t=1&this.flags()?1:0;return t+=2&this.flags()?1:0,t+=4&this.flags()?1:0,t+=16&this.flags()?1:0,t+=32&this.flags()?1:0,this._longFormDates?Fn(this._data,5+17*t):An(this._data,5+7*t)}return null},e.prototype._longFormDates=function(){return!!this.flags()},e}(Mn),ei=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.virtualSizeHigh=function(){return this._data.readUInt32LE(4)},e.prototype.virtualSizeLow=function(){return this._data.readUInt32LE(12)},e.prototype.tableDepth=function(){return this._data[20]},e}(Mn),ri=function(t,e){var r=this;this._fileList=[],this._fileMap={},this._record=t;var n=t.lba(),i=n+t.dataLength();for(2&t.fileFlags()||(n=2048*t.getSUEntries(e).filter((function(t){return t instanceof Kn}))[0].childDirectoryLba(),i=1/0);n<i;)if(0!==e[n]){var o=r._constructDirectoryRecord(e.slice(n)),a=o.fileName(e);"\0"!==a&&""!==a?o.hasRockRidge()&&0!==o.getSUEntries(e).filter((function(t){return t instanceof Qn})).length||(r._fileMap[a]=o,r._fileList.push(a)):i===1/0&&(i=n+o.dataLength()),n+=o.length()}else n++};ri.prototype.getRecord=function(t){return this._fileMap[t]},ri.prototype.getFileList=function(){return this._fileList},ri.prototype.getDotEntry=function(t){return this._constructDirectoryRecord(t.slice(this._record.lba()))};var ni=function(t){function e(e,r){t.call(this,e,r)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype._constructDirectoryRecord=function(t){return new jn(t,this._record.getRockRidgeOffset())},e}(ri),ii=function(t){function e(e,r){t.call(this,e,r)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype._constructDirectoryRecord=function(t){return new Un(t,this._record.getRockRidgeOffset())},e}(ri),oi=function(t){function e(r,n,i){var o=this;void 0===n&&(n=""),void 0===i&&(i=!0),t.call(this),this._data=r,N(i,e.Name,{data:"ISO data as a Buffer",name:n});for(var s=!1,u=32768,c=new Array;!s;){var f=r.slice(u);switch(new Tn(f).type()){case 1:c.push(new Ln(f));break;case 2:c.push(new Dn(f));break;case 255:s=!0}u+=2048}if(0===c.length)throw new p(a.EIO,"Unable to find a suitable volume descriptor.");c.forEach((function(t){o._pvd&&2===o._pvd.type()||(o._pvd=t)})),this._root=this._pvd.rootDirectoryEntry(r),this._name=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){var n;try{n=new e(t.data,t.name,!1)}catch(t){}finally{r(void 0,n)}},e.isAvailable=function(){return!0},e.prototype.getName=function(){var t="IsoFS"+this._name+(this._pvd?"-"+this._pvd.name():"");return this._root&&this._root.hasRockRidge()&&(t+="-RockRidge"),t},e.prototype.diskSpace=function(t,e){e(this._data.length,0)},e.prototype.isReadOnly=function(){return!0},e.prototype.supportsLinks=function(){return!1},e.prototype.supportsProps=function(){return!1},e.prototype.supportsSynch=function(){return!0},e.prototype.statSync=function(t,e){var r=this._getDirectoryRecord(t);if(null===r)throw p.ENOENT(t);return this._getStats(t,r)},e.prototype.openSync=function(t,e,r){if(e.isWriteable())throw new p(a.EPERM,t);var n=this._getDirectoryRecord(t);if(!n)throw p.ENOENT(t);if(n.isSymlink(this._data))return this.openSync(u.resolve(t,n.getSymlinkPath(this._data)),e,r);if(n.isDirectory(this._data))throw p.EISDIR(t);var i=n.getFile(this._data),o=this._getStats(t,n);switch(e.pathExistsAction()){case f.THROW_EXCEPTION:case f.TRUNCATE_FILE:throw p.EEXIST(t);case f.NOP:return new $(this,t,e,o,i);default:throw new p(a.EINVAL,"Invalid FileMode object.")}},e.prototype.readdirSync=function(t){var e=this._getDirectoryRecord(t);if(e){if(e.isDirectory(this._data))return e.getDirectory(this._data).getFileList().slice(0);throw p.ENOTDIR(t)}throw p.ENOENT(t)},e.prototype.readFileSync=function(t,e,r){var n=this.openSync(t,r,420);try{var i=n.getBuffer();return null===e?C(i):i.toString(e)}finally{n.closeSync()}},e.prototype._getDirectoryRecord=function(t){if("/"===t)return this._root;for(var e=t.split("/").slice(1),r=this._root,n=0,i=e;n<i.length;n+=1){var o=i[n];if(!r.isDirectory(this._data))return null;if(!(r=r.getDirectory(this._data).getRecord(o)))return null}return r},e.prototype._getStats=function(t,e){if(e.isSymlink(this._data)){var r=u.resolve(t,e.getSymlinkPath(this._data)),n=this._getDirectoryRecord(r);return n?this._getStats(r,n):null}var i=e.dataLength(),o=365,a=e.recordingDate(),s=a,c=a,f=a;if(e.hasRockRidge())for(var p=0,l=e.getSUEntries(this._data);p<l.length;p+=1){var y=l[p];if(y instanceof Zn)o=y.mode();else if(y instanceof ti){var g=y.flags();4&g&&(s=y.access()),2&g&&(c=y.modify()),1&g&&(f=y.creation())}}return o&=365,new d(e.isDirectory(this._data)?h.DIRECTORY:h.FILE,i,o,s,c,f)},e}(J);oi.Name="IsoFS",oi.Options={data:{type:"object",description:"The ISO file in a buffer",validator:q}},[tt,Te,De,Pe,qe,rr,cr,oi,hr,yr,jr,$r,un,On].forEach((function(t){var e=t.Create;t.Create=function(r,n){var i="function"==typeof r,o=i?r:n,a=i?{}:r;W(t,a,(function(r){r?o(r):e.call(t,a,o)}))}}));var ai={AsyncMirror:tt,Dropbox:Te,Emscripten:De,FolderAdapter:Pe,HTML5FS:qe,InMemory:rr,IndexedDB:cr,IsoFS:oi,LocalStorage:hr,MountableFileSystem:yr,OverlayFS:jr,WorkerFS:$r,XmlHttpRequest:un,ZipFS:On};function si(t){switch(t){case"fs":return I;case"path":return u;case"buffer":return s;case"process":return o;case"bfs_utils":return V;default:return ai[t]}}function ui(t){return I.initialize(t)}function ci(t,e){var r=t.fs;if(!r)return e(new p(a.EPERM,'Missing "fs" property on configuration object.'));var n=t.options,i=0,o=!1;function s(){if(!o){o=!0;var t=ai[r];t?t.Create(n,e):e(new p(a.EPERM,"File system "+r+" is not available in BrowserFS."))}}if(null!==n&&"object"==typeof n){var u=!1;Object.keys(n).filter((function(t){return"fs"!==t})).forEach((function(t){var r=n[t];null!==r&&"object"==typeof r&&r.fs&&(i++,ci(r,(function(r,a){if(i--,r){if(o)return;o=!0,e(r)}else n[t]=a,0===i&&u&&s()})))})),u=!0}0===i&&s()}o.initializeTTYs&&o.initializeTTYs(),"undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array&&(Uint8Array.prototype.slice||(Uint8Array.prototype.slice=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=this.length),t<0&&(t=this.length+t)<0&&(t=0),e<0&&(e=this.length+e)<0&&(e=0),e<t&&(e=t),new Uint8Array(this.buffer,this.byteOffset+t,e-t)})),e.install=function(e){e.Buffer=t,e.process=o;var r=e.require?e.require:null;e.require=function(t){return si(t)||r.apply(null,Array.prototype.slice.call(arguments,0))}},e.registerFileSystem=function(t,e){ai[t]=e},e.BFSRequire=si,e.initialize=ui,e.configure=function(t,e){ci(t,(function(t,r){r?(ui(r),e()):e(t)}))},e.getFileSystem=ci,e.EmscriptenFS=Y,e.FileSystem=ai,e.Errors=l,e.setImmediate=Fr}).call(e,r(1),function(){return this}(),r(5)(t),r(6))},function(t,e,r){t.exports=r(2).Buffer},function(t,e,r){(function(t){"use strict";var n=r(3),i=r(4);e.Buffer=t,e.SlowBuffer=function(e){return+e!=e&&(e=0),t.alloc(+e)},e.INSPECT_MAX_BYTES=50;var o=2147483647;function a(e){if(e>o)throw new RangeError("Invalid typed array length");var r=new Uint8Array(e);return r.__proto__=t.prototype,r}function t(t,e,r){if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return c(t)}return s(t,e,r)}function s(e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return C(e)?function(e,r,n){if(r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");var i;return(i=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n)).__proto__=t.prototype,i}(e,r,n):"string"==typeof e?function(e,r){if("string"==typeof r&&""!==r||(r="utf8"),!t.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|l(e,r),i=a(n),o=i.write(e,r);return o!==n&&(i=i.slice(0,o)),i}(e,r):function(e){if(t.isBuffer(e)){var r=0|p(e.length),n=a(r);return 0===n.length||e.copy(n,0,0,r),n}if(e){if(B(e)||"length"in e)return"number"!=typeof e.length||z(e.length)?a(0):f(e);if("Buffer"===e.type&&Array.isArray(e.data))return f(e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e)}function u(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function c(t){return u(t),a(t<0?0:0|p(t))}function f(t){for(var e=t.length<0?0:0|p(t.length),r=a(e),n=0;n<e;n+=1)r[n]=255&t[n];return r}function p(t){if(t>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return 0|t}function l(e,r){if(t.isBuffer(e))return e.length;if(B(e)||C(e))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var i=!1;;)switch(r){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return j(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return U(e).length;default:if(i)return j(e).length;r=(""+r).toLowerCase(),i=!0}}function h(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return A(this,e,r);case"utf8":case"utf-8":return O(this,e,r);case"ascii":return k(this,e,r);case"latin1":case"binary":return F(this,e,r);case"base64":return E(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return N(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function y(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function d(e,r,n,i,o){if(0===e.length)return-1;if("string"==typeof n?(i=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),z(n=+n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof r&&(r=t.from(r,i)),t.isBuffer(r))return 0===r.length?-1:g(e,r,n,i,o);if("number"==typeof r)return r&=255,"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,r,n):Uint8Array.prototype.lastIndexOf.call(e,r,n):g(e,[r],n,i,o);throw new TypeError("val must be string, number or Buffer")}function g(t,e,r,n,i){var o,a=1,s=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;a=2,s/=2,u/=2,r/=2}function c(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(i){var f=-1;for(o=r;o<s;o++)if(c(t,o)===c(e,-1===f?0:o-f)){if(-1===f&&(f=o),o-f+1===u)return f*a}else-1!==f&&(o-=o-f),f=-1}else for(r+u>s&&(r=s-u),o=r;o>=0;o--){for(var p=!0,l=0;l<u;l++)if(c(t,o+l)!==c(e,l)){p=!1;break}if(p)return o}return-1}function v(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var a=0;a<n;++a){var s=parseInt(e.substr(2*a,2),16);if(z(s))return a;t[r+a]=s}return a}function m(t,e,r,n){return M(j(e,t.length-r),t,r,n)}function w(t,e,r,n){return M(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function _(t,e,r,n){return w(t,e,r,n)}function b(t,e,r,n){return M(U(e),t,r,n)}function S(t,e,r,n){return M(function(t,e){for(var r,n,i,o=[],a=0;a<t.length&&!((e-=2)<0);++a)n=(r=t.charCodeAt(a))>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function E(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function O(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var o,a,s,u,c=t[i],f=null,p=c>239?4:c>223?3:c>191?2:1;if(i+p<=r)switch(p){case 1:c<128&&(f=c);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&c)<<6|63&o)>127&&(f=u);break;case 3:o=t[i+1],a=t[i+2],128==(192&o)&&128==(192&a)&&(u=(15&c)<<12|(63&o)<<6|63&a)>2047&&(u<55296||u>57343)&&(f=u);break;case 4:o=t[i+1],a=t[i+2],s=t[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(u=(15&c)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(f=u)}null===f?(f=65533,p=1):f>65535&&(f-=65536,n.push(f>>>10&1023|55296),f=56320|1023&f),n.push(f),i+=p}return function(t){var e=t.length;if(e<=I)return String.fromCharCode.apply(String,t);for(var r="",n=0;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=I));return r}(n)}e.kMaxLength=o,t.TYPED_ARRAY_SUPPORT=function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()}catch(t){return!1}}(),t.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),"undefined"!=typeof Symbol&&Symbol.species&&t[Symbol.species]===t&&Object.defineProperty(t,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1}),t.poolSize=8192,t.from=function(t,e,r){return s(t,e,r)},t.prototype.__proto__=Uint8Array.prototype,t.__proto__=Uint8Array,t.alloc=function(t,e,r){return function(t,e,r){return u(t),t<=0?a(t):void 0!==e?"string"==typeof r?a(t).fill(e,r):a(t).fill(e):a(t)}(t,e,r)},t.allocUnsafe=function(t){return c(t)},t.allocUnsafeSlow=function(t){return c(t)},t.isBuffer=function(t){return null!=t&&!0===t._isBuffer},t.compare=function(e,r){if(!t.isBuffer(e)||!t.isBuffer(r))throw new TypeError("Arguments must be Buffers");if(e===r)return 0;for(var n=e.length,i=r.length,o=0,a=Math.min(n,i);o<a;++o)if(e[o]!==r[o]){n=e[o],i=r[o];break}return n<i?-1:i<n?1:0},t.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},t.concat=function(e,r){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return t.alloc(0);var n;if(void 0===r)for(r=0,n=0;n<e.length;++n)r+=e[n].length;var i=t.allocUnsafe(r),o=0;for(n=0;n<e.length;++n){var a=e[n];if(!t.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(i,o),o+=a.length}return i},t.byteLength=l,t.prototype._isBuffer=!0,t.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)y(this,e,e+1);return this},t.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)y(this,e,e+3),y(this,e+1,e+2);return this},t.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)y(this,e,e+7),y(this,e+1,e+6),y(this,e+2,e+5),y(this,e+3,e+4);return this},t.prototype.toString=function(){var t=this.length;return 0===t?"":0===arguments.length?O(this,0,t):h.apply(this,arguments)},t.prototype.equals=function(e){if(!t.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===t.compare(this,e)},t.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},t.prototype.compare=function(e,r,n,i,o){if(!t.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===r&&(r=0),void 0===n&&(n=e?e.length:0),void 0===i&&(i=0),void 0===o&&(o=this.length),r<0||n>e.length||i<0||o>this.length)throw new RangeError("out of range index");if(i>=o&&r>=n)return 0;if(i>=o)return-1;if(r>=n)return 1;if(this===e)return 0;for(var a=(o>>>=0)-(i>>>=0),s=(n>>>=0)-(r>>>=0),u=Math.min(a,s),c=this.slice(i,o),f=e.slice(r,n),p=0;p<u;++p)if(c[p]!==f[p]){a=c[p],s=f[p];break}return a<s?-1:s<a?1:0},t.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},t.prototype.indexOf=function(t,e,r){return d(this,t,e,r,!0)},t.prototype.lastIndexOf=function(t,e,r){return d(this,t,e,r,!1)},t.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return v(this,t,e,r);case"utf8":case"utf-8":return m(this,t,e,r);case"ascii":return w(this,t,e,r);case"latin1":case"binary":return _(this,t,e,r);case"base64":return b(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},t.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var I=4096;function k(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function F(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function A(t,e,r){var n,i=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>i)&&(r=i);for(var o="",a=e;a<r;++a)o+=(n=t[a])<16?"0"+n.toString(16):n.toString(16);return o}function N(t,e,r){for(var n=t.slice(e,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function R(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function T(e,r,n,i,o,a){if(!t.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(r>o||r<a)throw new RangeError('"value" argument is out of bounds');if(n+i>e.length)throw new RangeError("Index out of range")}function x(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function L(t,e,r,n,o){return e=+e,r>>>=0,o||x(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function D(t,e,r,n,o){return e=+e,r>>>=0,o||x(t,0,r,8),i.write(t,e,r,n,52,8),r+8}t.prototype.slice=function(e,r){var n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(r=void 0===r?n:~~r)<0?(r+=n)<0&&(r=0):r>n&&(r=n),r<e&&(r=e);var i=this.subarray(e,r);return i.__proto__=t.prototype,i},t.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||R(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n},t.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||R(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},t.prototype.readUInt8=function(t,e){return t>>>=0,e||R(t,1,this.length),this[t]},t.prototype.readUInt16LE=function(t,e){return t>>>=0,e||R(t,2,this.length),this[t]|this[t+1]<<8},t.prototype.readUInt16BE=function(t,e){return t>>>=0,e||R(t,2,this.length),this[t]<<8|this[t+1]},t.prototype.readUInt32LE=function(t,e){return t>>>=0,e||R(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},t.prototype.readUInt32BE=function(t,e){return t>>>=0,e||R(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},t.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||R(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},t.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||R(t,e,this.length);for(var n=e,i=1,o=this[t+--n];n>0&&(i*=256);)o+=this[t+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},t.prototype.readInt8=function(t,e){return t>>>=0,e||R(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},t.prototype.readInt16LE=function(t,e){t>>>=0,e||R(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},t.prototype.readInt16BE=function(t,e){t>>>=0,e||R(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},t.prototype.readInt32LE=function(t,e){return t>>>=0,e||R(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},t.prototype.readInt32BE=function(t,e){return t>>>=0,e||R(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},t.prototype.readFloatLE=function(t,e){return t>>>=0,e||R(t,4,this.length),i.read(this,t,!0,23,4)},t.prototype.readFloatBE=function(t,e){return t>>>=0,e||R(t,4,this.length),i.read(this,t,!1,23,4)},t.prototype.readDoubleLE=function(t,e){return t>>>=0,e||R(t,8,this.length),i.read(this,t,!0,52,8)},t.prototype.readDoubleBE=function(t,e){return t>>>=0,e||R(t,8,this.length),i.read(this,t,!1,52,8)},t.prototype.writeUIntLE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||T(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},t.prototype.writeUIntBE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||T(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},t.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,1,255,0),this[e]=255&t,e+1},t.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},t.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},t.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},t.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},t.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e>>>=0,!n){var i=Math.pow(2,8*r-1);T(this,t,e,r,i-1,-i)}var o=0,a=1,s=0;for(this[e]=255&t;++o<r&&(a*=256);)t<0&&0===s&&0!==this[e+o-1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+r},t.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e>>>=0,!n){var i=Math.pow(2,8*r-1);T(this,t,e,r,i-1,-i)}var o=r-1,a=1,s=0;for(this[e+o]=255&t;--o>=0&&(a*=256);)t<0&&0===s&&0!==this[e+o+1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+r},t.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},t.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},t.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},t.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},t.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||T(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},t.prototype.writeFloatLE=function(t,e,r){return L(this,t,e,!0,r)},t.prototype.writeFloatBE=function(t,e,r){return L(this,t,e,!1,r)},t.prototype.writeDoubleLE=function(t,e,r){return D(this,t,e,!0,r)},t.prototype.writeDoubleBE=function(t,e,r){return D(this,t,e,!1,r)},t.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i,o=n-r;if(this===t&&r<e&&e<n)for(i=o-1;i>=0;--i)t[i+e]=this[i+r];else if(o<1e3)for(i=0;i<o;++i)t[i+e]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+o),e);return o},t.prototype.fill=function(e,r,n,i){if("string"==typeof e){if("string"==typeof r?(i=r,r=0,n=this.length):"string"==typeof n&&(i=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!t.isEncoding(i))throw new TypeError("Unknown encoding: "+i)}else"number"==typeof e&&(e&=255);if(r<0||this.length<r||this.length<n)throw new RangeError("Out of range index");if(n<=r)return this;var a;if(r>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(a=r;a<n;++a)this[a]=e;else{var s=t.isBuffer(e)?e:new t(e,i),u=s.length;for(a=0;a<n-r;++a)this[a+r]=s[a%u]}return this};var P=/[^+/0-9A-Za-z-_]/g;function j(t,e){var r;e=e||1/0;for(var n=t.length,i=null,o=[],a=0;a<n;++a){if((r=t.charCodeAt(a))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(a+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function U(t){return n.toByteArray(function(t){if((t=t.trim().replace(P,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function M(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}function C(t){return t instanceof ArrayBuffer||null!=t&&null!=t.constructor&&"ArrayBuffer"===t.constructor.name&&"number"==typeof t.byteLength}function B(t){return"function"==typeof ArrayBuffer.isView&&ArrayBuffer.isView(t)}function z(t){return t!=t}}).call(e,r(1))},function(t,e){"use strict";e.byteLength=function(t){return 3*t.length/4-s(t)},e.toByteArray=function(t){var e,r,o,a,u,c,f=t.length;u=s(t),c=new i(3*f/4-u),o=u>0?f-4:f;var p=0;for(e=0,r=0;e<o;e+=4,r+=3)a=n[t.charCodeAt(e)]<<18|n[t.charCodeAt(e+1)]<<12|n[t.charCodeAt(e+2)]<<6|n[t.charCodeAt(e+3)],c[p++]=a>>16&255,c[p++]=a>>8&255,c[p++]=255&a;return 2===u?(a=n[t.charCodeAt(e)]<<2|n[t.charCodeAt(e+1)]>>4,c[p++]=255&a):1===u&&(a=n[t.charCodeAt(e)]<<10|n[t.charCodeAt(e+1)]<<4|n[t.charCodeAt(e+2)]>>2,c[p++]=a>>8&255,c[p++]=255&a),c},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o="",a=[],s=16383,c=0,f=n-i;c<f;c+=s)a.push(u(t,c,c+s>f?f:c+s));return 1===i?(e=t[n-1],o+=r[e>>2],o+=r[e<<4&63],o+="=="):2===i&&(e=(t[n-2]<<8)+t[n-1],o+=r[e>>10],o+=r[e>>4&63],o+=r[e<<2&63],o+="="),a.push(o),a.join("")};for(var r=[],n=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0;a<64;++a)r[a]=o[a],n[o.charCodeAt(a)]=a;function s(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");return"="===t[e-2]?2:"="===t[e-1]?1:0}function u(t,e,n){for(var i,o,a=[],s=e;s<n;s+=3)i=(t[s]<<16)+(t[s+1]<<8)+t[s+2],a.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return a.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,r,n,i){var o,a,s=8*i-n-1,u=(1<<s)-1,c=u>>1,f=-7,p=r?i-1:0,l=r?-1:1,h=t[e+p];for(p+=l,o=h&(1<<-f)-1,h>>=-f,f+=s;f>0;o=256*o+t[e+p],p+=l,f-=8);for(a=o&(1<<-f)-1,o>>=-f,f+=n;f>0;a=256*a+t[e+p],p+=l,f-=8);if(0===o)o=1-c;else{if(o===u)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,n),o-=c}return(h?-1:1)*a*Math.pow(2,o-n)},e.write=function(t,e,r,n,i,o){var a,s,u,c=8*o-i-1,f=(1<<c)-1,p=f>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=n?0:o-1,y=n?1:-1,d=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=f):(a=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-a))<1&&(a--,u*=2),(e+=a+p>=1?l/u:l*Math.pow(2,1-p))*u>=2&&(a++,u/=2),a+p>=f?(s=0,a=f):a+p>=1?(s=(e*u-1)*Math.pow(2,i),a+=p):(s=e*Math.pow(2,p-1)*Math.pow(2,i),a=0));i>=8;t[r+h]=255&s,h+=y,s/=256,i-=8);for(a=a<<i|s,c+=i;c>0;t[r+h]=255&a,h+=y,a/=256,c-=8);t[r+h-y]|=128*d}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e,r){"use strict";var n=new(r(7)),i={};function o(t){i[t]||("function"==typeof n[t]?i[t]=function(){return n[t].apply(n,arguments)}:i[t]=n[t])}for(var a in n)o(a);i.initializeTTYs=function(){null===n.stdin&&(n.initializeTTYs(),i.stdin=n.stdin,i.stdout=n.stdout,i.stderr=n.stderr)},n.nextTick((function(){i.initializeTTYs()})),t.exports=i},function(t,e,r){(function(e){"use strict";var n=this&&this.__extends||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);function n(){this.constructor=t}t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},i=r(8),o=null,a=function(){function t(t,e){this.fun=t,this.array=e}return t.prototype.run=function(){this.fun.apply(null,this.array)},t}(),s=function(){function t(){this._queue=[],this._draining=!1,this._currentQueue=null,this._queueIndex=-1}return t.prototype.push=function(t){var e=this;1!==this._queue.push(t)||this._draining||setTimeout((function(){return e._drainQueue()}),0)},t.prototype._cleanUpNextTick=function(){this._draining=!1,this._currentQueue&&this._currentQueue.length?this._queue=this._currentQueue.concat(this._queue):this._queueIndex=-1,this._queue.length&&this._drainQueue()},t.prototype._drainQueue=function(){var t=this;if(!this._draining){var e=setTimeout((function(){return t._cleanUpNextTick()}));this._draining=!0;for(var r=this._queue.length;r;){for(this._currentQueue=this._queue,this._queue=[];++this._queueIndex<r;)this._currentQueue&&this._currentQueue[this._queueIndex].run();this._queueIndex=-1,r=this._queue.length}this._currentQueue=null,this._draining=!1,clearTimeout(e)}},t}(),u=function(t){function i(){t.apply(this,arguments),this.startTime=Date.now(),this._cwd="/",this.platform="browser",this.argv=[],this.execArgv=[],this.stdout=null,this.stderr=null,this.stdin=null,this.domain=null,this._queue=new s,this.execPath=e,this.env={},this.exitCode=0,this._gid=1,this._uid=1,this.version="v5.0",this.versions={http_parser:"0.0",node:"5.0",v8:"0.0",uv:"0.0",zlib:"0.0",ares:"0.0",icu:"0.0",modules:"0",openssl:"0.0"},this.config={target_defaults:{cflags:[],default_configuration:"Release",defines:[],include_dirs:[],libraries:[]},variables:{clang:0,host_arch:"x32",node_install_npm:!1,node_install_waf:!1,node_prefix:"",node_shared_cares:!1,node_shared_http_parser:!1,node_shared_libuv:!1,node_shared_zlib:!1,node_shared_v8:!1,node_use_dtrace:!1,node_use_etw:!1,node_use_openssl:!1,node_shared_openssl:!1,strict_aliasing:!1,target_arch:"x32",v8_use_snapshot:!1,v8_no_strict_aliasing:0,visibility:""}},this.pid=1e3*Math.random()|0,this.title="node",this.arch="x32",this._mask=18,this.connected=void 0}return n(i,t),i.prototype.chdir=function(t){null===o&&(o=r(9)),this._cwd=o.resolve(t)},i.prototype.cwd=function(){return this._cwd},i.prototype.uptime=function(){return(Date.now()-this.startTime)/1e3|0},i.prototype.nextTick=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];this._queue.push(new a(t,e))},i.prototype.abort=function(){this.emit("abort")},i.prototype.exit=function(t){this.exitCode=t,this.emit("exit",[t])},i.prototype.getgid=function(){return this._gid},i.prototype.setgid=function(t){this._gid="number"==typeof t?t:1},i.prototype.getuid=function(){return this._uid},i.prototype.setuid=function(t){this._uid="number"==typeof t?t:1},i.prototype.kill=function(t,e){this.emit("kill",[t,e])},i.prototype.memoryUsage=function(){return{rss:0,heapTotal:0,heapUsed:0}},i.prototype.umask=function(t){void 0===t&&(t=this._mask);var e=this._mask;return this._mask=t,this.emit("umask",[t]),e},i.prototype.hrtime=function(){var t,e=(t="undefined"!=typeof performance?performance.now():Date.now?Date.now():(new Date).getTime())/1e3|0;return[e,t=1e6*(t-=1e3*e)|0]},i.prototype.initializeTTYs=function(){if(null===this.stdout){var t=r(10);this.stdout=new t,this.stderr=new t,this.stdin=new t}},i.prototype.disconnect=function(){},i}(i.EventEmitter);t.exports=u}).call(e,"/")},function(t,e){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function n(t){return"function"==typeof t}function i(t){return"object"==typeof t&&null!==t}function o(t){return void 0===t}t.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||isNaN(t))throw TypeError("n must be a positive number");return this._maxListeners=t,this},r.prototype.emit=function(t){var e,r,a,s,u,c;if(this._events||(this._events={}),"error"===t&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((e=arguments[1])instanceof Error)throw e;var f=new Error('Uncaught, unspecified "error" event. ('+e+")");throw f.context=e,f}if(o(r=this._events[t]))return!1;if(n(r))switch(arguments.length){case 1:r.call(this);break;case 2:r.call(this,arguments[1]);break;case 3:r.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),r.apply(this,s)}else if(i(r))for(s=Array.prototype.slice.call(arguments,1),a=(c=r.slice()).length,u=0;u<a;u++)c[u].apply(this,s);return!0},r.prototype.addListener=function(t,e){var a;if(!n(e))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",t,n(e.listener)?e.listener:e),this._events[t]?i(this._events[t])?this._events[t].push(e):this._events[t]=[this._events[t],e]:this._events[t]=e,i(this._events[t])&&!this._events[t].warned&&(a=o(this._maxListeners)?r.defaultMaxListeners:this._maxListeners)&&a>0&&this._events[t].length>a&&(this._events[t].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[t].length),"function"==typeof console.trace&&console.trace()),this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(t,e){if(!n(e))throw TypeError("listener must be a function");var r=!1;function i(){this.removeListener(t,i),r||(r=!0,e.apply(this,arguments))}return i.listener=e,this.on(t,i),this},r.prototype.removeListener=function(t,e){var r,o,a,s;if(!n(e))throw TypeError("listener must be a function");if(!this._events||!this._events[t])return this;if(a=(r=this._events[t]).length,o=-1,r===e||n(r.listener)&&r.listener===e)delete this._events[t],this._events.removeListener&&this.emit("removeListener",t,e);else if(i(r)){for(s=a;s-- >0;)if(r[s]===e||r[s].listener&&r[s].listener===e){o=s;break}if(o<0)return this;1===r.length?(r.length=0,delete this._events[t]):r.splice(o,1),this._events.removeListener&&this.emit("removeListener",t,e)}return this},r.prototype.removeAllListeners=function(t){var e,r;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[t]&&delete this._events[t],this;if(0===arguments.length){for(e in this._events)"removeListener"!==e&&this.removeAllListeners(e);return this.removeAllListeners("removeListener"),this._events={},this}if(n(r=this._events[t]))this.removeListener(t,r);else if(r)for(;r.length;)this.removeListener(t,r[r.length-1]);return delete this._events[t],this},r.prototype.listeners=function(t){return this._events&&this._events[t]?n(this._events[t])?[this._events[t]]:this._events[t].slice():[]},r.prototype.listenerCount=function(t){if(this._events){var e=this._events[t];if(n(e))return 1;if(e)return e.length}return 0},r.listenerCount=function(t,e){return t.listenerCount(e)}},function(t,e,r){(function(e){"use strict";var r=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,n=function(){function t(){}return t.normalize=function(e){""===e&&(e=".");for(var r=e.charAt(0)===t.sep,n=(e=t._removeDuplicateSeps(e)).split(t.sep),i=[],o=0;o<n.length;o++){var a=n[o];"."!==a&&(".."===a&&(r||!r&&i.length>0&&".."!==i[0])?i.pop():i.push(a))}return!r&&i.length<2&&(1===i.length?""===i[0]&&i.unshift("."):i.push(".")),e=i.join(t.sep),r&&e.charAt(0)!==t.sep&&(e=t.sep+e),e},t.join=function(){for(var e=[],r=0;r<arguments.length;r++)e[r-0]=arguments[r];for(var n=[],i=0;i<e.length;i++){var o=e[i];if("string"!=typeof o)throw new TypeError("Invalid argument type to path.join: "+typeof o);""!==o&&n.push(o)}return t.normalize(n.join(t.sep))},t.resolve=function(){for(var r=[],n=0;n<arguments.length;n++)r[n-0]=arguments[n];for(var i=[],o=0;o<r.length;o++){var a=r[o];if("string"!=typeof a)throw new TypeError("Invalid argument type to path.join: "+typeof a);""!==a&&(a.charAt(0)===t.sep&&(i=[]),i.push(a))}var s=t.normalize(i.join(t.sep));if(s.length>1&&s.charAt(s.length-1)===t.sep)return s.substr(0,s.length-1);if(s.charAt(0)!==t.sep){"."!==s.charAt(0)||1!==s.length&&s.charAt(1)!==t.sep||(s=1===s.length?"":s.substr(2));var u=e.cwd();s=""!==s?this.normalize(u+("/"!==u?t.sep:"")+s):u}return s},t.relative=function(e,r){var n;e=t.resolve(e),r=t.resolve(r);var i=e.split(t.sep),o=r.split(t.sep);o.shift(),i.shift();var a=0,s=[];for(n=0;n<i.length;n++)if(i[n]!==o[n]){a=i.length-n;break}s=o.slice(n),1===i.length&&""===i[0]&&(a=0),a>i.length&&(a=i.length);var u="";for(n=0;n<a;n++)u+="../";return(u+=s.join(t.sep)).length>1&&u.charAt(u.length-1)===t.sep&&(u=u.substr(0,u.length-1)),u},t.dirname=function(e){var r=(e=t._removeDuplicateSeps(e)).charAt(0)===t.sep,n=e.split(t.sep);return""===n.pop()&&n.length>0&&n.pop(),n.length>1||1===n.length&&!r?n.join(t.sep):r?t.sep:"."},t.basename=function(e,r){if(void 0===r&&(r=""),""===e)return e;var n=(e=t.normalize(e)).split(t.sep),i=n[n.length-1];return""===i&&n.length>1?n[n.length-2]:r.length>0&&i.substr(i.length-r.length)===r?i.substr(0,i.length-r.length):i},t.extname=function(e){var r=(e=t.normalize(e)).split(t.sep);if(""===(e=r.pop())&&r.length>0&&(e=r.pop()),".."===e)return"";var n=e.lastIndexOf(".");return-1===n||0===n?"":e.substr(n)},t.isAbsolute=function(e){return e.length>0&&e.charAt(0)===t.sep},t._makeLong=function(t){return t},t.parse=function(t){var e,n,i=(e=t,(n=r.exec(e)).shift(),n);return{root:i[0],dir:i[0]+i[1].slice(0,-1),base:i[2],ext:i[3],name:i[2].slice(0,i[2].length-i[3].length)}},t.format=function(e){if(null===e||"object"!=typeof e)throw new TypeError("Parameter 'pathObject' must be an object, not "+typeof e);if("string"!=typeof(e.root||""))throw new TypeError("'pathObject.root' must be a string or undefined, not "+typeof e.root);return(e.dir?e.dir+t.sep:"")+(e.base||"")},t._removeDuplicateSeps=function(t){return t.replace(this._replaceRegex,this.sep)},t.sep="/",t._replaceRegex=new RegExp("//+","g"),t.delimiter=":",t.posix=t,t.win32=t,t}();t.exports=n}).call(e,r(6))},function(t,e,r){(function(e){"use strict";var n=this&&this.__extends||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);function n(){this.constructor=t}t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},i=function(t){function r(){t.call(this),this.isRaw=!1,this.columns=80,this.rows=120,this.isTTY=!0,this._bufferedWrites=[],this._waitingForWrites=!1}return n(r,t),r.prototype.setRawMode=function(t){this.isRaw!==t&&(this.isRaw=t,this.emit("modeChange"))},r.prototype.changeColumns=function(t){t!==this.columns&&(this.columns=t,this.emit("resize"))},r.prototype.changeRows=function(t){t!==this.rows&&(this.rows=t,this.emit("resize"))},r.isatty=function(t){return t&&t instanceof r},r.prototype._write=function(t,r,n){var i;try{var o;o="string"==typeof t?new e(t,r):t,this._bufferedWrites.push(o),this._waitingForWrites&&this._read(1024)}catch(t){i=t}finally{n(i)}},r.prototype._read=function(t){if(0===this._bufferedWrites.length)this._waitingForWrites=!0;else for(;this._bufferedWrites.length>0&&(this._waitingForWrites=this.push(this._bufferedWrites.shift()),this._waitingForWrites););},r}(r(11).Duplex);t.exports=i}).call(e,r(1))},function(t,e,r){t.exports=i;var n=r(8).EventEmitter;function i(){n.call(this)}r(12)(i,n),i.Readable=r(13),i.Writable=r(27),i.Duplex=r(28),i.Transform=r(29),i.PassThrough=r(30),i.Stream=i,i.prototype.pipe=function(t,e){var r=this;function i(e){t.writable&&!1===t.write(e)&&r.pause&&r.pause()}function o(){r.readable&&r.resume&&r.resume()}r.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(r.on("end",s),r.on("close",u));var a=!1;function s(){a||(a=!0,t.end())}function u(){a||(a=!0,"function"==typeof t.destroy&&t.destroy())}function c(t){if(f(),0===n.listenerCount(this,"error"))throw t}function f(){r.removeListener("data",i),t.removeListener("drain",o),r.removeListener("end",s),r.removeListener("close",u),r.removeListener("error",c),t.removeListener("error",c),r.removeListener("end",f),r.removeListener("close",f),t.removeListener("close",f)}return r.on("error",c),t.on("error",c),r.on("end",f),r.on("close",f),t.on("close",f),t.emit("pipe",r),t}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}},function(t,e,r){(function(n){var i=function(){try{return r(11)}catch(t){}}();(e=t.exports=r(14)).Stream=i||e,e.Readable=e,e.Writable=r(22),e.Duplex=r(21),e.Transform=r(25),e.PassThrough=r(26),!n.browser&&"disable"===n.env.READABLE_STREAM&&i&&(t.exports=i)}).call(e,r(6))},function(t,e,r){(function(e){"use strict";t.exports=g;var n,i=r(15),o=r(16);g.ReadableState=d,r(8).EventEmitter;var a,s=function(t,e){return t.listeners(e).length};!function(){try{a=r(11)}catch(t){}finally{a||(a=r(8).EventEmitter)}}();var u=r(2).Buffer,c=r(17),f=r(18);f.inherits=r(12);var p=r(19),l=void 0;l=p&&p.debuglog?p.debuglog("stream"):function(){};var h,y=r(20);function d(t,e){n=n||r(21),t=t||{},this.objectMode=!!t.objectMode,e instanceof n&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,o=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:o,this.highWaterMark=~~this.highWaterMark,this.buffer=new y,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(h||(h=r(24).StringDecoder),this.decoder=new h(t.encoding),this.encoding=t.encoding)}function g(t){if(n=n||r(21),!(this instanceof g))return new g(t);this._readableState=new d(t,this),this.readable=!0,t&&"function"==typeof t.read&&(this._read=t.read),a.call(this)}function v(t,e,r,n,o){var a=function(t,e){var r=null;return u.isBuffer(e)||"string"==typeof e||null==e||t.objectMode||(r=new TypeError("Invalid non-string/buffer chunk")),r}(e,r);if(a)t.emit("error",a);else if(null===r)e.reading=!1,function(t,e){if(!e.ended){if(e.decoder){var r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length)}e.ended=!0,_(t)}}(t,e);else if(e.objectMode||r&&r.length>0)if(e.ended&&!o){var s=new Error("stream.push() after EOF");t.emit("error",s)}else if(e.endEmitted&&o){var c=new Error("stream.unshift() after end event");t.emit("error",c)}else{var f;!e.decoder||o||n||(r=e.decoder.write(r),f=!e.objectMode&&0===r.length),o||(e.reading=!1),f||(e.flowing&&0===e.length&&!e.sync?(t.emit("data",r),t.read(0)):(e.length+=e.objectMode?1:r.length,o?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&_(t))),function(t,e){e.readingMore||(e.readingMore=!0,i(S,t,e))}(t,e)}else o||(e.reading=!1);return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(e)}f.inherits(g,a),g.prototype.push=function(t,e){var r=this._readableState;return r.objectMode||"string"!=typeof t||(e=e||r.defaultEncoding)!==r.encoding&&(t=c.from(t,e),e=""),v(this,r,t,e,!1)},g.prototype.unshift=function(t){return v(this,this._readableState,t,"",!0)},g.prototype.isPaused=function(){return!1===this._readableState.flowing},g.prototype.setEncoding=function(t){return h||(h=r(24).StringDecoder),this._readableState.decoder=new h(t),this._readableState.encoding=t,this};var m=8388608;function w(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=m?t=m:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function _(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(l("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i(b,t):b(t))}function b(t){l("emit readable"),t.emit("readable"),I(t)}function S(t,e){for(var r=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(l("maybeReadMore read 0"),t.read(0),r!==e.length);)r=e.length;e.readingMore=!1}function E(t){l("readable nexttick read 0"),t.read(0)}function O(t,e){e.reading||(l("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),I(t),e.flowing&&!e.reading&&t.read(0)}function I(t){var e=t._readableState;for(l("flow",e.flowing);e.flowing&&null!==t.read(););}function k(t,e){return 0===e.length?null:(e.objectMode?r=e.buffer.shift():!t||t>=e.length?(r=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):r=function(t,e,r){var n;return t<e.head.data.length?(n=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):n=t===e.head.data.length?e.shift():r?function(t,e){var r=e.head,n=1,i=r.data;for(t-=i.length;r=r.next;){var o=r.data,a=t>o.length?o.length:t;if(a===o.length?i+=o:i+=o.slice(0,t),0==(t-=a)){a===o.length?(++n,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(a));break}++n}return e.length-=n,i}(t,e):function(t,e){var r=c.allocUnsafe(t),n=e.head,i=1;for(n.data.copy(r),t-=n.data.length;n=n.next;){var o=n.data,a=t>o.length?o.length:t;if(o.copy(r,r.length-t,0,a),0==(t-=a)){a===o.length?(++i,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=o.slice(a));break}++i}return e.length-=i,r}(t,e),n}(t,e.buffer,e.decoder),r);var r}function F(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,i(A,e,t))}function A(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function N(t,e){for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}g.prototype.read=function(t){l("read",t),t=parseInt(t,10);var e=this._readableState,r=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return l("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?F(this):_(this),null;if(0===(t=w(t,e))&&e.ended)return 0===e.length&&F(this),null;var n,i=e.needReadable;return l("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&l("length less than watermark",i=!0),e.ended||e.reading?l("reading or ended",i=!1):i&&(l("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=w(r,e))),null===(n=t>0?k(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&F(this)),null!==n&&this.emit("data",n),n},g.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},g.prototype.pipe=function(t,r){var n=this,a=this._readableState;switch(a.pipesCount){case 0:a.pipes=t;break;case 1:a.pipes=[a.pipes,t];break;default:a.pipes.push(t)}a.pipesCount+=1,l("pipe count=%d opts=%j",a.pipesCount,r);var u=r&&!1===r.end||t===e.stdout||t===e.stderr?y:f;function c(t){l("onunpipe"),t===n&&y()}function f(){l("onend"),t.end()}a.endEmitted?i(u):n.once("end",u),t.on("unpipe",c);var p=function(t){return function(){var e=t._readableState;l("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,I(t))}}(n);t.on("drain",p);var h=!1;function y(){l("cleanup"),t.removeListener("close",m),t.removeListener("finish",w),t.removeListener("drain",p),t.removeListener("error",v),t.removeListener("unpipe",c),n.removeListener("end",f),n.removeListener("end",y),n.removeListener("data",g),h=!0,!a.awaitDrain||t._writableState&&!t._writableState.needDrain||p()}var d=!1;function g(e){l("ondata"),d=!1,!1!==t.write(e)||d||((1===a.pipesCount&&a.pipes===t||a.pipesCount>1&&-1!==N(a.pipes,t))&&!h&&(l("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,d=!0),n.pause())}function v(e){l("onerror",e),_(),t.removeListener("error",v),0===s(t,"error")&&t.emit("error",e)}function m(){t.removeListener("finish",w),_()}function w(){l("onfinish"),t.removeListener("close",m),_()}function _(){l("unpipe"),n.unpipe(t)}return n.on("data",g),function(t,e,r){if("function"==typeof t.prependListener)return t.prependListener(e,r);t._events&&t._events[e]?o(t._events[e])?t._events[e].unshift(r):t._events[e]=[r,t._events[e]]:t.on(e,r)}(t,"error",v),t.once("close",m),t.once("finish",w),t.emit("pipe",n),a.flowing||(l("pipe resume"),n.resume()),t},g.prototype.unpipe=function(t){var e=this._readableState;if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this)),this;if(!t){var r=e.pipes,n=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var i=0;i<n;i++)r[i].emit("unpipe",this);return this}var o=N(e.pipes,t);return-1===o||(e.pipes.splice(o,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this)),this},g.prototype.on=function(t,e){var r=a.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&_(this):i(E,this))}return r},g.prototype.addListener=g.prototype.on,g.prototype.resume=function(){var t=this._readableState;return t.flowing||(l("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i(O,t,e))}(this,t)),this},g.prototype.pause=function(){return l("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(l("pause"),this._readableState.flowing=!1,this.emit("pause")),this},g.prototype.wrap=function(t){var e=this._readableState,r=!1,n=this;for(var i in t.on("end",(function(){if(l("wrapped end"),e.decoder&&!e.ended){var t=e.decoder.end();t&&t.length&&n.push(t)}n.push(null)})),t.on("data",(function(i){l("wrapped data"),e.decoder&&(i=e.decoder.write(i)),e.objectMode&&null==i||(e.objectMode||i&&i.length)&&(n.push(i)||(r=!0,t.pause()))})),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));return function(e,r){for(var i=0,o=e.length;i<o;i++)a=e[i],t.on(a,n.emit.bind(n,a));var a}(["error","close","destroy","pause","resume"]),n._read=function(e){l("wrapped _read",e),r&&(r=!1,t.resume())},n},g._fromList=k}).call(e,r(6))},function(t,e,r){(function(e){"use strict";!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports=function(t,r,n,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var o,a,s=arguments.length;switch(s){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick((function(){t.call(null,r)}));case 3:return e.nextTick((function(){t.call(null,r,n)}));case 4:return e.nextTick((function(){t.call(null,r,n,i)}));default:for(o=new Array(s-1),a=0;a<o.length;)o[a++]=arguments[a];return e.nextTick((function(){t.apply(null,o)}))}}:t.exports=e.nextTick}).call(e,r(6))},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){(function(t){"use strict";var n=r(2),i=n.Buffer,o=n.SlowBuffer,a=n.kMaxLength||2147483647;e.alloc=function(t,e,r){if("function"==typeof i.alloc)return i.alloc(t,e,r);if("number"==typeof r)throw new TypeError("encoding must not be number");if("number"!=typeof t)throw new TypeError("size must be a number");if(t>a)throw new RangeError("size is too large");var n=r,o=e;void 0===o&&(n=void 0,o=0);var s=new i(t);if("string"==typeof o)for(var u=new i(o,n),c=u.length,f=-1;++f<t;)s[f]=u[f%c];else s.fill(o);return s},e.allocUnsafe=function(t){if("function"==typeof i.allocUnsafe)return i.allocUnsafe(t);if("number"!=typeof t)throw new TypeError("size must be a number");if(t>a)throw new RangeError("size is too large");return new i(t)},e.from=function(e,r,n){if("function"==typeof i.from&&(!t.Uint8Array||Uint8Array.from!==i.from))return i.from(e,r,n);if("number"==typeof e)throw new TypeError('"value" argument must not be a number');if("string"==typeof e)return new i(e,r);if("undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer){var o=r;if(1===arguments.length)return new i(e);void 0===o&&(o=0);var a=n;if(void 0===a&&(a=e.byteLength-o),o>=e.byteLength)throw new RangeError("'offset' is out of bounds");if(a>e.byteLength-o)throw new RangeError("'length' is out of bounds");return new i(e.slice(o,o+a))}if(i.isBuffer(e)){var s=new i(e.length);return e.copy(s,0,0,e.length),s}if(e){if(Array.isArray(e)||"undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return new i(e);if("Buffer"===e.type&&Array.isArray(e.data))return new i(e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")},e.allocUnsafeSlow=function(t){if("function"==typeof i.allocUnsafeSlow)return i.allocUnsafeSlow(t);if("number"!=typeof t)throw new TypeError("size must be a number");if(t>=a)throw new RangeError("size is too large");return new o(t)}}).call(e,function(){return this}())},function(t,e,r){(function(t){function r(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===r(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===r(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===r(t)},e.isError=function(t){return"[object Error]"===r(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(e,r(1))},function(t,e){},function(t,e,r){"use strict";r(2).Buffer;var n=r(17);function i(){this.head=null,this.tail=null,this.length=0}t.exports=i,i.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},i.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},i.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},i.prototype.clear=function(){this.head=this.tail=null,this.length=0},i.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,r=""+e.data;e=e.next;)r+=t+e.data;return r},i.prototype.concat=function(t){if(0===this.length)return n.alloc(0);if(1===this.length)return this.head.data;for(var e=n.allocUnsafe(t>>>0),r=this.head,i=0;r;)r.data.copy(e,i),i+=r.data.length,r=r.next;return e}},function(t,e,r){"use strict";var n=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e};t.exports=p;var i=r(15),o=r(18);o.inherits=r(12);var a=r(14),s=r(22);o.inherits(p,a);for(var u=n(s.prototype),c=0;c<u.length;c++){var f=u[c];p.prototype[f]||(p.prototype[f]=s.prototype[f])}function p(t){if(!(this instanceof p))return new p(t);a.call(this,t),s.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",l)}function l(){this.allowHalfOpen||this._writableState.ended||i(h,this)}function h(t){t.end()}},function(t,e,r){(function(e){"use strict";t.exports=d;var n,i=r(15),o=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?setImmediate:i;d.WritableState=y;var a=r(18);a.inherits=r(12);var s,u={deprecate:r(23)};!function(){try{s=r(11)}catch(t){}finally{s||(s=r(8).EventEmitter)}}();var c,f=r(2).Buffer,p=r(17);function l(){}function h(t,e,r){this.chunk=t,this.encoding=e,this.callback=r,this.next=null}function y(t,e){n=n||r(21),t=t||{},this.objectMode=!!t.objectMode,e instanceof n&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var a=t.highWaterMark,s=this.objectMode?16:16384;this.highWaterMark=a||0===a?a:s,this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var u=!1===t.decodeStrings;this.decodeStrings=!u,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var r=t._writableState,n=r.sync,a=r.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(r),e)!function(t,e,r,n,o){--e.pendingcb,r?i(o,n):o(n),t._writableState.errorEmitted=!0,t.emit("error",n)}(t,r,n,e,a);else{var s=w(r);s||r.corked||r.bufferProcessing||!r.bufferedRequest||m(t,r),n?o(v,t,r,s,a):v(t,r,s,a)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new S(this)}function d(t){if(n=n||r(21),!(c.call(d,this)||this instanceof n))return new d(t);this._writableState=new y(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev)),s.call(this)}function g(t,e,r,n,i,o,a){e.writelen=n,e.writecb=a,e.writing=!0,e.sync=!0,r?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function v(t,e,r,n){r||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,n(),b(t,e)}function m(t,e){e.bufferProcessing=!0;var r=e.bufferedRequest;if(t._writev&&r&&r.next){var n=e.bufferedRequestCount,i=new Array(n),o=e.corkedRequestsFree;o.entry=r;for(var a=0;r;)i[a]=r,r=r.next,a+=1;g(t,e,!0,e.length,i,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new S(e)}else{for(;r;){var s=r.chunk,u=r.encoding,c=r.callback;if(g(t,e,!1,e.objectMode?1:s.length,s,u,c),r=r.next,e.writing)break}null===r&&(e.lastBufferedRequest=null)}e.bufferedRequestCount=0,e.bufferedRequest=r,e.bufferProcessing=!1}function w(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function _(t,e){e.prefinished||(e.prefinished=!0,t.emit("prefinish"))}function b(t,e){var r=w(e);return r&&(0===e.pendingcb?(_(t,e),e.finished=!0,t.emit("finish")):_(t,e)),r}function S(t){var e=this;this.next=null,this.entry=null,this.finish=function(r){var n=e.entry;for(e.entry=null;n;){var i=n.callback;t.pendingcb--,i(r),n=n.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}}a.inherits(d,s),y.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(y.prototype,"buffer",{get:u.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(c=Function.prototype[Symbol.hasInstance],Object.defineProperty(d,Symbol.hasInstance,{value:function(t){return!!c.call(this,t)||t&&t._writableState instanceof y}})):c=function(t){return t instanceof this},d.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},d.prototype.write=function(t,e,r){var n=this._writableState,o=!1,a=f.isBuffer(t);return"function"==typeof e&&(r=e,e=null),a?e="buffer":e||(e=n.defaultEncoding),"function"!=typeof r&&(r=l),n.ended?function(t,e){var r=new Error("write after end");t.emit("error",r),i(e,r)}(this,r):(a||function(t,e,r,n){var o=!0,a=!1;return null===r?a=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||e.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(t.emit("error",a),i(n,a),o=!1),o}(this,n,t,r))&&(n.pendingcb++,o=function(t,e,r,n,i,o){r||(n=function(t,e,r){return t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=p.from(e,r)),e}(e,n,i),f.isBuffer(n)&&(i="buffer"));var a=e.objectMode?1:n.length;e.length+=a;var s=e.length<e.highWaterMark;if(s||(e.needDrain=!0),e.writing||e.corked){var u=e.lastBufferedRequest;e.lastBufferedRequest=new h(n,i,o),u?u.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else g(t,e,!1,a,n,i,o);return s}(this,n,a,t,e,r)),o},d.prototype.cork=function(){this._writableState.corked++},d.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||m(this,t))},d.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},d.prototype._write=function(t,e,r){r(new Error("_write() is not implemented"))},d.prototype._writev=null,d.prototype.end=function(t,e,r){var n=this._writableState;"function"==typeof t?(r=t,t=null,e=null):"function"==typeof e&&(r=e,e=null),null!=t&&this.write(t,e),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(t,e,r){e.ending=!0,b(t,e),r&&(e.finished?i(r):t.once("finish",r)),e.ended=!0,t.writable=!1}(this,n,r)}}).call(e,r(6))},function(t,e){(function(e){function r(t){try{if(!e.localStorage)return!1}catch(t){return!1}var r=e.localStorage[t];return null!=r&&"true"===String(r).toLowerCase()}t.exports=function(t,e){if(r("noDeprecation"))return t;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(e);r("traceDeprecation")?console.trace(e):console.warn(e),n=!0}return t.apply(this,arguments)}}}).call(e,function(){return this}())},function(t,e,r){var n=r(2).Buffer,i=n.isEncoding||function(t){switch(t&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}},o=e.StringDecoder=function(t){switch(this.encoding=(t||"utf8").toLowerCase().replace(/[-_]/,""),function(t){if(t&&!i(t))throw new Error("Unknown encoding: "+t)}(t),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=s;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=u;break;default:return void(this.write=a)}this.charBuffer=new n(6),this.charReceived=0,this.charLength=0};function a(t){return t.toString(this.encoding)}function s(t){this.charReceived=t.length%2,this.charLength=this.charReceived?2:0}function u(t){this.charReceived=t.length%3,this.charLength=this.charReceived?3:0}o.prototype.write=function(t){for(var e="";this.charLength;){var r=t.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:t.length;if(t.copy(this.charBuffer,this.charReceived,0,r),this.charReceived+=r,this.charReceived<this.charLength)return"";if(t=t.slice(r,t.length),!((n=(e=this.charBuffer.slice(0,this.charLength).toString(this.encoding)).charCodeAt(e.length-1))>=55296&&n<=56319)){if(this.charReceived=this.charLength=0,0===t.length)return e;break}this.charLength+=this.surrogateSize,e=""}this.detectIncompleteChar(t);var n,i=t.length;if(this.charLength&&(t.copy(this.charBuffer,0,t.length-this.charReceived,i),i-=this.charReceived),i=(e+=t.toString(this.encoding,0,i)).length-1,(n=e.charCodeAt(i))>=55296&&n<=56319){var o=this.surrogateSize;return this.charLength+=o,this.charReceived+=o,this.charBuffer.copy(this.charBuffer,o,0,o),t.copy(this.charBuffer,0,0,o),e.substring(0,i)}return e},o.prototype.detectIncompleteChar=function(t){for(var e=t.length>=3?3:t.length;e>0;e--){var r=t[t.length-e];if(1==e&&r>>5==6){this.charLength=2;break}if(e<=2&&r>>4==14){this.charLength=3;break}if(e<=3&&r>>3==30){this.charLength=4;break}}this.charReceived=e},o.prototype.end=function(t){var e="";if(t&&t.length&&(e=this.write(t)),this.charReceived){var r=this.charReceived,n=this.charBuffer,i=this.encoding;e+=n.slice(0,r).toString(i)}return e}},function(t,e,r){"use strict";t.exports=a;var n=r(21),i=r(18);function o(t){this.afterTransform=function(e,r){return function(t,e,r){var n=t._transformState;n.transforming=!1;var i=n.writecb;if(!i)return t.emit("error",new Error("no writecb in Transform class"));n.writechunk=null,n.writecb=null,null!=r&&t.push(r),i(e);var o=t._readableState;o.reading=!1,(o.needReadable||o.length<o.highWaterMark)&&t._read(o.highWaterMark)}(t,e,r)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null,this.writeencoding=null}function a(t){if(!(this instanceof a))return new a(t);n.call(this,t),this._transformState=new o(this);var e=this;this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.once("prefinish",(function(){"function"==typeof this._flush?this._flush((function(t,r){s(e,t,r)})):s(e)}))}function s(t,e,r){if(e)return t.emit("error",e);null!=r&&t.push(r);var n=t._writableState,i=t._transformState;if(n.length)throw new Error("Calling transform done when ws.length != 0");if(i.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=r(12),i.inherits(a,n),a.prototype.push=function(t,e){return this._transformState.needTransform=!1,n.prototype.push.call(this,t,e)},a.prototype._transform=function(t,e,r){throw new Error("_transform() is not implemented")},a.prototype._write=function(t,e,r){var n=this._transformState;if(n.writecb=r,n.writechunk=t,n.writeencoding=e,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},a.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0}},function(t,e,r){"use strict";t.exports=o;var n=r(25),i=r(18);function o(t){if(!(this instanceof o))return new o(t);n.call(this,t)}i.inherits=r(12),i.inherits(o,n),o.prototype._transform=function(t,e,r){r(null,t)}},function(t,e,r){t.exports=r(22)},function(t,e,r){t.exports=r(21)},function(t,e,r){t.exports=r(25)},function(t,e,r){t.exports=r(26)},function(t,e,r){"use strict";var n=r(32),i=r(33),o=r(38),a=r(39),s=r(40),u=r(41),c=r(42),f=Object.prototype.toString;function p(t){if(!(this instanceof p))return new p(t);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new u,this.strm.avail_out=0;var r=n.inflateInit2(this.strm,e.windowBits);if(r!==a.Z_OK)throw new Error(s[r]);this.header=new c,n.inflateGetHeader(this.strm,this.header)}function l(t,e){var r=new p(e);if(r.push(t,!0),r.err)throw r.msg||s[r.err];return r.result}p.prototype.push=function(t,e){var r,s,u,c,p,l,h=this.strm,y=this.options.chunkSize,d=this.options.dictionary,g=!1;if(this.ended)return!1;s=e===~~e?e:!0===e?a.Z_FINISH:a.Z_NO_FLUSH,"string"==typeof t?h.input=o.binstring2buf(t):"[object ArrayBuffer]"===f.call(t)?h.input=new Uint8Array(t):h.input=t,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new i.Buf8(y),h.next_out=0,h.avail_out=y),(r=n.inflate(h,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&d&&(l="string"==typeof d?o.string2buf(d):"[object ArrayBuffer]"===f.call(d)?new Uint8Array(d):d,r=n.inflateSetDictionary(this.strm,l)),r===a.Z_BUF_ERROR&&!0===g&&(r=a.Z_OK,g=!1),r!==a.Z_STREAM_END&&r!==a.Z_OK)return this.onEnd(r),this.ended=!0,!1;h.next_out&&(0!==h.avail_out&&r!==a.Z_STREAM_END&&(0!==h.avail_in||s!==a.Z_FINISH&&s!==a.Z_SYNC_FLUSH)||("string"===this.options.to?(u=o.utf8border(h.output,h.next_out),c=h.next_out-u,p=o.buf2string(h.output,u),h.next_out=c,h.avail_out=y-c,c&&i.arraySet(h.output,h.output,u,c,0),this.onData(p)):this.onData(i.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(g=!0)}while((h.avail_in>0||0===h.avail_out)&&r!==a.Z_STREAM_END);return r===a.Z_STREAM_END&&(s=a.Z_FINISH),s===a.Z_FINISH?(r=n.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===a.Z_OK):s!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),h.avail_out=0,!0)},p.prototype.onData=function(t){this.chunks.push(t)},p.prototype.onEnd=function(t){t===a.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Inflate=p,e.inflate=l,e.inflateRaw=function(t,e){return(e=e||{}).raw=!0,l(t,e)},e.ungzip=l},function(t,e,r){"use strict";var n=r(33),i=r(34),o=r(35),a=r(36),s=r(37),u=0,c=-2,f=1,p=12,l=30,h=852,y=592;function d(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function g(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function v(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=f,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new n.Buf32(h),e.distcode=e.distdyn=new n.Buf32(y),e.sane=1,e.back=-1,u):c}function m(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,v(t)):c}function w(t,e){var r,n;return t&&t.state?(n=t.state,e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?c:(null!==n.window&&n.wbits!==e&&(n.window=null),n.wrap=r,n.wbits=e,m(t))):c}function _(t,e){var r,n;return t?(n=new g,t.state=n,n.window=null,(r=w(t,e))!==u&&(t.state=null),r):c}var b,S,E=!0;function O(t){if(E){var e;for(b=new n.Buf32(512),S=new n.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(s(1,t.lens,0,288,b,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;s(2,t.lens,0,32,S,0,t.work,{bits:5}),E=!1}t.lencode=b,t.lenbits=9,t.distcode=S,t.distbits=5}function I(t,e,r,i){var o,a=t.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new n.Buf8(a.wsize)),i>=a.wsize?(n.arraySet(a.window,e,r-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):((o=a.wsize-a.wnext)>i&&(o=i),n.arraySet(a.window,e,r-i,o,a.wnext),(i-=o)?(n.arraySet(a.window,e,r-i,i,0),a.wnext=i,a.whave=a.wsize):(a.wnext+=o,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=o))),0}e.inflateReset=m,e.inflateReset2=w,e.inflateResetKeep=v,e.inflateInit=function(t){return _(t,15)},e.inflateInit2=_,e.inflate=function(t,e){var r,h,y,g,v,m,w,_,b,S,E,k,F,A,N,R,T,x,L,D,P,j,U,M,C=0,B=new n.Buf8(4),z=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return c;(r=t.state).mode===p&&(r.mode=13),v=t.next_out,y=t.output,w=t.avail_out,g=t.next_in,h=t.input,m=t.avail_in,_=r.hold,b=r.bits,S=m,E=w,j=u;t:for(;;)switch(r.mode){case f:if(0===r.wrap){r.mode=13;break}for(;b<16;){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}if(2&r.wrap&&35615===_){r.check=0,B[0]=255&_,B[1]=_>>>8&255,r.check=o(r.check,B,2,0),_=0,b=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&_)<<8)+(_>>8))%31){t.msg="incorrect header check",r.mode=l;break}if(8!=(15&_)){t.msg="unknown compression method",r.mode=l;break}if(b-=4,P=8+(15&(_>>>=4)),0===r.wbits)r.wbits=P;else if(P>r.wbits){t.msg="invalid window size",r.mode=l;break}r.dmax=1<<P,t.adler=r.check=1,r.mode=512&_?10:p,_=0,b=0;break;case 2:for(;b<16;){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}if(r.flags=_,8!=(255&r.flags)){t.msg="unknown compression method",r.mode=l;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=l;break}r.head&&(r.head.text=_>>8&1),512&r.flags&&(B[0]=255&_,B[1]=_>>>8&255,r.check=o(r.check,B,2,0)),_=0,b=0,r.mode=3;case 3:for(;b<32;){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}r.head&&(r.head.time=_),512&r.flags&&(B[0]=255&_,B[1]=_>>>8&255,B[2]=_>>>16&255,B[3]=_>>>24&255,r.check=o(r.check,B,4,0)),_=0,b=0,r.mode=4;case 4:for(;b<16;){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}r.head&&(r.head.xflags=255&_,r.head.os=_>>8),512&r.flags&&(B[0]=255&_,B[1]=_>>>8&255,r.check=o(r.check,B,2,0)),_=0,b=0,r.mode=5;case 5:if(1024&r.flags){for(;b<16;){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}r.length=_,r.head&&(r.head.extra_len=_),512&r.flags&&(B[0]=255&_,B[1]=_>>>8&255,r.check=o(r.check,B,2,0)),_=0,b=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&((k=r.length)>m&&(k=m),k&&(r.head&&(P=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,h,g,k,P)),512&r.flags&&(r.check=o(r.check,h,k,g)),m-=k,g+=k,r.length-=k),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===m)break t;k=0;do{P=h[g+k++],r.head&&P&&r.length<65536&&(r.head.name+=String.fromCharCode(P))}while(P&&k<m);if(512&r.flags&&(r.check=o(r.check,h,k,g)),m-=k,g+=k,P)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===m)break t;k=0;do{P=h[g+k++],r.head&&P&&r.length<65536&&(r.head.comment+=String.fromCharCode(P))}while(P&&k<m);if(512&r.flags&&(r.check=o(r.check,h,k,g)),m-=k,g+=k,P)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;b<16;){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}if(_!==(65535&r.check)){t.msg="header crc mismatch",r.mode=l;break}_=0,b=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=p;break;case 10:for(;b<32;){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}t.adler=r.check=d(_),_=0,b=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=v,t.avail_out=w,t.next_in=g,t.avail_in=m,r.hold=_,r.bits=b,2;t.adler=r.check=1,r.mode=p;case p:if(5===e||6===e)break t;case 13:if(r.last){_>>>=7&b,b-=7&b,r.mode=27;break}for(;b<3;){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}switch(r.last=1&_,b-=1,3&(_>>>=1)){case 0:r.mode=14;break;case 1:if(O(r),r.mode=20,6===e){_>>>=2,b-=2;break t}break;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=l}_>>>=2,b-=2;break;case 14:for(_>>>=7&b,b-=7&b;b<32;){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}if((65535&_)!=(_>>>16^65535)){t.msg="invalid stored block lengths",r.mode=l;break}if(r.length=65535&_,_=0,b=0,r.mode=15,6===e)break t;case 15:r.mode=16;case 16:if(k=r.length){if(k>m&&(k=m),k>w&&(k=w),0===k)break t;n.arraySet(y,h,g,k,v),m-=k,g+=k,w-=k,v+=k,r.length-=k;break}r.mode=p;break;case 17:for(;b<14;){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}if(r.nlen=257+(31&_),_>>>=5,b-=5,r.ndist=1+(31&_),_>>>=5,b-=5,r.ncode=4+(15&_),_>>>=4,b-=4,r.nlen>286||r.ndist>30){t.msg="too many length or distance symbols",r.mode=l;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;b<3;){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}r.lens[z[r.have++]]=7&_,_>>>=3,b-=3}for(;r.have<19;)r.lens[z[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,U={bits:r.lenbits},j=s(0,r.lens,0,19,r.lencode,0,r.work,U),r.lenbits=U.bits,j){t.msg="invalid code lengths set",r.mode=l;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;R=(C=r.lencode[_&(1<<r.lenbits)-1])>>>16&255,T=65535&C,!((N=C>>>24)<=b);){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}if(T<16)_>>>=N,b-=N,r.lens[r.have++]=T;else{if(16===T){for(M=N+2;b<M;){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}if(_>>>=N,b-=N,0===r.have){t.msg="invalid bit length repeat",r.mode=l;break}P=r.lens[r.have-1],k=3+(3&_),_>>>=2,b-=2}else if(17===T){for(M=N+3;b<M;){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}b-=N,P=0,k=3+(7&(_>>>=N)),_>>>=3,b-=3}else{for(M=N+7;b<M;){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}b-=N,P=0,k=11+(127&(_>>>=N)),_>>>=7,b-=7}if(r.have+k>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=l;break}for(;k--;)r.lens[r.have++]=P}}if(r.mode===l)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=l;break}if(r.lenbits=9,U={bits:r.lenbits},j=s(1,r.lens,0,r.nlen,r.lencode,0,r.work,U),r.lenbits=U.bits,j){t.msg="invalid literal/lengths set",r.mode=l;break}if(r.distbits=6,r.distcode=r.distdyn,U={bits:r.distbits},j=s(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,U),r.distbits=U.bits,j){t.msg="invalid distances set",r.mode=l;break}if(r.mode=20,6===e)break t;case 20:r.mode=21;case 21:if(m>=6&&w>=258){t.next_out=v,t.avail_out=w,t.next_in=g,t.avail_in=m,r.hold=_,r.bits=b,a(t,E),v=t.next_out,y=t.output,w=t.avail_out,g=t.next_in,h=t.input,m=t.avail_in,_=r.hold,b=r.bits,r.mode===p&&(r.back=-1);break}for(r.back=0;R=(C=r.lencode[_&(1<<r.lenbits)-1])>>>16&255,T=65535&C,!((N=C>>>24)<=b);){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}if(R&&0==(240&R)){for(x=N,L=R,D=T;R=(C=r.lencode[D+((_&(1<<x+L)-1)>>x)])>>>16&255,T=65535&C,!(x+(N=C>>>24)<=b);){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}_>>>=x,b-=x,r.back+=x}if(_>>>=N,b-=N,r.back+=N,r.length=T,0===R){r.mode=26;break}if(32&R){r.back=-1,r.mode=p;break}if(64&R){t.msg="invalid literal/length code",r.mode=l;break}r.extra=15&R,r.mode=22;case 22:if(r.extra){for(M=r.extra;b<M;){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}r.length+=_&(1<<r.extra)-1,_>>>=r.extra,b-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;R=(C=r.distcode[_&(1<<r.distbits)-1])>>>16&255,T=65535&C,!((N=C>>>24)<=b);){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}if(0==(240&R)){for(x=N,L=R,D=T;R=(C=r.distcode[D+((_&(1<<x+L)-1)>>x)])>>>16&255,T=65535&C,!(x+(N=C>>>24)<=b);){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}_>>>=x,b-=x,r.back+=x}if(_>>>=N,b-=N,r.back+=N,64&R){t.msg="invalid distance code",r.mode=l;break}r.offset=T,r.extra=15&R,r.mode=24;case 24:if(r.extra){for(M=r.extra;b<M;){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}r.offset+=_&(1<<r.extra)-1,_>>>=r.extra,b-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=l;break}r.mode=25;case 25:if(0===w)break t;if(k=E-w,r.offset>k){if((k=r.offset-k)>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=l;break}k>r.wnext?(k-=r.wnext,F=r.wsize-k):F=r.wnext-k,k>r.length&&(k=r.length),A=r.window}else A=y,F=v-r.offset,k=r.length;k>w&&(k=w),w-=k,r.length-=k;do{y[v++]=A[F++]}while(--k);0===r.length&&(r.mode=21);break;case 26:if(0===w)break t;y[v++]=r.length,w--,r.mode=21;break;case 27:if(r.wrap){for(;b<32;){if(0===m)break t;m--,_|=h[g++]<<b,b+=8}if(E-=w,t.total_out+=E,r.total+=E,E&&(t.adler=r.check=r.flags?o(r.check,y,E,v-E):i(r.check,y,E,v-E)),E=w,(r.flags?_:d(_))!==r.check){t.msg="incorrect data check",r.mode=l;break}_=0,b=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;b<32;){if(0===m)break t;m--,_+=h[g++]<<b,b+=8}if(_!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=l;break}_=0,b=0}r.mode=29;case 29:j=1;break t;case l:j=-3;break t;case 31:return-4;default:return c}return t.next_out=v,t.avail_out=w,t.next_in=g,t.avail_in=m,r.hold=_,r.bits=b,(r.wsize||E!==t.avail_out&&r.mode<l&&(r.mode<27||4!==e))&&I(t,t.output,t.next_out,E-t.avail_out)?(r.mode=31,-4):(S-=t.avail_in,E-=t.avail_out,t.total_in+=S,t.total_out+=E,r.total+=E,r.wrap&&E&&(t.adler=r.check=r.flags?o(r.check,y,E,t.next_out-E):i(r.check,y,E,t.next_out-E)),t.data_type=r.bits+(r.last?64:0)+(r.mode===p?128:0)+(20===r.mode||15===r.mode?256:0),(0===S&&0===E||4===e)&&j===u&&(j=-5),j)},e.inflateEnd=function(t){if(!t||!t.state)return c;var e=t.state;return e.window&&(e.window=null),t.state=null,u},e.inflateGetHeader=function(t,e){var r;return t&&t.state?0==(2&(r=t.state).wrap)?c:(r.head=e,e.done=!1,u):c},e.inflateSetDictionary=function(t,e){var r,n=e.length;return t&&t.state?0!==(r=t.state).wrap&&11!==r.mode?c:11===r.mode&&i(1,e,n,0)!==r.check?-3:I(t,e,n,n)?(r.mode=31,-4):(r.havedict=1,u):c},e.inflateInfo="pako inflate (from Nodeca project)"},function(t,e){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;e.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(t[n]=r[n])}}return t},e.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var n={arraySet:function(t,e,r,n,i){if(e.subarray&&t.subarray)t.set(e.subarray(r,r+n),i);else for(var o=0;o<n;o++)t[i+o]=e[r+o]},flattenChunks:function(t){var e,r,n,i,o,a;for(n=0,e=0,r=t.length;e<r;e++)n+=t[e].length;for(a=new Uint8Array(n),i=0,e=0,r=t.length;e<r;e++)o=t[e],a.set(o,i),i+=o.length;return a}},i={arraySet:function(t,e,r,n,i){for(var o=0;o<n;o++)t[i+o]=e[r+o]},flattenChunks:function(t){return[].concat.apply([],t)}};e.setTyped=function(t){t?(e.Buf8=Uint8Array,e.Buf16=Uint16Array,e.Buf32=Int32Array,e.assign(e,n)):(e.Buf8=Array,e.Buf16=Array,e.Buf32=Array,e.assign(e,i))},e.setTyped(r)},function(t,e){"use strict";t.exports=function(t,e,r,n){for(var i=65535&t|0,o=t>>>16&65535|0,a=0;0!==r;){r-=a=r>2e3?2e3:r;do{o=o+(i=i+e[n++]|0)|0}while(--a);i%=65521,o%=65521}return i|o<<16|0}},function(t,e){"use strict";var r=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var n=0;n<8;n++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();t.exports=function(t,e,n,i){var o=r,a=i+n;t^=-1;for(var s=i;s<a;s++)t=t>>>8^o[255&(t^e[s])];return-1^t}},function(t,e){"use strict";t.exports=function(t,e){var r,n,i,o,a,s,u,c,f,p,l,h,y,d,g,v,m,w,_,b,S,E,O,I,k;r=t.state,n=t.next_in,I=t.input,i=n+(t.avail_in-5),o=t.next_out,k=t.output,a=o-(e-t.avail_out),s=o+(t.avail_out-257),u=r.dmax,c=r.wsize,f=r.whave,p=r.wnext,l=r.window,h=r.hold,y=r.bits,d=r.lencode,g=r.distcode,v=(1<<r.lenbits)-1,m=(1<<r.distbits)-1;t:do{y<15&&(h+=I[n++]<<y,y+=8,h+=I[n++]<<y,y+=8),w=d[h&v];e:for(;;){if(h>>>=_=w>>>24,y-=_,0==(_=w>>>16&255))k[o++]=65535&w;else{if(!(16&_)){if(0==(64&_)){w=d[(65535&w)+(h&(1<<_)-1)];continue e}if(32&_){r.mode=12;break t}t.msg="invalid literal/length code",r.mode=30;break t}b=65535&w,(_&=15)&&(y<_&&(h+=I[n++]<<y,y+=8),b+=h&(1<<_)-1,h>>>=_,y-=_),y<15&&(h+=I[n++]<<y,y+=8,h+=I[n++]<<y,y+=8),w=g[h&m];r:for(;;){if(h>>>=_=w>>>24,y-=_,!(16&(_=w>>>16&255))){if(0==(64&_)){w=g[(65535&w)+(h&(1<<_)-1)];continue r}t.msg="invalid distance code",r.mode=30;break t}if(S=65535&w,y<(_&=15)&&(h+=I[n++]<<y,(y+=8)<_&&(h+=I[n++]<<y,y+=8)),(S+=h&(1<<_)-1)>u){t.msg="invalid distance too far back",r.mode=30;break t}if(h>>>=_,y-=_,S>(_=o-a)){if((_=S-_)>f&&r.sane){t.msg="invalid distance too far back",r.mode=30;break t}if(E=0,O=l,0===p){if(E+=c-_,_<b){b-=_;do{k[o++]=l[E++]}while(--_);E=o-S,O=k}}else if(p<_){if(E+=c+p-_,(_-=p)<b){b-=_;do{k[o++]=l[E++]}while(--_);if(E=0,p<b){b-=_=p;do{k[o++]=l[E++]}while(--_);E=o-S,O=k}}}else if(E+=p-_,_<b){b-=_;do{k[o++]=l[E++]}while(--_);E=o-S,O=k}for(;b>2;)k[o++]=O[E++],k[o++]=O[E++],k[o++]=O[E++],b-=3;b&&(k[o++]=O[E++],b>1&&(k[o++]=O[E++]))}else{E=o-S;do{k[o++]=k[E++],k[o++]=k[E++],k[o++]=k[E++],b-=3}while(b>2);b&&(k[o++]=k[E++],b>1&&(k[o++]=k[E++]))}break}}break}}while(n<i&&o<s);n-=b=y>>3,h&=(1<<(y-=b<<3))-1,t.next_in=n,t.next_out=o,t.avail_in=n<i?i-n+5:5-(n-i),t.avail_out=o<s?s-o+257:257-(o-s),r.hold=h,r.bits=y}},function(t,e,r){"use strict";var n=r(33),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(t,e,r,u,c,f,p,l){var h,y,d,g,v,m,w,_,b,S=l.bits,E=0,O=0,I=0,k=0,F=0,A=0,N=0,R=0,T=0,x=0,L=null,D=0,P=new n.Buf16(16),j=new n.Buf16(16),U=null,M=0;for(E=0;E<=15;E++)P[E]=0;for(O=0;O<u;O++)P[e[r+O]]++;for(F=S,k=15;k>=1&&0===P[k];k--);if(F>k&&(F=k),0===k)return c[f++]=20971520,c[f++]=20971520,l.bits=1,0;for(I=1;I<k&&0===P[I];I++);for(F<I&&(F=I),R=1,E=1;E<=15;E++)if(R<<=1,(R-=P[E])<0)return-1;if(R>0&&(0===t||1!==k))return-1;for(j[1]=0,E=1;E<15;E++)j[E+1]=j[E]+P[E];for(O=0;O<u;O++)0!==e[r+O]&&(p[j[e[r+O]]++]=O);if(0===t?(L=U=p,m=19):1===t?(L=i,D-=257,U=o,M-=257,m=256):(L=a,U=s,m=-1),x=0,O=0,E=I,v=f,A=F,N=0,d=-1,g=(T=1<<F)-1,1===t&&T>852||2===t&&T>592)return 1;for(;;){w=E-N,p[O]<m?(_=0,b=p[O]):p[O]>m?(_=U[M+p[O]],b=L[D+p[O]]):(_=96,b=0),h=1<<E-N,I=y=1<<A;do{c[v+(x>>N)+(y-=h)]=w<<24|_<<16|b|0}while(0!==y);for(h=1<<E-1;x&h;)h>>=1;if(0!==h?(x&=h-1,x+=h):x=0,O++,0==--P[E]){if(E===k)break;E=e[r+p[O]]}if(E>F&&(x&g)!==d){for(0===N&&(N=F),v+=I,R=1<<(A=E-N);A+N<k&&!((R-=P[A+N])<=0);)A++,R<<=1;if(T+=1<<A,1===t&&T>852||2===t&&T>592)return 1;c[d=x&g]=F<<24|A<<16|v-f|0}}return 0!==x&&(c[v+x]=E-N<<24|64<<16|0),l.bits=F,0}},function(t,e,r){"use strict";var n=r(33),i=!0,o=!0;try{String.fromCharCode.apply(null,[0])}catch(t){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){o=!1}for(var a=new n.Buf8(256),s=0;s<256;s++)a[s]=s>=252?6:s>=248?5:s>=240?4:s>=224?3:s>=192?2:1;function u(t,e){if(e<65537&&(t.subarray&&o||!t.subarray&&i))return String.fromCharCode.apply(null,n.shrinkBuf(t,e));for(var r="",a=0;a<e;a++)r+=String.fromCharCode(t[a]);return r}a[254]=a[254]=1,e.string2buf=function(t){var e,r,i,o,a,s=t.length,u=0;for(o=0;o<s;o++)55296==(64512&(r=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=t.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(i-56320),o++),u+=r<128?1:r<2048?2:r<65536?3:4;for(e=new n.Buf8(u),a=0,o=0;a<u;o++)55296==(64512&(r=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=t.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(i-56320),o++),r<128?e[a++]=r:r<2048?(e[a++]=192|r>>>6,e[a++]=128|63&r):r<65536?(e[a++]=224|r>>>12,e[a++]=128|r>>>6&63,e[a++]=128|63&r):(e[a++]=240|r>>>18,e[a++]=128|r>>>12&63,e[a++]=128|r>>>6&63,e[a++]=128|63&r);return e},e.buf2binstring=function(t){return u(t,t.length)},e.binstring2buf=function(t){for(var e=new n.Buf8(t.length),r=0,i=e.length;r<i;r++)e[r]=t.charCodeAt(r);return e},e.buf2string=function(t,e){var r,n,i,o,s=e||t.length,c=new Array(2*s);for(n=0,r=0;r<s;)if((i=t[r++])<128)c[n++]=i;else if((o=a[i])>4)c[n++]=65533,r+=o-1;else{for(i&=2===o?31:3===o?15:7;o>1&&r<s;)i=i<<6|63&t[r++],o--;o>1?c[n++]=65533:i<65536?c[n++]=i:(i-=65536,c[n++]=55296|i>>10&1023,c[n++]=56320|1023&i)}return u(c,n)},e.utf8border=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;r>=0&&128==(192&t[r]);)r--;return r<0||0===r?e:r+a[t[r]]>e?r:e}},function(t,e){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},function(t,e){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},function(t,e){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},function(t,e){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}}])},t.exports=e()},665:(t,e,r)=>{var n=r(709);t.exports=n.BFSRequire("buffer").Buffer},837:(t,e,r)=>{var n=r(709);t.exports=n.BFSRequire("fs")},668:(t,e,r)=>{var n=r(709);t.exports=n.BFSRequire("process")},99:(t,e,r)=>{"use strict";var n=r(870),i=r(755),o=i(n("String.prototype.indexOf"));t.exports=function(t,e){var r=n(t,!!e);return"function"==typeof r&&o(t,".prototype.")>-1?i(r):r}},755:(t,e,r)=>{"use strict";var n=r(569),i=r(870),o=i("%Function.prototype.apply%"),a=i("%Function.prototype.call%"),s=i("%Reflect.apply%",!0)||n.call(a,o),u=i("%Object.getOwnPropertyDescriptor%",!0),c=i("%Object.defineProperty%",!0),f=i("%Math.max%");if(c)try{c({},"a",{value:1})}catch(t){c=null}t.exports=function(t){var e=s(n,a,arguments);return u&&c&&u(e,"length").configurable&&c(e,"length",{value:1+f(0,t.length-(arguments.length-1))}),e};var p=function(){return s(n,o,arguments)};c?c(t.exports,"apply",{value:p}):t.exports.apply=p},904:(t,e,r)=>{"use strict";var n=r(655),i=Object.prototype.toString,o=Object.prototype.hasOwnProperty;t.exports=function(t,e,r){if(!n(e))throw new TypeError("iterator must be a function");var a;arguments.length>=3&&(a=r),"[object Array]"===i.call(t)?function(t,e,r){for(var n=0,i=t.length;n<i;n++)o.call(t,n)&&(null==r?e(t[n],n,t):e.call(r,t[n],n,t))}(t,e,a):"string"==typeof t?function(t,e,r){for(var n=0,i=t.length;n<i;n++)null==r?e(t.charAt(n),n,t):e.call(r,t.charAt(n),n,t)}(t,e,a):function(t,e,r){for(var n in t)o.call(t,n)&&(null==r?e(t[n],n,t):e.call(r,t[n],n,t))}(t,e,a)}},640:t=>{"use strict";var e=Array.prototype.slice,r=Object.prototype.toString;t.exports=function(t){var n=this;if("function"!=typeof n||"[object Function]"!==r.call(n))throw new TypeError("Function.prototype.bind called on incompatible "+n);for(var i,o=e.call(arguments,1),a=Math.max(0,n.length-o.length),s=[],u=0;u<a;u++)s.push("$"+u);if(i=Function("binder","return function ("+s.join(",")+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof i){var r=n.apply(this,o.concat(e.call(arguments)));return Object(r)===r?r:this}return n.apply(t,o.concat(e.call(arguments)))})),n.prototype){var c=function(){};c.prototype=n.prototype,i.prototype=new c,c.prototype=null}return i}},569:(t,e,r)=>{"use strict";var n=r(640);t.exports=Function.prototype.bind||n},870:(t,e,r)=>{"use strict";var n,i=SyntaxError,o=Function,a=TypeError,s=function(t){try{return o('"use strict"; return ('+t+").constructor;")()}catch(t){}},u=Object.getOwnPropertyDescriptor;if(u)try{u({},"")}catch(t){u=null}var c=function(){throw new a},f=u?function(){try{return c}catch(t){try{return u(arguments,"callee").get}catch(t){return c}}}():c,p=r(143)(),l=r(413)(),h=Object.getPrototypeOf||(l?function(t){return t.__proto__}:null),y={},d="undefined"!=typeof Uint8Array&&h?h(Uint8Array):n,g={"%AggregateError%":"undefined"==typeof AggregateError?n:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?n:ArrayBuffer,"%ArrayIteratorPrototype%":p&&h?h([][Symbol.iterator]()):n,"%AsyncFromSyncIteratorPrototype%":n,"%AsyncFunction%":y,"%AsyncGenerator%":y,"%AsyncGeneratorFunction%":y,"%AsyncIteratorPrototype%":y,"%Atomics%":"undefined"==typeof Atomics?n:Atomics,"%BigInt%":"undefined"==typeof BigInt?n:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?n:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?n:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?n:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?n:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?n:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?n:FinalizationRegistry,"%Function%":o,"%GeneratorFunction%":y,"%Int8Array%":"undefined"==typeof Int8Array?n:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?n:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?n:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":p&&h?h(h([][Symbol.iterator]())):n,"%JSON%":"object"==typeof JSON?JSON:n,"%Map%":"undefined"==typeof Map?n:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&p&&h?h((new Map)[Symbol.iterator]()):n,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?n:Promise,"%Proxy%":"undefined"==typeof Proxy?n:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?n:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?n:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&p&&h?h((new Set)[Symbol.iterator]()):n,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?n:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":p&&h?h(""[Symbol.iterator]()):n,"%Symbol%":p?Symbol:n,"%SyntaxError%":i,"%ThrowTypeError%":f,"%TypedArray%":d,"%TypeError%":a,"%Uint8Array%":"undefined"==typeof Uint8Array?n:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?n:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?n:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?n:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?n:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?n:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?n:WeakSet};if(h)try{null.error}catch(t){var v=h(h(t));g["%Error.prototype%"]=v}var m=function t(e){var r;if("%AsyncFunction%"===e)r=s("async function () {}");else if("%GeneratorFunction%"===e)r=s("function* () {}");else if("%AsyncGeneratorFunction%"===e)r=s("async function* () {}");else if("%AsyncGenerator%"===e){var n=t("%AsyncGeneratorFunction%");n&&(r=n.prototype)}else if("%AsyncIteratorPrototype%"===e){var i=t("%AsyncGenerator%");i&&h&&(r=h(i.prototype))}return g[e]=r,r},w={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},_=r(569),b=r(416),S=_.call(Function.call,Array.prototype.concat),E=_.call(Function.apply,Array.prototype.splice),O=_.call(Function.call,String.prototype.replace),I=_.call(Function.call,String.prototype.slice),k=_.call(Function.call,RegExp.prototype.exec),F=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,A=/\\(\\)?/g,N=function(t,e){var r,n=t;if(b(w,n)&&(n="%"+(r=w[n])[0]+"%"),b(g,n)){var o=g[n];if(o===y&&(o=m(n)),void 0===o&&!e)throw new a("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:r,name:n,value:o}}throw new i("intrinsic "+t+" does not exist!")};t.exports=function(t,e){if("string"!=typeof t||0===t.length)throw new a("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new a('"allowMissing" argument must be a boolean');if(null===k(/^%?[^%]*%?$/,t))throw new i("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var r=function(t){var e=I(t,0,1),r=I(t,-1);if("%"===e&&"%"!==r)throw new i("invalid intrinsic syntax, expected closing `%`");if("%"===r&&"%"!==e)throw new i("invalid intrinsic syntax, expected opening `%`");var n=[];return O(t,F,(function(t,e,r,i){n[n.length]=r?O(i,A,"$1"):e||t})),n}(t),n=r.length>0?r[0]:"",o=N("%"+n+"%",e),s=o.name,c=o.value,f=!1,p=o.alias;p&&(n=p[0],E(r,S([0,1],p)));for(var l=1,h=!0;l<r.length;l+=1){var y=r[l],d=I(y,0,1),v=I(y,-1);if(('"'===d||"'"===d||"`"===d||'"'===v||"'"===v||"`"===v)&&d!==v)throw new i("property names with quotes must have matching quotes");if("constructor"!==y&&h||(f=!0),b(g,s="%"+(n+="."+y)+"%"))c=g[s];else if(null!=c){if(!(y in c)){if(!e)throw new a("base intrinsic for "+t+" exists, but the property is not available.");return}if(u&&l+1>=r.length){var m=u(c,y);c=(h=!!m)&&"get"in m&&!("originalValue"in m.get)?m.get:c[y]}else h=b(c,y),c=c[y];h&&!f&&(g[s]=c)}}return c}},658:(t,e,r)=>{"use strict";var n=r(870)("%Object.getOwnPropertyDescriptor%",!0);if(n)try{n([],"length")}catch(t){n=null}t.exports=n},413:t=>{"use strict";var e={foo:{}},r=Object;t.exports=function(){return{__proto__:e}.foo===e.foo&&!({__proto__:null}instanceof r)}},143:(t,e,r)=>{"use strict";var n="undefined"!=typeof Symbol&&Symbol,i=r(985);t.exports=function(){return"function"==typeof n&&"function"==typeof Symbol&&"symbol"==typeof n("foo")&&"symbol"==typeof Symbol("bar")&&i()}},985:t=>{"use strict";t.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),r=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var n=Object.getOwnPropertySymbols(t);if(1!==n.length||n[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(t,e);if(42!==i.value||!0!==i.enumerable)return!1}return!0}},60:(t,e,r)=>{"use strict";var n=r(985);t.exports=function(){return n()&&!!Symbol.toStringTag}},416:(t,e,r)=>{"use strict";var n=r(569);t.exports=n.call(Function.call,Object.prototype.hasOwnProperty)},937:t=>{"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}},571:(t,e,r)=>{"use strict";var n=r(60)(),i=r(99)("Object.prototype.toString"),o=function(t){return!(n&&t&&"object"==typeof t&&Symbol.toStringTag in t)&&"[object Arguments]"===i(t)},a=function(t){return!!o(t)||null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==i(t)&&"[object Function]"===i(t.callee)},s=function(){return o(arguments)}();o.isLegacyArguments=a,t.exports=s?o:a},655:t=>{"use strict";var e,r,n=Function.prototype.toString,i="object"==typeof Reflect&&null!==Reflect&&Reflect.apply;if("function"==typeof i&&"function"==typeof Object.defineProperty)try{e=Object.defineProperty({},"length",{get:function(){throw r}}),r={},i((function(){throw 42}),null,e)}catch(t){t!==r&&(i=null)}else i=null;var o=/^\s*class\b/,a=function(t){try{var e=n.call(t);return o.test(e)}catch(t){return!1}},s=function(t){try{return!a(t)&&(n.call(t),!0)}catch(t){return!1}},u=Object.prototype.toString,c="function"==typeof Symbol&&!!Symbol.toStringTag,f=!(0 in[,]),p=function(){return!1};if("object"==typeof document){var l=document.all;u.call(l)===u.call(document.all)&&(p=function(t){if((f||!t)&&(void 0===t||"object"==typeof t))try{var e=u.call(t);return("[object HTMLAllCollection]"===e||"[object HTML document.all class]"===e||"[object HTMLCollection]"===e||"[object Object]"===e)&&null==t("")}catch(t){}return!1})}t.exports=i?function(t){if(p(t))return!0;if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;try{i(t,null,e)}catch(t){if(t!==r)return!1}return!a(t)&&s(t)}:function(t){if(p(t))return!0;if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;if(c)return s(t);if(a(t))return!1;var e=u.call(t);return!("[object Function]"!==e&&"[object GeneratorFunction]"!==e&&!/^\[object HTML/.test(e))&&s(t)}},141:(t,e,r)=>{"use strict";var n,i=Object.prototype.toString,o=Function.prototype.toString,a=/^\s*(?:function)?\*/,s=r(60)(),u=Object.getPrototypeOf;t.exports=function(t){if("function"!=typeof t)return!1;if(a.test(o.call(t)))return!0;if(!s)return"[object GeneratorFunction]"===i.call(t);if(!u)return!1;if(void 0===n){var e=function(){if(!s)return!1;try{return Function("return function*() {}")()}catch(t){}}();n=!!e&&u(e)}return u(t)===n}},38:(t,e,r)=>{"use strict";var n=r(821);t.exports=function(t){return!!n(t)}},952:t=>{t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},911:(t,e,r)=>{"use strict";var n=r(571),i=r(141),o=r(821),a=r(38);function s(t){return t.call.bind(t)}var u="undefined"!=typeof BigInt,c="undefined"!=typeof Symbol,f=s(Object.prototype.toString),p=s(Number.prototype.valueOf),l=s(String.prototype.valueOf),h=s(Boolean.prototype.valueOf);if(u)var y=s(BigInt.prototype.valueOf);if(c)var d=s(Symbol.prototype.valueOf);function g(t,e){if("object"!=typeof t)return!1;try{return e(t),!0}catch(t){return!1}}function v(t){return"[object Map]"===f(t)}function m(t){return"[object Set]"===f(t)}function w(t){return"[object WeakMap]"===f(t)}function _(t){return"[object WeakSet]"===f(t)}function b(t){return"[object ArrayBuffer]"===f(t)}function S(t){return"undefined"!=typeof ArrayBuffer&&(b.working?b(t):t instanceof ArrayBuffer)}function E(t){return"[object DataView]"===f(t)}function O(t){return"undefined"!=typeof DataView&&(E.working?E(t):t instanceof DataView)}e.isArgumentsObject=n,e.isGeneratorFunction=i,e.isTypedArray=a,e.isPromise=function(t){return"undefined"!=typeof Promise&&t instanceof Promise||null!==t&&"object"==typeof t&&"function"==typeof t.then&&"function"==typeof t.catch},e.isArrayBufferView=function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):a(t)||O(t)},e.isUint8Array=function(t){return"Uint8Array"===o(t)},e.isUint8ClampedArray=function(t){return"Uint8ClampedArray"===o(t)},e.isUint16Array=function(t){return"Uint16Array"===o(t)},e.isUint32Array=function(t){return"Uint32Array"===o(t)},e.isInt8Array=function(t){return"Int8Array"===o(t)},e.isInt16Array=function(t){return"Int16Array"===o(t)},e.isInt32Array=function(t){return"Int32Array"===o(t)},e.isFloat32Array=function(t){return"Float32Array"===o(t)},e.isFloat64Array=function(t){return"Float64Array"===o(t)},e.isBigInt64Array=function(t){return"BigInt64Array"===o(t)},e.isBigUint64Array=function(t){return"BigUint64Array"===o(t)},v.working="undefined"!=typeof Map&&v(new Map),e.isMap=function(t){return"undefined"!=typeof Map&&(v.working?v(t):t instanceof Map)},m.working="undefined"!=typeof Set&&m(new Set),e.isSet=function(t){return"undefined"!=typeof Set&&(m.working?m(t):t instanceof Set)},w.working="undefined"!=typeof WeakMap&&w(new WeakMap),e.isWeakMap=function(t){return"undefined"!=typeof WeakMap&&(w.working?w(t):t instanceof WeakMap)},_.working="undefined"!=typeof WeakSet&&_(new WeakSet),e.isWeakSet=function(t){return _(t)},b.working="undefined"!=typeof ArrayBuffer&&b(new ArrayBuffer),e.isArrayBuffer=S,E.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&E(new DataView(new ArrayBuffer(1),0,1)),e.isDataView=O;var I="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function k(t){return"[object SharedArrayBuffer]"===f(t)}function F(t){return void 0!==I&&(void 0===k.working&&(k.working=k(new I)),k.working?k(t):t instanceof I)}function A(t){return g(t,p)}function N(t){return g(t,l)}function R(t){return g(t,h)}function T(t){return u&&g(t,y)}function x(t){return c&&g(t,d)}e.isSharedArrayBuffer=F,e.isAsyncFunction=function(t){return"[object AsyncFunction]"===f(t)},e.isMapIterator=function(t){return"[object Map Iterator]"===f(t)},e.isSetIterator=function(t){return"[object Set Iterator]"===f(t)},e.isGeneratorObject=function(t){return"[object Generator]"===f(t)},e.isWebAssemblyCompiledModule=function(t){return"[object WebAssembly.Module]"===f(t)},e.isNumberObject=A,e.isStringObject=N,e.isBooleanObject=R,e.isBigIntObject=T,e.isSymbolObject=x,e.isBoxedPrimitive=function(t){return A(t)||N(t)||R(t)||T(t)||x(t)},e.isAnyArrayBuffer=function(t){return"undefined"!=typeof Uint8Array&&(S(t)||F(t))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(t){Object.defineProperty(e,t,{enumerable:!1,value:function(){throw new Error(t+" is not supported in userland")}})}))},585:(t,e,r)=>{var n=r(668),i=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),r={},n=0;n<e.length;n++)r[e[n]]=Object.getOwnPropertyDescriptor(t,e[n]);return r},o=/%[sdj%]/g;e.format=function(t){if(!w(t)){for(var e=[],r=0;r<arguments.length;r++)e.push(c(arguments[r]));return e.join(" ")}r=1;for(var n=arguments,i=n.length,a=String(t).replace(o,(function(t){if("%%"===t)return"%";if(r>=i)return t;switch(t){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(t){return"[Circular]"}default:return t}})),s=n[r];r<i;s=n[++r])v(s)||!S(s)?a+=" "+s:a+=" "+c(s);return a},e.deprecate=function(t,r){if(void 0!==n&&!0===n.noDeprecation)return t;if(void 0===n)return function(){return e.deprecate(t,r).apply(this,arguments)};var i=!1;return function(){if(!i){if(n.throwDeprecation)throw new Error(r);n.traceDeprecation?console.trace(r):console.error(r),i=!0}return t.apply(this,arguments)}};var a={},s=/^$/;if(n.env.NODE_DEBUG){var u=n.env.NODE_DEBUG;u=u.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),s=new RegExp("^"+u+"$","i")}function c(t,r){var n={seen:[],stylize:p};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),g(r)?n.showHidden=r:r&&e._extend(n,r),_(n.showHidden)&&(n.showHidden=!1),_(n.depth)&&(n.depth=2),_(n.colors)&&(n.colors=!1),_(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=f),l(n,t,n.depth)}function f(t,e){var r=c.styles[e];return r?"["+c.colors[r][0]+"m"+t+"["+c.colors[r][1]+"m":t}function p(t,e){return t}function l(t,r,n){if(t.customInspect&&r&&I(r.inspect)&&r.inspect!==e.inspect&&(!r.constructor||r.constructor.prototype!==r)){var i=r.inspect(n,t);return w(i)||(i=l(t,i,n)),i}var o=function(t,e){if(_(e))return t.stylize("undefined","undefined");if(w(e)){var r="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(r,"string")}return m(e)?t.stylize(""+e,"number"):g(e)?t.stylize(""+e,"boolean"):v(e)?t.stylize("null","null"):void 0}(t,r);if(o)return o;var a=Object.keys(r),s=function(t){var e={};return t.forEach((function(t,r){e[t]=!0})),e}(a);if(t.showHidden&&(a=Object.getOwnPropertyNames(r)),O(r)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return h(r);if(0===a.length){if(I(r)){var u=r.name?": "+r.name:"";return t.stylize("[Function"+u+"]","special")}if(b(r))return t.stylize(RegExp.prototype.toString.call(r),"regexp");if(E(r))return t.stylize(Date.prototype.toString.call(r),"date");if(O(r))return h(r)}var c,f="",p=!1,S=["{","}"];return d(r)&&(p=!0,S=["[","]"]),I(r)&&(f=" [Function"+(r.name?": "+r.name:"")+"]"),b(r)&&(f=" "+RegExp.prototype.toString.call(r)),E(r)&&(f=" "+Date.prototype.toUTCString.call(r)),O(r)&&(f=" "+h(r)),0!==a.length||p&&0!=r.length?n<0?b(r)?t.stylize(RegExp.prototype.toString.call(r),"regexp"):t.stylize("[Object]","special"):(t.seen.push(r),c=p?function(t,e,r,n,i){for(var o=[],a=0,s=e.length;a<s;++a)N(e,String(a))?o.push(y(t,e,r,n,String(a),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(y(t,e,r,n,i,!0))})),o}(t,r,n,s,a):a.map((function(e){return y(t,r,n,s,e,p)})),t.seen.pop(),function(t,e,r){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?r[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+r[1]:r[0]+e+" "+t.join(", ")+" "+r[1]}(c,f,S)):S[0]+f+S[1]}function h(t){return"["+Error.prototype.toString.call(t)+"]"}function y(t,e,r,n,i,o){var a,s,u;if((u=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?s=u.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):u.set&&(s=t.stylize("[Setter]","special")),N(n,i)||(a="["+i+"]"),s||(t.seen.indexOf(u.value)<0?(s=v(r)?l(t,u.value,null):l(t,u.value,r-1)).indexOf("\n")>-1&&(s=o?s.split("\n").map((function(t){return"  "+t})).join("\n").slice(2):"\n"+s.split("\n").map((function(t){return"   "+t})).join("\n")):s=t.stylize("[Circular]","special")),_(a)){if(o&&i.match(/^\d+$/))return s;(a=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.slice(1,-1),a=t.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=t.stylize(a,"string"))}return a+": "+s}function d(t){return Array.isArray(t)}function g(t){return"boolean"==typeof t}function v(t){return null===t}function m(t){return"number"==typeof t}function w(t){return"string"==typeof t}function _(t){return void 0===t}function b(t){return S(t)&&"[object RegExp]"===k(t)}function S(t){return"object"==typeof t&&null!==t}function E(t){return S(t)&&"[object Date]"===k(t)}function O(t){return S(t)&&("[object Error]"===k(t)||t instanceof Error)}function I(t){return"function"==typeof t}function k(t){return Object.prototype.toString.call(t)}function F(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(t=t.toUpperCase(),!a[t])if(s.test(t)){var r=n.pid;a[t]=function(){var n=e.format.apply(e,arguments);console.error("%s %d: %s",t,r,n)}}else a[t]=function(){};return a[t]},e.inspect=c,c.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},c.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.types=r(911),e.isArray=d,e.isBoolean=g,e.isNull=v,e.isNullOrUndefined=function(t){return null==t},e.isNumber=m,e.isString=w,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=_,e.isRegExp=b,e.types.isRegExp=b,e.isObject=S,e.isDate=E,e.types.isDate=E,e.isError=O,e.types.isNativeError=O,e.isFunction=I,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=r(952);var A=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function N(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){var t,r;console.log("%s - %s",(r=[F((t=new Date).getHours()),F(t.getMinutes()),F(t.getSeconds())].join(":"),[t.getDate(),A[t.getMonth()],r].join(" ")),e.format.apply(e,arguments))},e.inherits=r(937),e._extend=function(t,e){if(!e||!S(e))return t;for(var r=Object.keys(e),n=r.length;n--;)t[r[n]]=e[r[n]];return t};var R="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function T(t,e){if(!t){var r=new Error("Promise was rejected with a falsy value");r.reason=t,t=r}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(R&&t[R]){var e;if("function"!=typeof(e=t[R]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,R,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,r,n=new Promise((function(t,n){e=t,r=n})),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push((function(t,n){t?r(t):e(n)}));try{t.apply(this,i)}catch(t){r(t)}return n}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),R&&Object.defineProperty(e,R,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,i(t))},e.promisify.custom=R,e.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function e(){for(var e=[],r=0;r<arguments.length;r++)e.push(arguments[r]);var i=e.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var o=this,a=function(){return i.apply(o,arguments)};t.apply(this,e).then((function(t){n.nextTick(a.bind(null,null,t))}),(function(t){n.nextTick(T.bind(null,t,a))}))}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),Object.defineProperties(e,i(t)),e}},821:(t,e,r)=>{"use strict";var n=r(904),i=r(36),o=r(755),a=r(99),s=r(658),u=a("Object.prototype.toString"),c=r(60)(),f="undefined"==typeof globalThis?r.g:globalThis,p=i(),l=a("String.prototype.slice"),h=Object.getPrototypeOf,y=a("Array.prototype.indexOf",!0)||function(t,e){for(var r=0;r<t.length;r+=1)if(t[r]===e)return r;return-1},d={__proto__:null};n(p,c&&s&&h?function(t){var e=new f[t];if(Symbol.toStringTag in e){var r=h(e),n=s(r,Symbol.toStringTag);if(!n){var i=h(r);n=s(i,Symbol.toStringTag)}d["$"+t]=o(n.get)}}:function(t){var e=new f[t];d["$"+t]=o(e.slice)}),t.exports=function(t){if(!t||"object"!=typeof t)return!1;if(!c){var e=l(u(t),8,-1);return y(p,e)>-1?e:"Object"===e&&function(t){var e=!1;return n(d,(function(r,n){if(!e)try{r(t),e=l(n,1)}catch(t){}})),e}(t)}return s?function(t){var e=!1;return n(d,(function(r,n){if(!e)try{"$"+r(t)===n&&(e=l(n,1))}catch(t){}})),e}(t):null}},36:(t,e,r)=>{"use strict";var n=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],i="undefined"==typeof globalThis?r.g:globalThis;t.exports=function(){for(var t=[],e=0;e<n.length;e++)"function"==typeof i[n[e]]&&(t[t.length]=n[e]);return t}}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={id:n,loaded:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t=r(665);r.g=globalThis;const e=r(709),{promisify:n}=r(585),i=r(811),o=r(837);e.install(window),e.configure({fs:"InMemory",options:{}},(t=>{if(t)throw t})),o.promises=new Proxy(Object.fromEntries(["readFile","writeFile","stat","mkdir"].map((t=>[t,n(o[t])]))),{get(t,e,r){if(!t[e])throw new Error(`Not implemented fs.promises.${e}`);return(...r)=>("string"!=typeof r[0]||r[0].startsWith("/")||(r[0]="/"+r[0]),t[e](...r))}}),o.promises.open=async(...t)=>{const e=await n(o.open)(...t);return Object.fromEntries(["read","write","close"].map((t=>[t,async(...r)=>await new Promise((n=>{o[t](e,...r,((t,e,r)=>{if(t)throw t;n({buffer:r,bytesRead:e})}))}))])))},input.onchange=async e=>{const r=e.target.files[0],n="/test";await o.promises.writeFile(n,t.from(await r.arrayBuffer()));const a=await i.parseFile(n);console.log(a)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,